{
	"info": {
		"_postman_id": "b5935fbd-eae9-4e4e-ab33-5fe323e3e0d2",
		"name": "fpp-api-automation-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "FPP_API",
			"item": [
				{
					"name": "SETUP",
					"item": [
						{
							"name": "others-validation",
							"item": [
								{
									"name": "checkoutSessionExpiryTime",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "far-future",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"2340-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "far-past",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1900-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "collectionStoreId",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "very-big",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "very-small",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"A\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "valid-punctuation-only",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \",;:.-\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid-punctuation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"store id ?\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "leading-trailing-spaces",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"    store id    \", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "collectionStorePostCode",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "leading-trailing-spaces",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"    SW1A 1AA    \", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "very-big",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "very-small",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"A\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "valid-punctuation-only",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \",;:.-\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid-punctuation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1A?\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "creditPlanId",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "very-small",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"A\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "leading-trailing-spaces",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"   credit plan id    \", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "very-big",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "valid-punctuation-only",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \",;:.-\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid-punctuation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"credit plan ?\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "fulfilmentChannel",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "'collection'",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "not-collection",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"not-collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "ipAddress",
									"item": [
										{
											"name": "Valid",
											"item": []
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "very-big",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "very-small",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"1\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "origin",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "'argos'",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "not-argos",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"not-argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "purchaseChannel",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "'web'",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "not-web",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\", \n    \"purchaseChannel\": \"not-WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "stockHoldExpiryTime",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "far-future",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"2340-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "far-past",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1900-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "userAgent",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "very-big",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "very-small",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"A\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "valid-punctuation-only",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \",;:.-\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "leading-trailing-spaces",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"    user agent    \"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "invalid-punctuation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"user agent ?\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\"\n    \n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "customer-validation",
							"item": [
								{
									"name": "customer",
									"item": [
										{
											"name": "billingAddress",
											"item": [
												{
													"name": "houseNumber",
													"item": [
														{
															"name": "Valid",
															"item": [
																{
																	"name": "very-big",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "very-small",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"0\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "valid-punctuation-only",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \",;:.-\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "leading-trailing-spaces",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"   number one.    \",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "empty",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "missing",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														},
														{
															"name": "Invalid",
															"item": [
																{
																	"name": "invalid-punctuation",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"    pm.expect(pm.response.json().errors[0].message).to.eq(",
																					"        '\\\"customer.billingAddress.houseNumber\\\" fails to match the required pattern: /^[^~§±!@€£#$%^&_+={}[\\\\]|”<>?¡¢¶•ªº«]*$/');",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"number one ?\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														}
													]
												},
												{
													"name": "line1",
													"item": [
														{
															"name": "Valid",
															"item": [
																{
																	"name": "very-big",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "very-small",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"0\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "valid-punctuation-only",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \",;:.-\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "leading-trailing-spaces",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"   line one.    \",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														},
														{
															"name": "Invalid",
															"item": [
																{
																	"name": "invalid-punctuation",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"line 1 ?\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "empty",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "missing",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														}
													]
												},
												{
													"name": "postCode",
													"item": [
														{
															"name": "Valid",
															"item": [
																{
																	"name": "leading-trailing-spaces",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"    SW1A 1AA    \",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														},
														{
															"name": "Invalid",
															"item": [
																{
																	"name": "very-big",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "very-small",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"A\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "valid-punctuation-only",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \",;:.-\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "invalid-punctuation",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1A?\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "empty",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "missing",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														}
													]
												},
												{
													"name": "town",
													"item": [
														{
															"name": "Valid",
															"item": [
																{
																	"name": "very-big",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "very-small",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"A\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "valid-punctuation-only",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \",;:.-\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "leading-trailing-spaces",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"    the town    \",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														},
														{
															"name": "Invalid",
															"item": [
																{
																	"name": "invalid-punctuation",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"town ?\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "empty",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "missing",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														}
													]
												},
												{
													"name": "county",
													"item": [
														{
															"name": "Valid",
															"item": [
																{
																	"name": "very-big",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "very-small",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"A\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "valid-punctuation-only",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \",;:.-\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "leading-trailing-spaces",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"    the county    \"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "empty",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "missing",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200, 500\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\"\n        \n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														},
														{
															"name": "Invalid",
															"item": [
																{
																	"name": "invalid-punctuation",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 400\", function () {",
																					"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"county ?\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
																		},
																		"url": {
																			"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
																			"host": [
																				"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "customerId",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "very-small",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"A\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "leading-trailing-spaces",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"    a1b2c3d4e5   \",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "very-big",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "valid-punctuation-only",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \",;:.-\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid-punctuation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"a1b2c3d4e5 ?\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "emailAddress",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "very-big",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890@123456789012345678901234567890123456789012345678901234567890.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "very-small",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"A@B.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "leading-trailing-spaces",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"    XXX@XXX.com    \",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid-punctuation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX?@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "valid-punctuation-only",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \",;:.-@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "firstName",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "very-big",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "very-small",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"A\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "leading-trailing-spaces",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"    first name    \",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "valid-punctuation-only",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \",;:.-\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid-punctuation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"first name ?\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \n    \"lastName\": \"XXX\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "lastName",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "very-big",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "very-small",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"A\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "leading-trailing-spaces",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"    last name    \",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "valid-punctuation-only",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \",;:.-\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid-punctuation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"last name ?\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"\",\n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \n    \"title\": \"Mr\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "title",
									"item": [
										{
											"name": "Valid",
											"item": [
												{
													"name": "leading-trailing-spaces",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200, 500\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,500]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"    Mr    \"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Invalid",
											"item": [
												{
													"name": "very-big",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "very-small",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"A\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "valid-punctuation-only",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \",;:.-\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid-punctuation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"Mr ?\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\",\n    \"title\": \"\"\n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"messageId\": \"XXX\",\n  \"basket\": {\n    \"discounts\": 0.00, \n    \"financeAmount\": 1.00, \n    \"giftVouchers\": 0.00, \n    \"grossAmount\": 1.00, \n    \"nectarPointsCurrencyValue\": 0.00 \n  },\n  \"customer\": {\n    \"billingAddress\": {\n        \"houseNumber\": \"XXX\",\n        \"line1\": \"XXX\",\n        \"postCode\": \"SW1A 1AA\",\n        \"town\": \"XXX\",\n        \"county\": \"XXX\"\n      },\n    \"customerId\": \"XXX\",\n    \"emailAddress\": \"XXX@XXX.com\",\n    \"firstName\": \"XXX\",\n    \"lastName\": \"XXX\"\n    \n  },\n  \"others\": {\n    \"checkoutCallbackUrl\": \"https://XXX.com/XXX\",\n    \"checkoutSessionExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"collectionStoreId\": \"XXX\", \n    \"collectionStorePostCode\": \"SW1A 1AA\", \n    \"creditPlanId\": \"XXX\", \n    \"fulfilmentChannel\": \"collection\", \n    \"ipAddress\": \"99.99.99.99\",\n    \"origin\": \"argos\", \n    \"purchaseChannel\": \"WEB\",\n    \"stockHoldExpiryTime\": \"1970-01-01T00:00:00.019Z\", \n    \"userAgent\": \"XXX\"\n  },\n  \"products\": [\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 1,\n      \"unitPrice\": 1.00\n    },\n    {\n      \"description\": \"XXX\",\n      \"quantity\": 1,\n      \"sku\": 2,\n      \"unitPrice\": 1.00\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
															"host": [
																"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "FPP-238-setup-argos-checkout-happypath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var response_schema_setup_argos_checkout ={\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"messageId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"applicationId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"verificationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"redirectUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"messageId\",\r",
											"    \"applicationId\",\r",
											"    \"verificationToken\",\r",
											"    \"redirectUrl\"\r",
											"  ]\r",
											"}\r",
											"pm.collectionVariables.set(\"schema_post_setup_argos_checkout\", response_schema_setup_argos_checkout);\r",
											"\r",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime\r",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();\r",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);\r",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var reqbody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"pm.environment.set(\"applicationId\",jsonData.applicationId);\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout endpoint  response status code is 200\r",
											"pm.test('The status code for the /setUp end point is 200', ()=>{\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout response contains 'messageid' label\r",
											"pm.test(\"Validate The response body should contain a messageid label\", ()=>{\r",
											"   pm.expect(jsonData).to.have.property('messageId');\r",
											"});\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout endpoint response messageid 'type' is string\r",
											"pm.test(\"Validate the type of messageid is string\", ()=>{\r",
											"    pm.expect(typeof jsonData.messageId === \"string\").to.be.true;\r",
											"});\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout response 'body' contains same 'messageid' as request 'body'\r",
											"pm.test(\"Validate that the same messageid exists in the response body\", ()=>{\r",
											"   pm.expect(jsonData.messageId).to.eql(reqbody.messageId);\r",
											"});\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout endpoint response contains 'applicationId'\r",
											"pm.test(\"Validate the applicationId exists in the response body\", ()=>{\r",
											"    pm.expect(jsonData).to.have.property('applicationId');\r",
											"});\r",
											"\r",
											"//Happypath - Verify /setup argoscheckout endpoint response applicationId 'type' is string\r",
											"pm.test(\"Validate the type of applicationId is string\", ()=>{\r",
											"    pm.expect(typeof jsonData.applicationId === \"string\").to.be.true;\r",
											"});\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout endpoint response contains 'verificationToken'\r",
											"pm.test(\"Validate the nextstage exists in the response body\", ()=>{\r",
											"    pm.expect(jsonData).to.have.property('verificationToken');\r",
											"});\r",
											"\r",
											"//Happypath - Verify /setup argoscheckout endpoint response verificationtoken 'type' is string\r",
											"pm.test(\"Validate the type of verificationToken is string\", ()=>{\r",
											"    pm.expect(typeof jsonData.verificationToken === \"string\").to.be.true;\r",
											"});\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout endpoint response contains 'redirectUrl'\r",
											"pm.test(\"Validate the nextstage exists in the response body\", ()=>{\r",
											"    pm.expect(jsonData).to.have.property('redirectUrl');\r",
											"});\r",
											"\r",
											"//Happypath - Verify /setup argoscheckout endpoint response redirecturl 'type' is string\r",
											"pm.test(\"Validate the type of applicationId is string\", ()=>{\r",
											"    pm.expect(typeof jsonData.redirectUrl === \"string\").to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"messageId\": \"OTHER_REQUEST\",\r\n    \"customer\": {\r\n        \"customerId\": \"123\",\r\n        \"title\": \"Mr\",\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"lastName\": \"{{lastName}}\",\r\n        \"emailAddress\": \"{{firstName}}.{{lastName}}@gmail.com\",\r\n        \"billingAddress\": {\r\n            \"houseNumber\": \"{{houseNumber1}}\",\r\n            \"line1\": \"{{street1}}\",\r\n            \"postCode\": \"{{postCode1}}\",\r\n            \"town\": \"{{town1}}\",\r\n            \"county\": \"{{county1}}\"\r\n        }\r\n    },\r\n    \"basket\": {\r\n        \"financeAmount\": 320.00,\r\n        \"grossAmount\": 320.00,\r\n        \"discounts\": 0.00,\r\n        \"giftVouchers\": 0.00,\r\n        \"nectarPointsCurrencyValue\": 0.00\r\n    },\r\n    \"others\": {\r\n        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",\r\n        \"origin\": \"argos\",\r\n        \"ipAddress\": \"99.99.99.99\",\r\n        \"collectionStoreId\": \"12345\",\r\n        \"userAgent\": \"FrontendTesting/1.00\",\r\n        \"collectionStorePostCode\": \"BT14 6NE\",\r\n        \"fulfilmentChannel\": \"Collection\",\r\n        \"creditPlanId\": \"20010\",\r\n        \"checkoutSessionExpiryTime\": \"{{checkoutSessionExpiryTime}}\",\r\n        \"stockHoldExpiryTime\": \"{{stockHoldExpiryTime}}\",\r\n        \"purchaseChannel\": \"Web\"\r\n    },\r\n    \"products\": [\r\n        {\r\n            \"quantity\": 1,\r\n            \"sku\": 1000,\r\n            \"unitPrice\": 300.00,\r\n            \"description\": \"Samsung TV\"\r\n        },\r\n        {\r\n            \"quantity\": 2,\r\n            \"sku\": 2313131323,\r\n            \"unitPrice\": 10.00,\r\n            \"description\": \"AA Batteries\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
									"host": [
										"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-179-county-stockhold-expiry-fields-optional-happypath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var response_schema_setup_argos_checkout ={\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"messageId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"applicationId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"verificationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"redirectUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"messageId\",\r",
											"    \"applicationId\",\r",
											"    \"verificationToken\",\r",
											"    \"redirectUrl\"\r",
											"  ]\r",
											"}\r",
											"pm.collectionVariables.set(\"schema_post_setup_argos_checkout\", response_schema_setup_argos_checkout);\r",
											"\r",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime\r",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();\r",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);\r",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var reqbody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"pm.environment.set(\"applicationId\",jsonData.applicationId);\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout endpoint  response status code is 200\r",
											"pm.test('The status code for the /setUp end point is 200', ()=>{\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout response contains 'messageid' label\r",
											"pm.test(\"Validate The response body should contain a messageid label\", ()=>{\r",
											"   pm.expect(jsonData).to.have.property('messageId');\r",
											"});\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout endpoint response messageid 'type' is string\r",
											"pm.test(\"Validate the type of messageid is string\", ()=>{\r",
											"    pm.expect(typeof jsonData.messageId === \"string\").to.be.true;\r",
											"});\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout response 'body' contains same 'messageid' as request 'body'\r",
											"pm.test(\"Validate that the same messageid exists in the response body\", ()=>{\r",
											"   pm.expect(jsonData.messageId).to.eql(reqbody.messageId);\r",
											"});\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout endpoint response contains 'applicationId'\r",
											"pm.test(\"Validate the applicationId exists in the response body\", ()=>{\r",
											"    pm.expect(jsonData).to.have.property('applicationId');\r",
											"});\r",
											"\r",
											"//Happypath - Verify /setup argoscheckout endpoint response applicationId 'type' is string\r",
											"pm.test(\"Validate the type of applicationId is string\", ()=>{\r",
											"    pm.expect(typeof jsonData.applicationId === \"string\").to.be.true;\r",
											"});\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout endpoint response contains 'verificationToken'\r",
											"pm.test(\"Validate the nextstage exists in the response body\", ()=>{\r",
											"    pm.expect(jsonData).to.have.property('verificationToken');\r",
											"});\r",
											"\r",
											"//Happypath - Verify /setup argoscheckout endpoint response verificationtoken 'type' is string\r",
											"pm.test(\"Validate the type of verificationToken is string\", ()=>{\r",
											"    pm.expect(typeof jsonData.verificationToken === \"string\").to.be.true;\r",
											"});\r",
											"\r",
											"// Happypath - Verify /setup argoscheckout endpoint response contains 'redirectUrl'\r",
											"pm.test(\"Validate the nextstage exists in the response body\", ()=>{\r",
											"    pm.expect(jsonData).to.have.property('redirectUrl');\r",
											"});\r",
											"\r",
											"//Happypath - Verify /setup argoscheckout endpoint response redirecturl 'type' is string\r",
											"pm.test(\"Validate the type of applicationId is string\", ()=>{\r",
											"    pm.expect(typeof jsonData.redirectUrl === \"string\").to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"messageId\": \"OTHER_REQUEST\",\r\n    \"customer\": {\r\n        \"customerId\": \"123\",\r\n        \"title\": \"Mr\",\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"lastName\": \"{{lastName}}\",\r\n        \"emailAddress\": \"{{firstName}}.{{lastName}}@gmail.com\",\r\n        \"billingAddress\": {\r\n            \"houseNumber\": \"{{houseNumber1}}\",\r\n            \"line1\": \"{{street1}}\",\r\n            \"postCode\": \"{{postCode1}}\",\r\n            \"town\": \"{{town1}}\"\r\n        }\r\n    },\r\n    \"basket\": {\r\n        \"financeAmount\": 320.00,\r\n        \"grossAmount\": 320.00,\r\n        \"discounts\": 0.00,\r\n        \"giftVouchers\": 0.00,\r\n        \"nectarPointsCurrencyValue\": 0.00\r\n    },\r\n    \"others\": {\r\n        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",\r\n        \"origin\": \"argos\",\r\n        \"ipAddress\": \"99.99.99.99\",\r\n        \"collectionStoreId\": \"12345\",\r\n        \"userAgent\": \"FrontendTesting/1.00\",\r\n        \"collectionStorePostCode\": \"BT14 6NE\",\r\n        \"fulfilmentChannel\": \"Collection\",\r\n        \"creditPlanId\": \"20010\",\r\n        \"checkoutSessionExpiryTime\": \"{{checkoutSessionExpiryTime}}\",\r\n        \"purchaseChannel\": \"Web\"\r\n    },\r\n    \"products\": [\r\n        {\r\n            \"quantity\": 1,\r\n            \"sku\": 1000,\r\n            \"unitPrice\": 300.00,\r\n            \"description\": \"Samsung TV\"\r\n        },\r\n        {\r\n            \"quantity\": 2,\r\n            \"sku\": 2313131323,\r\n            \"unitPrice\": 10.00,\r\n            \"description\": \"AA Batteries\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
									"host": [
										"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-238-setUp-validation-data-driven",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const scenario = pm.iterationData.get('scenario');",
											"const scenarioType = pm.iterationData.get('scenarioType');",
											"",
											"if (scenarioType === 'valid') {",
											"    pm.test('Status code is 200, 500', function () {",
											"        pm.expect(pm.response.code).to.be.oneOf([200,500]);",
											"    });",
											"}",
											"",
											"if (scenarioType === 'invalid') {",
											"    try {",
											"        const { code, message: actualErrorMessage } = pm.response.json().errors[0];",
											"        const expectedErrorMessage = pm.iterationData.get('expectedErrorMessage');",
											"",
											"        console.info(",
											"            'actual error message is: ' + actualErrorMessage + '\\n\\n' + ",
											"            'expected error message is: ' + expectedErrorMessage",
											"        );",
											"",
											"        pm.test(`Verify ${scenario} 400 status code`, () => {",
											"            pm.response.to.have.status(400);",
											"        });",
											"",
											"        pm.test(`Verify ${scenario} error`, () => {",
											"            pm.expect(code).to.eq('SETUP_REQUEST_INVALID');",
											"            pm.expect(actualErrorMessage).to.eql(expectedErrorMessage);",
											"        });",
											"    } catch(TypeError) {",
											"        throw new Error('ScenarioName:' + ' ' + scenario + '. ' + TypeError);",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var response_schema_setup_argos_checkout ={\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"messageId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"applicationId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"verificationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"redirectUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"messageId\",\r",
											"    \"applicationId\",\r",
											"    \"verificationToken\",\r",
											"    \"redirectUrl\"\r",
											"  ]\r",
											"}\r",
											"pm.collectionVariables.set(\"schema_post_setup_argos_checkout\", response_schema_setup_argos_checkout);\r",
											"\r",
											"// Array of request keys\r",
											"const requestKeys = [\r",
											"    'messageId',\r",
											"    'customer',\r",
											"    'basket',\r",
											"    'others',\r",
											"    'products'\r",
											"];\r",
											"\r",
											"let body = {};\r",
											"\r",
											"// Assign values to request body\r",
											"for( let i in requestKeys){\r",
											"    const key = requestKeys[i];\r",
											"    const value = pm.iterationData.get('data')[key];\r",
											"    if (value !== undefined) {\r",
											"        body[key] = value;\r",
											"    }\r",
											"}\r",
											"\r",
											"// Update 'body' with valid 'checkoutSessionExpiryTime' and 'stockHoldExpiryTime'\r",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();\r",
											"body['others']['checkoutSessionExpiryTime'] = expiryTime;\r",
											"body['others']['stockHoldExpiryTime'] = expiryTime;\r",
											"\r",
											"// Set in request\r",
											"pm.environment.set('req_body', JSON.stringify(body));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{req_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2b}}{{getsession}}{{setup}}",
									"host": [
										"{{dev3}}{{b2b}}{{getsession}}{{setup}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET_APPLICATION",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "Valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dev3}}{{b2c}}{{getsession}}/abcdef01-1278-448a-890c-30bbc708ee52",
											"host": [
												"{{dev3}}{{b2c}}{{getsession}}"
											],
											"path": [
												"abcdef01-1278-448a-890c-30bbc708ee52"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dev3}}{{b2c}}{{getsession}}/not-valid-app-id-again",
											"host": [
												"{{dev3}}{{b2c}}{{getsession}}"
											],
											"path": [
												"not-valid-app-id-again"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "FPP-239-GetApplication-HappyPathScenarios",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_get_application = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"applicationId\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"customer\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"title\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"firstName\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"lastName\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"middleName\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"emailAddress\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"addresses\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"addressType\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"address\": {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                      \"line1\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"line2\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"line3\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"locality\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"province\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"postCode\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"country\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"countryISO\": {",
											"                        \"type\": \"string\"",
											"                      }",
											"                    },",
											"                    \"required\": [",
											"                      \"line1\",",
											"                      \"line2\",",
											"                      \"line3\",",
											"                      \"locality\",",
											"                      \"province\",",
											"                      \"postCode\",",
											"                      \"country\",",
											"                      \"countryISO\"",
											"                    ]",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"addressType\",",
											"                  \"address\"",
											"                ]",
											"              }",
											"            ]",
											"          }",
											"        },",
											"        \"required\": [",
											"          \"title\",",
											"          \"firstName\",",
											"          \"lastName\",",
											"          \"middleName\",",
											"          \"emailAddress\",",
											"          \"addresses\"",
											"        ]",
											"      },",
											"      \"creditPlan\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"planNumber\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"apr\": {",
											"            \"type\": \"number\"",
											"          },",
											"          \"periodDuration\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"minimumDuration\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"maximumDuration\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"basketValue\": {",
											"            \"type\": \"number\"",
											"          },",
											"          \"mppRepresentativeExample\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"              \"monthlyAmount\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"totalCreditCharge\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"totalAmountPayable\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"totalCreditAmount\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"fixedInterestRate\": {",
											"                \"type\": \"string\"",
											"              }",
											"            },",
											"            \"required\": [",
											"              \"monthlyAmount\",",
											"              \"totalCreditCharge\",",
											"              \"totalAmountPayable\",",
											"              \"totalCreditAmount\",",
											"              \"fixedInterestRate\"",
											"            ]",
											"          },",
											"          \"mppDetailedCalculation \": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              }",
											"            ]",
											"          }",
											"        },",
											"        \"required\": [",
											"          \"planNumber\",",
											"          \"apr\",",
											"          \"periodDuration\",",
											"          \"minimumDuration\",",
											"          \"maximumDuration\",",
											"          \"basketValue\",",
											"          \"mppRepresentativeExample\",",
											"          \"mppDetailedCalculation \"",
											"        ]",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"applicationId\",",
											"      \"customer\",",
											"      \"creditPlan\"",
											"    ]",
											"  }",
											"  pm.collectionVariables.set(\"schema_get_get_application\", response_schema_get_application);",
											"  ",
											"  // set expiry time",
											"  const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"  pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"  pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"  ",
											"  const env = { get: variable => pm.environment.get(variable) }",
											"  ",
											"  let createApplicationBody = JSON.stringify({",
											"    \"messageId\": \"OTHER_REQUEST\",",
											"    \"customer\": {",
											"      \"customerId\": env.get('customerId'),",
											"      \"title\": \"Mr\",",
											"      \"firstName\": env.get('firstName'),",
											"      \"lastName\": env.get('lastName'),",
											"      \"emailAddress\":  `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"      \"billingAddress\": {",
											"        \"houseNumber\": env.get(\"houseNumber1\"),",
											"        \"line1\": env.get(\"street1\"),",
											"        \"postCode\": env.get(\"postCode1\"),",
											"        \"town\": env.get(\"town1\"),",
											"        \"county\": env.get(\"county1\"),",
											"      }",
											"    },",
											"    \"basket\": {",
											"      \"financeAmount\": 320,",
											"      \"grossAmount\": 320,",
											"      \"discounts\": 0,",
											"      \"giftVouchers\": 0,",
											"      \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"      \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"      \"origin\": \"argos\",",
											"      \"ipAddress\": \"99.99.99.99\",",
											"      \"collectionStoreId\": \"12345\",",
											"      \"userAgent\": \"FrontendTesting/1.00\",",
											"      \"collectionStorePostCode\": \"BT14 6NE\",",
											"      \"fulfilmentChannel\": \"Collection\",",
											"      \"creditPlanId\": \"20010\",",
											"      \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"      \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"      \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"      {",
											"        \"quantity\": 1,",
											"        \"sku\": 1000,",
											"        \"unitPrice\": 300,",
											"        \"description\": \"Samsung TV\"",
											"      },",
											"      {",
											"        \"quantity\": 2,",
											"        \"sku\": 2313131323,",
											"        \"unitPrice\": 10,",
											"        \"description\": \"AA Batteries\"",
											"      }",
											"    ]",
											"  });",
											"  ",
											"  //getting values from env variables",
											"  const baseURL = pm.environment.get(\"dev3\");",
											"  const b2bPath = pm.environment.get(\"b2b\");",
											"  const sessionPath = pm.environment.get(\"getsession\");",
											"  const setupPath = pm.environment.get(\"setup\");",
											"  ",
											"  //building the request",
											"  const createApplicationRequest = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath, //building the url path",
											"    method: 'POST',",
											"    header: {",
											"      'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"      mode: 'raw',",
											"      raw: createApplicationBody",
											"    }",
											"  };",
											"  ",
											"    pm.sendRequest(createApplicationRequest, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const body = res.json()",
											"        pm.environment.set(\"applicationId\", body.applicationId);",
											"    })",
											"  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// Happypath - Verify /getApplication endpoint  response status code is 200",
											"pm.test('The status code for the /getApplication end point is 200', ()=>{",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"//Happypath - Verify /setup argoscheckout endpoint response applicationId 'type' is string",
											"pm.test(\"Validate the type of applicationId is string\", ()=>{",
											"    const { applicationId } = jsonData;",
											"    pm.expect(typeof applicationId === \"string\").to.be.true;",
											"    pm.expect(applicationId.length).to.be.at.least(1);",
											"});",
											"",
											"//Happypath - Verify /setup argoscheckout endpoint response 'errorRedirectUrl'",
											"pm.test(\"Validate 'errorRedirectUrl' equals argos url + 'code' query param value 'code=credit_service_error'\", ()=>{",
											"    pm.expect(jsonData.errorRedirectUrl).to.eq('https://www.argos.co.uk/?code=credit_service_error&token=' + jsonData.applicationId);",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response title 'type' is string",
											"pm.test(\"Validate the type of title is string\", ()=>{",
											"    const { customer } = jsonData;",
											"    pm.expect(typeof customer.title === \"string\").to.be.true;",
											"    pm.expect(customer.title.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response firstName 'type' is string",
											"pm.test(\"Validate the type of firstName is string\", ()=>{",
											"    const { customer } = jsonData;",
											"    pm.expect(typeof customer.firstName === \"string\").to.be.true;",
											"    pm.expect(customer.firstName.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response lastName 'type' is string",
											"pm.test(\"Validate the type of lastName is string\", ()=>{",
											"    const { customer } = jsonData;",
											"    pm.expect(typeof customer.lastName === \"string\").to.be.true;",
											"    pm.expect(customer.lastName.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response emailAddress 'type' is string",
											"pm.test(\"Validate the type of emailAddress is string\", ()=>{",
											"    const { customer } = jsonData;",
											"    pm.expect(typeof customer.emailAddress === \"string\").to.be.true;",
											"    pm.expect(customer.emailAddress.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response planNumber 'type' is string",
											"pm.test(\"Validate the type of planNumber is string\", ()=>{",
											"    const { planNumber } = jsonData.creditPlan;",
											"    pm.expect(typeof planNumber === \"string\").to.be.true;",
											"    pm.expect(planNumber.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response apr 'type' is number",
											"pm.test(\"Validate the type of planNumber is string\", ()=>{",
											"    pm.expect(typeof jsonData.creditPlan.apr === \"number\").to.be.true;",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response periodDuration 'type' is number",
											"pm.test(\"Validate the type of periodDuration is string\", ()=>{",
											"    pm.expect(typeof jsonData.creditPlan.periodDuration === \"number\").to.be.true;",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response minimumDuration 'type' is number",
											"pm.test(\"Validate the type of minimumDuration is string\", ()=>{",
											"    pm.expect(typeof jsonData.creditPlan.minimumDuration === \"number\").to.be.true;",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response maximumDuration 'type' is number",
											"pm.test(\"Validate the type of maximumDuration is string\", ()=>{",
											"    pm.expect(typeof jsonData.creditPlan.maximumDuration === \"number\").to.be.true;",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response 'financeAmount' 'type' is number",
											"pm.test(\"Validate the type of basketValue is string\", ()=>{",
											"    pm.expect(typeof jsonData.basket.financeAmount === \"number\").to.be.true;",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response monthlyAmount 'type' is string",
											"pm.test(\"Validate the type of monthlyAmount is string\", ()=>{",
											"    const { monthlyAmount } = jsonData.creditPlan.mppRepresentativeExample;",
											"    pm.expect(typeof monthlyAmount === \"string\").to.be.true;",
											"    pm.expect(monthlyAmount.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response totalCreditCharge 'type' is string",
											"pm.test(\"Validate the type of totalCreditCharge is string\", ()=>{",
											"    const { totalCreditCharge } = jsonData.creditPlan.mppRepresentativeExample;",
											"    pm.expect(typeof totalCreditCharge === \"string\").to.be.true;",
											"    pm.expect(totalCreditCharge.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response totalAmountPayable 'type' is string",
											"pm.test(\"Validate the type of totalAmountPayable is string\", ()=>{",
											"    const { totalAmountPayable } = jsonData.creditPlan.mppRepresentativeExample;",
											"    pm.expect(typeof totalAmountPayable === \"string\").to.be.true;",
											"    pm.expect(totalAmountPayable.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response totalCreditAmount 'type' is string",
											"pm.test(\"Validate the type of totalCreditAmount is string\", ()=>{",
											"    const { totalCreditAmount } = jsonData.creditPlan.mppRepresentativeExample;",
											"    pm.expect(typeof totalCreditAmount === \"string\").to.be.true;",
											"    pm.expect(totalCreditAmount.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /getApplication endpoint response fixedInterestRate 'type' is string",
											"pm.test(\"Validate the type of fixedInterestRate is string\", ()=>{",
											"    pm.expect(typeof jsonData.creditPlan.mppRepresentativeExample.fixedInterestRate === \"string\").to.be.true;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-239-GetApplication-UnHappyPath-400-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Happypath - Verify /getApplication endpoint  response status code is 400",
											"pm.test('The status code for the /getApplication end point is 400', ()=>{",
											"    pm.expect(pm.response.code).to.eql(400);",
											"});",
											"",
											"// Add test to  assert error code & message",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_get_application = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"applicationId\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"customer\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"title\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"firstName\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"lastName\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"middleName\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"emailAddress\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"addresses\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"addressType\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"address\": {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                      \"line1\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"line2\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"line3\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"locality\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"province\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"postCode\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"country\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"countryISO\": {",
											"                        \"type\": \"string\"",
											"                      }",
											"                    },",
											"                    \"required\": [",
											"                      \"line1\",",
											"                      \"line2\",",
											"                      \"line3\",",
											"                      \"locality\",",
											"                      \"province\",",
											"                      \"postCode\",",
											"                      \"country\",",
											"                      \"countryISO\"",
											"                    ]",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"addressType\",",
											"                  \"address\"",
											"                ]",
											"              }",
											"            ]",
											"          }",
											"        },",
											"        \"required\": [",
											"          \"title\",",
											"          \"firstName\",",
											"          \"lastName\",",
											"          \"middleName\",",
											"          \"emailAddress\",",
											"          \"addresses\"",
											"        ]",
											"      },",
											"      \"creditPlan\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"planNumber\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"apr\": {",
											"            \"type\": \"number\"",
											"          },",
											"          \"periodDuration\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"minimumDuration\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"maximumDuration\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"basketValue\": {",
											"            \"type\": \"number\"",
											"          },",
											"          \"mppRepresentativeExample\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"              \"monthlyAmount\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"totalCreditCharge\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"totalAmountPayable\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"totalCreditAmount\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"fixedInterestRate\": {",
											"                \"type\": \"string\"",
											"              }",
											"            },",
											"            \"required\": [",
											"              \"monthlyAmount\",",
											"              \"totalCreditCharge\",",
											"              \"totalAmountPayable\",",
											"              \"totalCreditAmount\",",
											"              \"fixedInterestRate\"",
											"            ]",
											"          },",
											"          \"mppDetailedCalculation \": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              }",
											"            ]",
											"          }",
											"        },",
											"        \"required\": [",
											"          \"planNumber\",",
											"          \"apr\",",
											"          \"periodDuration\",",
											"          \"minimumDuration\",",
											"          \"maximumDuration\",",
											"          \"basketValue\",",
											"          \"mppRepresentativeExample\",",
											"          \"mppDetailedCalculation \"",
											"        ]",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"applicationId\",",
											"      \"customer\",",
											"      \"creditPlan\"",
											"    ]",
											"  }",
											"  pm.collectionVariables.set(\"schema_get_get_application\", response_schema_get_application);",
											"  ",
											"  // set expiry time",
											"  const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"  pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"  pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"  ",
											"  const env = { get: variable => pm.environment.get(variable) }",
											"  ",
											"  let createApplicationBody = JSON.stringify({",
											"    \"messageId\": \"OTHER_REQUEST\",",
											"    \"customer\": {",
											"      \"customerId\": env.get('customerId'),",
											"      \"title\": \"Mr\",",
											"      \"firstName\": env.get('firstName'),",
											"      \"lastName\": env.get('lastName'),",
											"      \"emailAddress\":  `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"      \"billingAddress\": {",
											"        \"houseNumber\": env.get(\"houseNumber1\"),",
											"        \"line1\": env.get(\"street1\"),",
											"        \"postCode\": env.get(\"postCode1\"),",
											"        \"town\": env.get(\"town1\"),",
											"        \"county\": env.get(\"county1\"),",
											"      }",
											"    },",
											"    \"basket\": {",
											"      \"financeAmount\": 320,",
											"      \"grossAmount\": 320,",
											"      \"discounts\": 0,",
											"      \"giftVouchers\": 0,",
											"      \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"      \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"      \"origin\": \"argos\",",
											"      \"ipAddress\": \"99.99.99.99\",",
											"      \"collectionStoreId\": \"12345\",",
											"      \"userAgent\": \"FrontendTesting/1.00\",",
											"      \"collectionStorePostCode\": \"BT14 6NE\",",
											"      \"fulfilmentChannel\": \"Collection\",",
											"      \"creditPlanId\": \"20010\",",
											"      \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"      \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"      \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"      {",
											"        \"quantity\": 1,",
											"        \"sku\": 1000,",
											"        \"unitPrice\": 300,",
											"        \"description\": \"Samsung TV\"",
											"      },",
											"      {",
											"        \"quantity\": 2,",
											"        \"sku\": 2313131323,",
											"        \"unitPrice\": 10,",
											"        \"description\": \"AA Batteries\"",
											"      }",
											"    ]",
											"  });",
											"  ",
											"  //getting values from env variables",
											"  const baseURL = pm.environment.get(\"dev3\");",
											"  const b2bPath = pm.environment.get(\"b2b\");",
											"  const sessionPath = pm.environment.get(\"getsession\");",
											"  const setupPath = pm.environment.get(\"setup\");",
											"  ",
											"  //building the request",
											"  const createApplicationRequest = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath, //building the url path",
											"    method: 'POST',",
											"    header: {",
											"      'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"      mode: 'raw',",
											"      raw: createApplicationBody",
											"    }",
											"  };",
											"  ",
											"  pm.sendRequest(createApplicationRequest, (err, res) => {",
											"      const body = res.json()",
											"      pm.environment.set(\"applicationId\", body.applicationId);",
											"  })",
											"  ",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}{{error400}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}{{error400}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-239-GetApplication-UnHappyPath-404-AppNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Happypath - Verify /getApplication endpoint  response status code is 404",
											"pm.test('The status code for the /getApplication end point is 404', ()=>{",
											"    pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"// Add test to  assert error code & message",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_get_application = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"applicationId\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"customer\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"title\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"firstName\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"lastName\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"middleName\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"emailAddress\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"addresses\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"addressType\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"address\": {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                      \"line1\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"line2\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"line3\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"locality\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"province\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"postCode\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"country\": {",
											"                        \"type\": \"string\"",
											"                      },",
											"                      \"countryISO\": {",
											"                        \"type\": \"string\"",
											"                      }",
											"                    },",
											"                    \"required\": [",
											"                      \"line1\",",
											"                      \"line2\",",
											"                      \"line3\",",
											"                      \"locality\",",
											"                      \"province\",",
											"                      \"postCode\",",
											"                      \"country\",",
											"                      \"countryISO\"",
											"                    ]",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"addressType\",",
											"                  \"address\"",
											"                ]",
											"              }",
											"            ]",
											"          }",
											"        },",
											"        \"required\": [",
											"          \"title\",",
											"          \"firstName\",",
											"          \"lastName\",",
											"          \"middleName\",",
											"          \"emailAddress\",",
											"          \"addresses\"",
											"        ]",
											"      },",
											"      \"creditPlan\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"planNumber\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"apr\": {",
											"            \"type\": \"number\"",
											"          },",
											"          \"periodDuration\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"minimumDuration\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"maximumDuration\": {",
											"            \"type\": \"integer\"",
											"          },",
											"          \"basketValue\": {",
											"            \"type\": \"number\"",
											"          },",
											"          \"mppRepresentativeExample\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"              \"monthlyAmount\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"totalCreditCharge\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"totalAmountPayable\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"totalCreditAmount\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"fixedInterestRate\": {",
											"                \"type\": \"string\"",
											"              }",
											"            },",
											"            \"required\": [",
											"              \"monthlyAmount\",",
											"              \"totalCreditCharge\",",
											"              \"totalAmountPayable\",",
											"              \"totalCreditAmount\",",
											"              \"fixedInterestRate\"",
											"            ]",
											"          },",
											"          \"mppDetailedCalculation \": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              },",
											"              {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"periodDuration\": {",
											"                    \"type\": \"integer\"",
											"                  },",
											"                  \"monthlyAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditCharge\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalAmountPayable\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"totalCreditAmount\": {",
											"                    \"type\": \"string\"",
											"                  },",
											"                  \"fixedInterestRate\": {",
											"                    \"type\": \"string\"",
											"                  }",
											"                },",
											"                \"required\": [",
											"                  \"periodDuration\",",
											"                  \"monthlyAmount\",",
											"                  \"totalCreditCharge\",",
											"                  \"totalAmountPayable\",",
											"                  \"totalCreditAmount\",",
											"                  \"fixedInterestRate\"",
											"                ]",
											"              }",
											"            ]",
											"          }",
											"        },",
											"        \"required\": [",
											"          \"planNumber\",",
											"          \"apr\",",
											"          \"periodDuration\",",
											"          \"minimumDuration\",",
											"          \"maximumDuration\",",
											"          \"basketValue\",",
											"          \"mppRepresentativeExample\",",
											"          \"mppDetailedCalculation \"",
											"        ]",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"applicationId\",",
											"      \"customer\",",
											"      \"creditPlan\"",
											"    ]",
											"  }",
											"  pm.collectionVariables.set(\"schema_get_get_application\", response_schema_get_application);",
											"  ",
											"  // set expiry time",
											"  const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"  pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"  pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"  ",
											"  const env = { get: variable => pm.environment.get(variable) }",
											"  ",
											"  let createApplicationBody = JSON.stringify({",
											"    \"messageId\": \"OTHER_REQUEST\",",
											"    \"customer\": {",
											"      \"customerId\": env.get('customerId'),",
											"      \"title\": \"Mr\",",
											"      \"firstName\": env.get('firstName'),",
											"      \"lastName\": env.get('lastName'),",
											"      \"emailAddress\":  `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"      \"billingAddress\": {",
											"        \"houseNumber\": env.get(\"houseNumber1\"),",
											"        \"line1\": env.get(\"street1\"),",
											"        \"postCode\": env.get(\"postCode1\"),",
											"        \"town\": env.get(\"town1\"),",
											"        \"county\": env.get(\"county1\"),",
											"      }",
											"    },",
											"    \"basket\": {",
											"      \"financeAmount\": 320,",
											"      \"grossAmount\": 320,",
											"      \"discounts\": 0,",
											"      \"giftVouchers\": 0,",
											"      \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"      \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"      \"origin\": \"argos\",",
											"      \"ipAddress\": \"99.99.99.99\",",
											"      \"collectionStoreId\": \"12345\",",
											"      \"userAgent\": \"FrontendTesting/1.00\",",
											"      \"collectionStorePostCode\": \"BT14 6NE\",",
											"      \"fulfilmentChannel\": \"Collection\",",
											"      \"creditPlanId\": \"20010\",",
											"      \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"      \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"      \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"      {",
											"        \"quantity\": 1,",
											"        \"sku\": 1000,",
											"        \"unitPrice\": 300,",
											"        \"description\": \"Samsung TV\"",
											"      },",
											"      {",
											"        \"quantity\": 2,",
											"        \"sku\": 2313131323,",
											"        \"unitPrice\": 10,",
											"        \"description\": \"AA Batteries\"",
											"      }",
											"    ]",
											"  });",
											"  ",
											"  //getting values from env variables",
											"  const baseURL = pm.environment.get(\"dev3\");",
											"  const b2bPath = pm.environment.get(\"b2b\");",
											"  const sessionPath = pm.environment.get(\"getsession\");",
											"  const setupPath = pm.environment.get(\"setup\");",
											"  ",
											"  //building the request",
											"  const createApplicationRequest = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath, //building the url path",
											"    method: 'POST',",
											"    header: {",
											"      'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"      mode: 'raw',",
											"      raw: createApplicationBody",
											"    }",
											"  };",
											"  ",
											"  pm.sendRequest(createApplicationRequest, (err, res) => {",
											"      const body = res.json()",
											"      pm.environment.set(\"applicationId\", body.applicationId);",
											"  })",
											"  ",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}{{error404}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}{{error404}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "VALIDATE_BANK_ACCOUNT",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "Validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/* BEGIN UTILITY FUNCTIONS */",
													"",
													"function _series (tasks, cb, currOperation = 0, results = []) {",
													"    if (currOperation === tasks.length) {",
													"        return cb(null, results);",
													"    }",
													"    if (typeof tasks[currOperation] !== 'function') {",
													"        return cb(new Error('asyncSeries: Please provide a function'));",
													"    }",
													"    tasks[currOperation]((err, res) => {",
													"        if (err) {",
													"            return cb(err);",
													"        }",
													"        results.push(res);",
													"        return _series(tasks, cb, currOperation + 1, results);",
													"    });",
													"}",
													"",
													"function asyncSeries (tasks, cb = () => {}) {",
													"    return _series(tasks, cb);",
													"}",
													"",
													"/* END UTILITY FUNITONS */",
													"",
													"",
													"/* PRE-REQUEST SETUP */",
													"",
													"// We need to get a session cookie from the getApplicaiton endpoint to run our tests",
													"// so before we do anything else, we Setup a dummy application and get it",
													"// PostMan automatically save the response cookie for us so we don't need to do any post processing",
													"",
													"// Get URL components",
													"const baseURL = pm.environment.get(\"dev3\");",
													"const b2bPath = pm.environment.get(\"b2b\");",
													"const b2cPath = pm.environment.get(\"b2c\");",
													"const sessionPath = pm.environment.get(\"getsession\");",
													"const setupPath = pm.environment.get(\"setup\");",
													"",
													"// Generate expiry time",
													"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
													"",
													"// Setup dummy application",
													"const setupRequestBody = {",
													"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
													"    \"customer\": {",
													"        \"customerId\": pm.environment.get('customerId'),",
													"        \"title\": \"Mr\",",
													"        \"firstName\": pm.environment.get('firstName'),",
													"        \"lastName\": pm.environment.get('lastName'),",
													"        \"emailAddress\":  `${this.firstName}.${this.lastName}@gmail.com`,",
													"        \"billingAddress\": {",
													"            \"houseNumber\": pm.environment.get(\"houseNumber1\"),",
													"            \"line1\": pm.environment.get(\"street1\"),",
													"            \"postCode\": pm.environment.get(\"postCode1\"),",
													"            \"town\": pm.environment.get(\"town1\"),",
													"            \"county\": pm.environment.get(\"county1\"),",
													"        }",
													"    },",
													"    \"basket\": {",
													"        \"financeAmount\": 320,",
													"        \"grossAmount\": 320,",
													"        \"discounts\": 0,",
													"        \"giftVouchers\": 0,",
													"        \"nectarPointsCurrencyValue\": 0",
													"    },",
													"    \"others\": {",
													"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
													"        \"origin\": \"argos\",",
													"        \"ipAddress\": \"99.99.99.99\",",
													"        \"collectionStoreId\": \"12345\",",
													"        \"userAgent\": \"FrontendTesting/1.00\",",
													"        \"collectionStorePostCode\": \"BT14 6NE\",",
													"        \"fulfilmentChannel\": \"Collection\",",
													"        \"creditPlanId\": \"20010\",",
													"        \"checkoutSessionExpiryTime\": expiryTime,",
													"        \"stockHoldExpiryTime\": expiryTime,",
													"        \"purchaseChannel\": \"Web\"",
													"    },",
													"    \"products\": [",
													"        {",
													"            \"quantity\": 1,",
													"            \"sku\": 1000,",
													"            \"unitPrice\": 300,",
													"            \"description\": \"Samsung TV\"",
													"        },",
													"        {",
													"            \"quantity\": 2,",
													"            \"sku\": 2313131323,",
													"            \"unitPrice\": 10,",
													"            \"description\": \"AA Batteries\"",
													"        }",
													"    ]",
													"};",
													"",
													"// Setup request config",
													"const setupConfig = {",
													"    url: baseURL + b2bPath + sessionPath + setupPath, //building the url path",
													"    method: 'POST',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify(setupRequestBody)",
													"    }",
													"};",
													"",
													"// Get dummy application and auth cookie",
													"asyncSeries([",
													"    // application setup",
													"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
													"        if (err) throw new Error(`/setup call failed`);",
													"",
													"        const { applicationId } = res.json();",
													"        pm.environment.set(\"applicationId\", applicationId);",
													"",
													"        //Now that we have the application ID, set up the config for the next request",
													"        getApplicationConfig = {",
													"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
													"            method: 'GET',",
													"            header: {",
													"                'Content-Type': 'application/json'",
													"            }",
													"        };",
													"",
													"        //Always call the callback to progess to the next request.",
													"        cb(err, res);",
													"    }),",
													"",
													"    // get application",
													"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
													"        if (err) throw new Error('get application call failed');",
													"    }),",
													"",
													"], (err, res) => console.info('All pre-requests completed', err, res));",
													"",
													"",
													"/* END PRE-REQUEST SETUP */",
													"",
													"",
													"/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */",
													"/*",
													"this is a 'neutral' template which will validate as-is, then we  ",
													"overwrite or delete fields in it based on what comes in the ",
													"iterationData",
													"*/",
													"const baseBody = {",
													"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
													"    \"sortCode\" : \"070116\",",
													"    \"accountNumber\": \"00003536\",",
													"    \"accountOpenedMonth\": 5,",
													"    \"accountOpenedYear\": 2001,",
													" }",
													"",
													"let reqBody = { ...baseBody };",
													"let fields = pm.iterationData.get('fields');",
													"if (fields) {",
													"    if (!Array.isArray(fields)) {",
													"        fields = [ fields ];",
													"    }",
													"    fields.forEach(f => {",
													"        if (f.value === undefined) {",
													"            delete reqBody[f.name];",
													"        } else {",
													"            reqBody[f.name] = f.value;",
													"        }",
													"    });",
													"}",
													"",
													"pm.environment.set('reqBody', JSON.stringify(reqBody));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.iterationData.get(\"testName\"), ()=> {",
													"    const expectedResponseCode = pm.iterationData.get(\"expectedResponseCode\");",
													"    if (expectedResponseCode) {",
													"        const actualResponseCode = pm.response.code;",
													"        pm.expect(actualResponseCode).to.eq(expectedResponseCode);",
													"    }",
													"    const expectedErrorName = pm.iterationData.get(\"expectedErrorName\");",
													"    if (expectedErrorName) {",
													"        actualErrorName = pm.response.json().name;",
													"        pm.expect(actualErrorName).to.eq(expectedErrorName);",
													"    }",
													"    const expectedErrorMessage = pm.iterationData.get(\"expectedErrorMessage\");",
													"    if (expectedErrorMessage) {",
													"        const { message: actualErrorMessage } = pm.response.json().errors[0];",
													"        pm.expect(actualErrorMessage).to.eq(expectedErrorMessage);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{reqBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{bankaccount_validate}}",
											"host": [
												"{{dev3}}{{b2c}}{{getsession}}"
											],
											"path": [
												"{{applicationId}}{{bankaccount_validate}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "FPP-988-validate-bankaccount-happypath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var response_schema_bankaccount_validate = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"      \"messageId\": {\r",
											"        \"type\": \"string\"\r",
											"      },\r",
											"      \"applicationId\": {\r",
											"        \"type\": \"string\"\r",
											"      },\r",
											"      \"validateBankAccountCode\": {\r",
											"        \"type\": \"string\"\r",
											"      }\r",
											"    },\r",
											"    \"required\": [\r",
											"      \"messageId\",\r",
											"      \"applicationId\",\r",
											"      \"validateBankAccountCode\"\r",
											"    ]\r",
											"  }\r",
											"  pm.collectionVariables.set(\"response_schema_post_bankaccount_validate\", response_schema_bankaccount_validate);\r",
											"  \r",
											"  // BEGIN UTIL FUNCTIONS\r",
											"  function _series (tasks, cb, currOperation = 0, results = []) {\r",
											"    if (currOperation === tasks.length) {\r",
											"        return cb(null, results);\r",
											"    }\r",
											"    if (typeof tasks[currOperation] !== 'function') {\r",
											"        return cb(new Error('asyncSeries: Please provide a function'));\r",
											"    }\r",
											"    tasks[currOperation]((err, res) => {\r",
											"        if (err) {\r",
											"            return cb(err);\r",
											"        }\r",
											"        results.push(res);\r",
											"        return _series(tasks, cb, currOperation + 1, results);\r",
											"    });\r",
											"  }\r",
											"  \r",
											"  function asyncSeries (tasks, cb = () => {}) {\r",
											"    return _series(tasks, cb);\r",
											"  }\r",
											"  // END UTIL FUNCTIONS\r",
											"  \r",
											"  const env = { get: variable => pm.environment.get(variable) }\r",
											"  \r",
											"  //getting values from env variables\r",
											"  const baseURL = pm.environment.get(\"dev3\");\r",
											"  const b2bPath = pm.environment.get(\"b2b\");\r",
											"  const b2cPath = pm.environment.get(\"b2c\");\r",
											"  const sessionPath = pm.environment.get(\"getsession\");\r",
											"  const setupPath = pm.environment.get(\"setup\");\r",
											"  \r",
											"  let getApplicationConfig;\r",
											"  \r",
											"  // set checkoutSessionExpiryTime & stockHoldExpiryTime\r",
											"  const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();\r",
											"  pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);\r",
											"  pm.environment.set(\"stockHoldExpiryTime\", expiryTime);\r",
											"  \r",
											"  // setup request body\r",
											"  const setupRequestBody = JSON.stringify({\r",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",\r",
											"    \"customer\": {\r",
											"          \"customerId\": env.get('customerId'),\r",
											"          \"title\": \"Mr\",\r",
											"          \"firstName\": env.get('firstName'),\r",
											"          \"lastName\": env.get('lastName'),\r",
											"          \"emailAddress\":  `${this.firstName}.${this.lastName}@gmail.com`,\r",
											"          \"billingAddress\": {\r",
											"            \"houseNumber\": env.get(\"houseNumber1\"),\r",
											"            \"line1\": env.get(\"street1\"),\r",
											"            \"postCode\": env.get(\"postCode1\"),\r",
											"            \"town\": env.get(\"town1\"),\r",
											"            \"county\": env.get(\"county1\"),\r",
											"          }\r",
											"      },\r",
											"    \"basket\": {\r",
											"      \"financeAmount\": 320,\r",
											"      \"grossAmount\": 320,\r",
											"      \"discounts\": 0,\r",
											"      \"giftVouchers\": 0,\r",
											"      \"nectarPointsCurrencyValue\": 0\r",
											"    },\r",
											"    \"others\": {\r",
											"      \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",\r",
											"      \"origin\": \"argos\",\r",
											"      \"ipAddress\": \"99.99.99.99\",\r",
											"      \"collectionStoreId\": \"12345\",\r",
											"      \"userAgent\": \"FrontendTesting/1.00\",\r",
											"      \"collectionStorePostCode\": \"BT14 6NE\",\r",
											"      \"fulfilmentChannel\": \"Collection\",\r",
											"      \"creditPlanId\": \"20010\",\r",
											"      \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),\r",
											"      \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),\r",
											"      \"purchaseChannel\": \"Web\"\r",
											"    },\r",
											"    \"products\": [\r",
											"      {\r",
											"        \"quantity\": 1,\r",
											"        \"sku\": 1000,\r",
											"        \"unitPrice\": 300,\r",
											"        \"description\": \"Samsung TV\"\r",
											"      },\r",
											"      {\r",
											"        \"quantity\": 2,\r",
											"        \"sku\": 2313131323,\r",
											"        \"unitPrice\": 10,\r",
											"        \"description\": \"AA Batteries\"\r",
											"      }\r",
											"    ]\r",
											"  });\r",
											"  \r",
											"  // setup request config\r",
											"  const setupConfig = {\r",
											"    url: baseURL + b2bPath + sessionPath + setupPath, //building the url path\r",
											"    \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"      'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"      mode: 'raw',\r",
											"      raw: setupRequestBody\r",
											"    }\r",
											"  };\r",
											"  \r",
											"  asyncSeries([\r",
											"      // application setup\r",
											"      (cb) => pm.sendRequest(setupConfig, (err, res) => {\r",
											"          if (err) throw new Error(`/setup call failed`);\r",
											"          const { applicationId } = res.json();\r",
											"          console.info(\"applicationId value: \", applicationId);\r",
											"          pm.environment.set(\"applicationId\", applicationId);\r",
											"  \r",
											"          //Now that we have the application ID, set up the config for the next request\r",
											"          getApplicationConfig = {\r",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),\r",
											"              method: 'GET',\r",
											"              header: {\r",
											"                  'Content-Type': 'application/json'\r",
											"              }\r",
											"          };\r",
											"  \r",
											"          //Always call the callback to progess to the next request.\r",
											"          cb(err, res);\r",
											"      }),\r",
											"  \r",
											"      // get application\r",
											"      (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {\r",
											"          if (err) throw new Error('get application call failed');\r",
											"          const { applicationId } = res.json();\r",
											"          console.info(\"applicationId = \" + applicationId);\r",
											"  \r",
											"      }),\r",
											"  \r",
											"  ], (err, res) => console.info('All pre-requests completed', err, res));\r",
											"  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var reqbody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Happypath - Verify /bankaccount validate endpoint  response status code is 200\r",
											"pm.test('The status code for the /create application end point is 200', ()=>{\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"// Happypath - Verify /bankaccount validate endpoint response contains 'messageid' label\r",
											"pm.test(\"Validate The response body should contain a messageid label\", ()=>{\r",
											"   pm.expect(jsonData).to.have.property('messageId');\r",
											"});\r",
											"\r",
											"// Happypath - Verify /bankaccount validate endpoint response messageid 'type' is string\r",
											"pm.test(\"Validate the type of messageid is string\", ()=>{\r",
											" pm.expect(typeof jsonData.messageId === \"string\").to.be.true;\r",
											"});\r",
											"\r",
											"// Happypath - Verify /bankaccount validate endpoint response 'body' contains same 'messageid'\r",
											"pm.test(\"Validate that the same messageid exists in the response body\", ()=>{\r",
											"   pm.expect(jsonData.messageId).to.eql(reqbody.messageId);\r",
											"});\r",
											"\r",
											"// Happypath - Verify /bankaccount validate endpoint response contains 'applicationId'\r",
											"pm.test(\"Validate the applicationId exists in the response body\", ()=>{\r",
											"pm.expect(jsonData).to.have.property('applicationId');\r",
											"});\r",
											"\r",
											"//Happypath - Verify /bankaccount validate endpoint response applicationId 'type' is string\r",
											"pm.test(\"Validate the type of applicationId is string\", ()=>{\r",
											"pm.expect(typeof jsonData.applicationId === \"string\").to.be.true;\r",
											"});\r",
											"\r",
											"// Happypath - Verify /bankaccount validate endpoint response contains 'validateBankAccountCode'\r",
											"pm.test(\"Validate the validateBankAccountCode exists in the response body\", ()=>{\r",
											"pm.expect(jsonData).to.have.property('validateBankAccountCode');\r",
											"});\r",
											"\r",
											"//Happypath - Verify /bankaccount validate endpoint response validateBankAccountCode 'type' is string\r",
											"pm.test(\"Validate the type of validateBankAccountCode is string\", ()=>{\r",
											"pm.expect(typeof jsonData.validateBankAccountCode === \"string\").to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"messageId\": \"{{messageId}}\",\r\n   \"sortCode\" : \"{{sortCode}}\",\r\n   \"accountNumber\": \"{{accountNumber}}\",\r\n   \"accountOpenedMonth\": {{accountOpenedMonth}},\r\n   \"accountOpenedYear\": {{accountOpenedYear}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{bankaccount_validate}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{bankaccount_validate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-988-validate-bank-account-validation-data-driven",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var response_schema_bankaccount_validate = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"      \"status\": {\r",
											"        \"type\": \"integer\"\r",
											"      },\r",
											"      \"name\": {\r",
											"        \"type\": \"string\"\r",
											"      },\r",
											"      \"path\": {\r",
											"        \"type\": \"string\"\r",
											"      },\r",
											"      \"errors\": {\r",
											"        \"type\": \"array\",\r",
											"        \"items\": [\r",
											"          {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"              \"code\": {\r",
											"                \"type\": \"string\"\r",
											"              },\r",
											"              \"message\": {\r",
											"                \"type\": \"string\"\r",
											"              }\r",
											"            },\r",
											"            \"required\": [\r",
											"              \"code\",\r",
											"              \"message\"\r",
											"            ]\r",
											"          }\r",
											"        ]\r",
											"      }\r",
											"    },\r",
											"    \"required\": [\r",
											"      \"status\",\r",
											"      \"name\",\r",
											"      \"path\",\r",
											"      \"errors\"\r",
											"    ]\r",
											"  }\r",
											"  \r",
											"  pm.collectionVariables.set(\"response_schema_post_bankaccount_validate\", response_schema_bankaccount_validate);\r",
											"  \r",
											"  // BEGIN UTIL FUNCTIONS\r",
											"  function _series (tasks, cb, currOperation = 0, results = []) {\r",
											"    if (currOperation === tasks.length) {\r",
											"        return cb(null, results);\r",
											"    }\r",
											"    if (typeof tasks[currOperation] !== 'function') {\r",
											"        return cb(new Error('asyncSeries: Please provide a function'));\r",
											"    }\r",
											"    tasks[currOperation]((err, res) => {\r",
											"        if (err) {\r",
											"            return cb(err);\r",
											"        }\r",
											"        results.push(res);\r",
											"        return _series(tasks, cb, currOperation + 1, results);\r",
											"    });\r",
											"  }\r",
											"  \r",
											"  function asyncSeries (tasks, cb = () => {}) {\r",
											"    return _series(tasks, cb);\r",
											"  }\r",
											"  // END UTIL FUNCTIONS\r",
											"  \r",
											"  const env = { get: variable => pm.environment.get(variable) }\r",
											"  \r",
											"  //getting values from env variables\r",
											"  const baseURL = pm.environment.get(\"dev3\");\r",
											"  const b2bPath = pm.environment.get(\"b2b\");\r",
											"  const b2cPath = pm.environment.get(\"b2c\");\r",
											"  const sessionPath = pm.environment.get(\"getsession\");\r",
											"  const setupPath = pm.environment.get(\"setup\");\r",
											"  \r",
											"  let getApplicationConfig;\r",
											"  \r",
											"  // set checkoutSessionExpiryTime & stockHoldExpiryTime\r",
											"  const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();\r",
											"  pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);\r",
											"  pm.environment.set(\"stockHoldExpiryTime\", expiryTime);\r",
											"  \r",
											"  // setup request body\r",
											"  const setupRequestBody = JSON.stringify({\r",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",\r",
											"    \"customer\": {\r",
											"          \"customerId\": env.get('customerId'),\r",
											"          \"title\": \"Mr\",\r",
											"          \"firstName\": env.get('firstName'),\r",
											"          \"lastName\": env.get('lastName'),\r",
											"          \"emailAddress\":  `${this.firstName}.${this.lastName}@gmail.com`,\r",
											"          \"billingAddress\": {\r",
											"            \"houseNumber\": env.get(\"houseNumber1\"),\r",
											"            \"line1\": env.get(\"street1\"),\r",
											"            \"postCode\": env.get(\"postCode1\"),\r",
											"            \"town\": env.get(\"town1\"),\r",
											"            \"county\": env.get(\"county1\"),\r",
											"          }\r",
											"      },\r",
											"    \"basket\": {\r",
											"      \"financeAmount\": 320,\r",
											"      \"grossAmount\": 320,\r",
											"      \"discounts\": 0,\r",
											"      \"giftVouchers\": 0,\r",
											"      \"nectarPointsCurrencyValue\": 0\r",
											"    },\r",
											"    \"others\": {\r",
											"      \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",\r",
											"      \"origin\": \"argos\",\r",
											"      \"ipAddress\": \"99.99.99.99\",\r",
											"      \"collectionStoreId\": \"12345\",\r",
											"      \"userAgent\": \"FrontendTesting/1.00\",\r",
											"      \"collectionStorePostCode\": \"BT14 6NE\",\r",
											"      \"fulfilmentChannel\": \"Collection\",\r",
											"      \"creditPlanId\": \"20010\",\r",
											"      \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),\r",
											"      \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),\r",
											"      \"purchaseChannel\": \"Web\"\r",
											"    },\r",
											"    \"products\": [\r",
											"      {\r",
											"        \"quantity\": 1,\r",
											"        \"sku\": 1000,\r",
											"        \"unitPrice\": 300,\r",
											"        \"description\": \"Samsung TV\"\r",
											"      },\r",
											"      {\r",
											"        \"quantity\": 2,\r",
											"        \"sku\": 2313131323,\r",
											"        \"unitPrice\": 10,\r",
											"        \"description\": \"AA Batteries\"\r",
											"      }\r",
											"    ]\r",
											"  });\r",
											"  \r",
											"  // setup request config\r",
											"  const setupConfig = {\r",
											"    url: baseURL + b2bPath + sessionPath + setupPath, //building the url path\r",
											"    \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"      'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"      mode: 'raw',\r",
											"      raw: setupRequestBody\r",
											"    }\r",
											"  };\r",
											"  \r",
											"  asyncSeries([\r",
											"      // application setup\r",
											"      (cb) => pm.sendRequest(setupConfig, (err, res) => {\r",
											"          if (err) throw new Error(`/setup call failed`);\r",
											"          const { applicationId } = res.json();\r",
											"          console.info(\"applicationId value: \", applicationId);\r",
											"          pm.environment.set(\"applicationId\", applicationId);\r",
											"  \r",
											"          //Now that we have the application ID, set up the config for the next request\r",
											"          getApplicationConfig = {\r",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),\r",
											"              method: 'GET',\r",
											"              header: {\r",
											"                  'Content-Type': 'application/json'\r",
											"              }\r",
											"          };\r",
											"  \r",
											"          //Always call the callback to progess to the next request.\r",
											"          cb(err, res);\r",
											"      }),\r",
											"  \r",
											"      // get application\r",
											"      (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {\r",
											"          if (err) throw new Error('get application call failed');\r",
											"          const { applicationId } = res.json();\r",
											"          console.info(\"applicationId = \" + applicationId);\r",
											"  \r",
											"      }),\r",
											"  \r",
											"  ], (err, res) => console.info('All pre-requests completed', err, res));\r",
											"  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Unhappypath - Verify 'validate bank account' request response status code is 400\r",
											"pm.test(\"Verify validate bank account application status code is 400\", ()=> {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Unhappypath - Verify 'validate bank account' request validation error message\r",
											"pm.test(`Verify ${pm.iterationData.get(\"scenario\")} error response`, ()=> {\r",
											"    const {code, message: actualErrorMessage } = pm.response.json().errors[0];\r",
											"    const expectedErrorMessage = pm.iterationData.get(\"errorMessage\");\r",
											"\r",
											"    console.info('actual error message is: ' + actualErrorMessage + '\\n' + 'expected error message is: ' + expectedErrorMessage);\r",
											"\r",
											"    pm.expect(actualErrorMessage).to.contain(expectedErrorMessage);\r",
											"    pm.expect(code).to.eq('BANK_ACCOUNT_REQUEST_INVALID');\r",
											"});\r",
											"\r",
											"// UnHappypath - Verify /bankaccount validate response not contains 'messageid' label\r",
											"pm.test(\"Validate The response body should not contain a messageid label\", ()=>{\r",
											"   pm.expect(jsonData).not.to.have.property('messageId');\r",
											"});\r",
											"\r",
											"// UnHappypath - Verify /bankaccount validate endpoint response not contains 'applicationId'\r",
											"pm.test(\"Validate the applicationId not exists in the response body\", ()=>{\r",
											"pm.expect(jsonData).not.to.have.property('applicationId');\r",
											"});\r",
											"\r",
											"// UnHappypath - Verify /bankaccount validate endpoint response not contains 'validateBankAccountCode'\r",
											"pm.test(\"Validate the validateBankAccountCode not exists in the response body\", ()=>{\r",
											"pm.expect(jsonData).not.to.have.property('validateBankAccountCode');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"messageId\": \"{{messageId}}\",\r\n   \"sortCode\" : \"{{sortCode}}\",\r\n   \"accountNumber\": \"{{accountNumber}}\",\r\n   \"accountOpenedMonth\": {{accountOpenedMonth}},\r\n   \"accountOpenedYear\": {{accountOpenedYear}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{bankaccount_validate}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{bankaccount_validate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-988-validate-bank-account-missing-auth-cookie-403-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Unhappypath - Verify error code 403 from validate bank account when auth cookie is missing\r",
											"pm.test(\"Validate bank account status code is 403\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"// Unhappypath - Verify response is empty when auth cookie is missing\r",
											"pm.test(\"Verify response is empty when auth cookie is missing\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"messageId\": \"{{messageId}}\",\r\n   \"sortCode\" : \"{{sortCode}}\",\r\n   \"accountNumber\": \"{{accountNumber}}\",\r\n   \"accountOpenedMonth\": {{accountOpenedMonth}},\r\n   \"accountOpenedYear\": {{accountOpenedYear}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{bankaccount_validate}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{bankaccount_validate}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CREATE_APPLICATION",
					"item": [
						{
							"name": "FPP-685-customer-under-18-years-UnhappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_create_application = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"httpStatus\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"code\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"code\",",
											"                        \"description\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"warnings\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"httpStatus\",",
											"        \"status\",",
											"        \"name\",",
											"        \"path\",",
											"        \"errors\",",
											"        \"warnings\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_create_application\", response_schema_create_application);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"",
											"// Create Date of Birth (Customer is 17 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (6205 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"    \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\":  `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\"),",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`)",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get Application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error(`/get application call failed`);",
											"",
											"        // set up validate bank account",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Unhappypath - Verify customer under 18 years cannot create successful application with response status code 400",
											"pm.test(\"Create application status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Unhappypath - Verify error description if customer under 18 years tries to create application",
											"pm.test(\"Validate response body contains error description\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"Applicant must be at least 18 years old and less than 83 years at the end of the loan term\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",\n    \"termsAndConditions\": [\n        {\n            \"tsAndCsType\": \"CreditSubjectToStatus\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"HowWeWillUseYourData\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"MarketingComms\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        }\n    ],\n    \"customer\": {\n        \"additionalNeeds\":\"0\",\n        \"emailAddress\": \"{{firstName}}.{{lastName}}@gmail.com\",\n        \"nationalityCode\": \"GB\",\n        \"numberOfDependents\": 1,\n        \"mobilePhoneNumber\": \"07558334222\",\n        \"monthlyMortgageRent\": 300,\n        \"dateOfBirth\": \"{{dateOfBirth}}\",\n        \"maritalStatusCode\": \"M\",\n        \"residentialStatusCode\": \"M\",\n        \"employment\": {\n            \"employerName\": \"n/a\",\n            \"employmentStatusCode\": \"EMP\",\n            \"occupationCode\": \"33\"\n        },\n        \"income\": {\n            \"yearlyIncomeBeforeTax\": 33000,\n            \"otherIncome\": 0\n        },\n        \"addresses\": [\n            {\n                \"addressType\": \"Current\",\n                \"startDate\": {\n                    \"month\": 2,\n                    \"year\": 2016\n                }\n            }\n        ]\n    },\n    \"creditPlan\": {\n        \"planNumber\": \"20010\",\n        \"periodDuration\": 12,\n        \"apr\": 1.0\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-685-customer-over-83-years-UnhappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_create_application = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"httpStatus\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"code\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"code\",",
											"                        \"description\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"warnings\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"httpStatus\",",
											"        \"status\",",
											"        \"name\",",
											"        \"path\",",
											"        \"errors\",",
											"        \"warnings\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_create_application\", response_schema_create_application);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"",
											"// Create Date of Birth (Customer is over 83 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (30569 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": \"123\",",
											"    \"title\": \"Mr\",",
											"    \"firstName\": \"Benjamin\",",
											"    \"lastName\": \"Shales\",",
											"    \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"    \"billingAddress\": {",
											"      \"houseNumber\": \"26\",",
											"      \"line1\": \"Moore Court\",",
											"      \"postCode\": \"HA0 4AF\",",
											"      \"town\": \"Wembley\",",
											"      \"county\": \"London\"",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`)",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get Application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error(`/get application call failed`);",
											"",
											"        // set up validate bank account",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Unhappypath - Verify customer over 83 years cannot create application with response status code 400",
											"pm.test(\"Create application status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Unhappypath - Verify error description if customer over 83 years tries to create application",
											"pm.test(\"Validate response body contains error description\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"Applicant must be at least 18 years old and less than 83 years at the end of the loan term\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",\n    \"termsAndConditions\": [\n        {\n            \"tsAndCsType\": \"CreditSubjectToStatus\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"HowWeWillUseYourData\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"MarketingComms\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        }\n    ],\n    \"customer\": {\n        \"additionalNeeds\":\"0\",\n        \"emailAddress\": \"{{firstName}}.{{lastName}}@gmail.com\",\n        \"nationalityCode\": \"GB\",\n        \"numberOfDependents\": 1,\n        \"mobilePhoneNumber\": \"07558334222\",\n        \"monthlyMortgageRent\": 300,\n        \"dateOfBirth\": \"{{dateOfBirth}}\",\n        \"maritalStatusCode\": \"M\",\n        \"residentialStatusCode\": \"M\",\n        \"employment\": {\n            \"employerName\": \"n/a\",\n            \"employmentStatusCode\": \"EMP\",\n            \"occupationCode\": \"33\"\n        },\n        \"income\": {\n            \"yearlyIncomeBeforeTax\": 33000,\n            \"otherIncome\": 0\n        },\n        \"addresses\": [\n            {\n                \"addressType\": \"Current\",\n                \"startDate\": {\n                    \"month\": 2,\n                    \"year\": 2016\n                }\n            }\n        ]\n    },\n    \"creditPlan\": {\n        \"planNumber\": \"20010\",\n        \"periodDuration\": 12,\n        \"apr\": 1.0\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-685-over-customer-83-years-at-term-end-UnhappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_create_application = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"httpStatus\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"code\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"code\",",
											"                        \"description\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"warnings\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"httpStatus\",",
											"        \"status\",",
											"        \"name\",",
											"        \"path\",",
											"        \"errors\",",
											"        \"warnings\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_create_application\", response_schema_create_application);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"",
											"// Create Date of Birth (Customer will be over 83 years old at the end of the loan term)",
											"const dateOfBirth = (new Date(new Date() - (29839 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": \"123\",",
											"    \"title\": \"Mr\",",
											"    \"firstName\": \"Benjamin\",",
											"    \"lastName\": \"Shales\",",
											"    \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"    \"billingAddress\": {",
											"      \"houseNumber\": \"26\",",
											"      \"line1\": \"Moore Court\",",
											"      \"postCode\": \"HA0 4AF\",",
											"      \"town\": \"Wembley\",",
											"      \"county\": \"London\"",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`)",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get Application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error(`/get application call failed`);",
											"",
											"        // set up validate bank account",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Unhappypath - Verify customer who will be over 83 at the end of the loan term ",
											"// cannot create application with response status code 400",
											"pm.test(\"Create application status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Unhappypath - Verify error description if customer over 83 years at the end of the loan term tries to create application",
											"pm.test(\"Validate response body contains error description\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"Applicant must be at least 18 years old and less than 83 years at the end of the loan term\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",\n    \"termsAndConditions\": [\n        {\n            \"tsAndCsType\": \"CreditSubjectToStatus\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"HowWeWillUseYourData\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"MarketingComms\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        }\n    ],\n    \"customer\": {\n        \"additionalNeeds\":\"0\",\n        \"emailAddress\": \"{{firstName}}.{{lastName}}@gmail.com\",\n        \"nationalityCode\": \"GB\",\n        \"numberOfDependents\": 1,\n        \"mobilePhoneNumber\": \"07558334222\",\n        \"monthlyMortgageRent\": 300,\n        \"dateOfBirth\": \"{{dateOfBirth}}\",\n        \"maritalStatusCode\": \"M\",\n        \"residentialStatusCode\": \"M\",\n        \"employment\": {\n            \"employerName\": \"n/a\",\n            \"employmentStatusCode\": \"EMP\",\n            \"occupationCode\": \"33\"\n        },\n        \"income\": {\n            \"yearlyIncomeBeforeTax\": 33000,\n            \"otherIncome\": 0\n        },\n        \"addresses\": [\n            {\n                \"addressType\": \"Current\",\n                \"startDate\": {\n                    \"month\": 2,\n                    \"year\": 2016\n                }\n            }\n        ]\n    },\n    \"creditPlan\": {\n        \"planNumber\": \"20010\",\n        \"periodDuration\": 48,\n        \"apr\": 1.0\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-685-customer-dob-1900-01-01-HappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_create_application = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"applicationId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"createApplicationResponse\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"messageId\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"applicationId\",",
											"        \"createApplicationResponse\",",
											"        \"messageId\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_create_application\", response_schema_create_application);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": \"123\",",
											"    \"title\": \"Mr\",",
											"    \"firstName\": \"Benjamin\",",
											"    \"lastName\": \"Shales\",",
											"    \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"    \"billingAddress\": {",
											"      \"houseNumber\": \"26\",",
											"      \"line1\": \"Moore Court\",",
											"      \"postCode\": \"HA0 4AF\",",
											"      \"town\": \"Wembley\",",
											"      \"county\": \"London\"",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`)",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        // set up get application",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get Application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error(`/get application call failed`);",
											"",
											"        // set up validate bank account",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Happypath - Verify customer with DOB 1900-01-01 can create successful application with response status code 200",
											"pm.test(\"Create application status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Happypath - Verify customer with DOB 1900-01-01 creates successful application",
											"pm.test(\"Validate response body contains error description\", function () {",
											"    const { createApplicationResponse, applicationId } = pm.response.json();",
											"    pm.expect(createApplicationResponse).to.eql(\"success\");",
											"    pm.expect(applicationId).to.be.a('string');",
											"    pm.expect(applicationId.length).to.be.at.least(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",\n    \"termsAndConditions\": [\n        {\n            \"tsAndCsType\": \"CreditSubjectToStatus\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"HowWeWillUseYourData\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"MarketingComms\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        }\n    ],\n    \"customer\": {\n        \"additionalNeeds\":\"0\",\n        \"emailAddress\": \"{{firstName}}.{{lastName}}@gmail.com\",\n        \"nationalityCode\": \"GB\",\n        \"numberOfDependents\": 1,\n        \"mobilePhoneNumber\": \"07558334222\",\n        \"monthlyMortgageRent\": 300,\n        \"dateOfBirth\": \"1900-01-01\",\n        \"maritalStatusCode\": \"M\",\n        \"residentialStatusCode\": \"M\",\n        \"employment\": {\n            \"employerName\": \"n/a\",\n            \"employmentStatusCode\": \"EMP\",\n            \"occupationCode\": \"33\"\n        },\n        \"income\": {\n            \"yearlyIncomeBeforeTax\": 33000,\n            \"otherIncome\": 0\n        },\n        \"addresses\": [\n            {\n                \"addressType\": \"Current\",\n                \"startDate\": {\n                    \"month\": 2,\n                    \"year\": 2016\n                }\n            }\n        ]\n    },\n    \"creditPlan\": {\n        \"planNumber\": \"20010\",\n        \"periodDuration\": 12,\n        \"apr\": 1.0\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-2809-create-application-missing-auth-cookie",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Unhappypath - Verify error code 403 from create application when auth cookie is missing",
											"pm.test(\"Create application status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Unhappypath - Verify response is empty when auth cookie is missing",
											"pm.test(\"Verify response is empty when auth cookie is missing\", function () {",
											"    pm.expect(pm.response.text()).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",\n    \"termsAndConditions\": [\n        {\n            \"tsAndCsType\": \"CreditSubjectToStatus\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"HowWeWillUseYourData\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"MarketingComms\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        }\n    ],\n    \"customer\": {\n        \"additionalNeeds\":\"0\",\n        \"emailAddress\": \"{{firstName}}.{{lastName}}@gmail.com\",\n        \"nationalityCode\": \"GB\",\n        \"numberOfDependents\": 1,\n        \"mobilePhoneNumber\": \"07558334222\",\n        \"monthlyMortgageRent\": 300,\n        \"dateOfBirth\": \"1900-01-01\",\n        \"maritalStatusCode\": \"M\",\n        \"residentialStatusCode\": \"M\",\n        \"employment\": {\n            \"employerName\": \"n/a\",\n            \"employmentStatusCode\": \"EMP\",\n            \"occupationCode\": \"33\"\n        },\n        \"income\": {\n            \"yearlyIncomeBeforeTax\": 33000,\n            \"otherIncome\": 0\n        },\n        \"addresses\": [\n            {\n                \"addressType\": \"Current\",\n                \"startDate\": {\n                    \"month\": 2,\n                    \"year\": 2016\n                }\n            }\n        ]\n    },\n    \"creditPlan\": {\n        \"planNumber\": \"20010\",\n        \"periodDuration\": 12,\n        \"apr\": 1.0\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-685-customer-omitted-dob-UnhappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_create_application = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"httpStatus\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"code\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"code\",",
											"                        \"description\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"warnings\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"httpStatus\",",
											"        \"status\",",
											"        \"name\",",
											"        \"path\",",
											"        \"errors\",",
											"        \"warnings\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_create_application\", response_schema_create_application);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": \"123\",",
											"    \"title\": \"Mr\",",
											"    \"firstName\": \"Benjamin\",",
											"    \"lastName\": \"Shales\",",
											"    \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"    \"billingAddress\": {",
											"      \"houseNumber\": \"26\",",
											"      \"line1\": \"Moore Court\",",
											"      \"postCode\": \"HA0 4AF\",",
											"      \"town\": \"Wembley\",",
											"      \"county\": \"London\"",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`)",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        // set up get application",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get Application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error(`/get application call failed`);",
											"",
											"        // set up validate bank account",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Unhappypath - Verify customer with no DOB set cannot create application with response status code 400",
											"pm.test(\"Create application status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Unhappypath - Verify error description if customer with missing DOB set tries to create application",
											"pm.test(\"Validate response body contains error description\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"\\\"customer.dateOfBirth\\\" is required\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",\n    \"termsAndConditions\": [\n        {\n            \"tsAndCsType\": \"CreditSubjectToStatus\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"HowWeWillUseYourData\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"MarketingComms\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        }\n    ],\n    \"customer\": {\n        \"additionalNeeds\":\"0\",\n        \"emailAddress\": \"{{firstName}}.{{lastName}}@gmail.com\",\n        \"nationalityCode\": \"GB\",\n        \"numberOfDependents\": 1,\n        \"mobilePhoneNumber\": \"07558334222\",\n        \"monthlyMortgageRent\": 300,\n        \"maritalStatusCode\": \"M\",\n        \"residentialStatusCode\": \"M\",\n        \"employment\": {\n            \"employerName\": \"n/a\",\n            \"employmentStatusCode\": \"EMP\",\n            \"occupationCode\": \"33\"\n        },\n        \"income\": {\n            \"yearlyIncomeBeforeTax\": 33000,\n            \"otherIncome\": 0\n        },\n        \"addresses\": [\n            {\n                \"addressType\": \"Current\",\n                \"startDate\": {\n                    \"month\": 2,\n                    \"year\": 2016\n                }\n            }\n        ]\n    },\n    \"creditPlan\": {\n        \"planNumber\": \"20010\",\n        \"periodDuration\": 12,\n        \"apr\": 1.0\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-503-create-application-validation-data-driven",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Array of request keys",
											"const requestKeys = [",
											"    'messageId',",
											"    'termsAndConditions',",
											"    'customer',",
											"    'creditPlan',",
											"];",
											"",
											"let body = {};",
											"",
											"",
											"// Assign values to request body",
											"for( let i in requestKeys){",
											"    const key = requestKeys[i];",
											"    const value = pm.iterationData.get(key);",
											"    if (value !== undefined) {",
											"        body[key] = value;",
											"    }",
											"}",
											"",
											"// update body with valid agreed dates",
											"for (let j=0; j<3; j++) {",
											"    // Get number of hours set in the termsAndConditions agreedDate value",
											"    const hours = body['termsAndConditions'][j]['agreedDateTime'];",
											"    body['termsAndConditions'][j]['agreedDateTime'] = new Date(Date.now() + (hours * 60 * 60 * 1000)).toISOString();",
											"}",
											"",
											"// Set in request",
											"pm.environment.set('req_body', JSON.stringify(body));",
											"",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": env.get('firstName') + \".\" + env.get('lastName') + \"@gmail.com\",",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\")",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : env.get(\"sortCode\"),",
											"   \"accountNumber\": env.get(\"accountNumber\"),",
											"   \"accountOpenedMonth\": env.get(\"accountOpenedMonth\"), ",
											"   \"accountOpenedYear\": env.get(\"accountOpenedYear\")",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`)",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        // set up get application",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get Application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error(`/get application call failed`);",
											"",
											"        // set up validate bank account",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const scenario = pm.iterationData.get(\"scenario\");",
											"const scenarioType = pm.iterationData.get(\"scenarioType\");",
											"",
											"const scenariosWithContainsAssertion = [",
											"    'invalid  email address format',",
											"    'terms and conditions is invalid'",
											"];",
											"",
											"if (scenarioType === \"invalid\") {",
											"",
											"",
											"    pm.test(\"Verify \" + scenario + \" error description\", () => {",
											"",
											"        try {",
											"            const { code, message: actualErrorMessage } = pm.response.json().errors[0];",
											"",
											"            const expectedErrorMessage = pm.iterationData.get(\"errorDescription\");",
											"",
											"            if (scenariosWithContainsAssertion.includes(scenario)) {",
											"                pm.expect(actualErrorMessage).to.contain(expectedErrorMessage);",
											"            } else {",
											"                pm.expect(actualErrorMessage).to.eql(expectedErrorMessage);",
											"            }",
											"",
											"            pm.expect(code).to.eq('CREATEAPPLICATION_REQUEST_INVALID');",
											"",
											"            console.info('actual error message is: ' + actualErrorMessage + '\\n\\n' + 'expected error message is: ' + expectedErrorMessage);",
											"",
											"        } catch (TypeError) {",
											"            console.error(`${scenario} - ${TypeError}`);",
											"            pm.expect.fail(`${scenario} failed as a result of ${TypeError}`);",
											"        }",
											"    });",
											"",
											"    // Unhappypath - Verify 'create application' request response status code is 400",
											"    pm.test(`Verify ${scenario} create application status code is 400`, () => {",
											"        pm.response.to.have.status(400);",
											"    });",
											"}",
											"",
											"if (scenarioType === \"valid\") {",
											"    pm.test(`Verify ${scenario} 200 status code`, () => {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(`Verify ${scenario} create application success response in body`, () => {",
											"        pm.expect(pm.response.json().createApplicationResponse).to.eq(\"success\")",
											"    })",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{req_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-503-application-does-not-exist-404-error-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_create_application = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"httpStatus\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"code\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"code\",",
											"                        \"description\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"warnings\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"httpStatus\",",
											"        \"status\",",
											"        \"name\",",
											"        \"path\",",
											"        \"errors\",",
											"        \"warnings\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_create_application\", response_schema_create_application);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"",
											"//set date of birth value",
											"const dateOfBirth = (new Date(new Date() - (9125 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"pm.environment.set('error404', '5ea3dfaa-5729-4fbc-998d-f8efc8be326a')",
											"",
											"// doing the getApplication call with the same applicationId value, we need the authentication cookie issued by the getApplication endpoint with the same appId value to get passed authentication",
											"",
											" const getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get('error404'),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"asyncSeries([",
											"    // get Application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error(`/get application call failed`);",
											"",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Unhappypath - Verify error code 404 from create application when application does not exist",
											"pm.test(\"Create application status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Unhappypath - Verify error description if application does not exist",
											"pm.test(\"Validate 'application does not exist' error description in response body\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"Application does not exist\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",\n    \"termsAndConditions\": [\n        {\n            \"tsAndCsType\": \"CreditSubjectToStatus\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"HowWeWillUseYourData\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"MarketingComms\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        }\n    ],\n    \"customer\": {\n        \"additionalNeeds\":\"0\",\n        \"emailAddress\": \"email@email.com\",\n        \"nationalityCode\": \"GB\",\n        \"numberOfDependents\": 1,\n        \"mobilePhoneNumber\": \"07558334222\",\n        \"monthlyMortgageRent\": 300,\n        \"dateOfBirth\": \"{{dateOfBirth}}\",\n        \"maritalStatusCode\": \"M\",\n        \"residentialStatusCode\": \"M\",\n        \"employment\": {\n            \"employerName\": \"n/a\",\n            \"employmentStatusCode\": \"EMP\",\n            \"occupationCode\": \"33\"\n        },\n        \"income\": {\n            \"yearlyIncomeBeforeTax\": 33000,\n            \"otherIncome\": 0\n        },\n        \"addresses\": [\n            {\n                \"addressType\": \"Current\",\n                \"startDate\": {\n                    \"month\": 2,\n                    \"year\": 2016\n                }\n            }\n        ]\n    },\n    \"creditPlan\": {\n        \"planNumber\": \"20010\",\n        \"periodDuration\": 12,\n        \"apr\": 1.0\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{error404}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{error404}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-503-invalid-application-state-403-error-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_create_application = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"httpStatus\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"code\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"code\",",
											"                        \"description\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"warnings\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"httpStatus\",",
											"        \"status\",",
											"        \"name\",",
											"        \"path\",",
											"        \"errors\",",
											"        \"warnings\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_create_application\", response_schema_create_application);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": \"123\",",
											"    \"title\": \"Mr\",",
											"    \"firstName\": \"Benjamin\",",
											"    \"lastName\": \"Shales\",",
											"    \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"    \"billingAddress\": {",
											"      \"houseNumber\": \"26\",",
											"      \"line1\": \"Moore Court\",",
											"      \"postCode\": \"HA0 4AF\",",
											"      \"town\": \"Wembley\",",
											"      \"county\": \"London\"",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`)",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        // set up get application",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get Application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error(`/get application call failed`);",
											"",
											"        // set up validate bank account",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set up create application",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application call",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('/applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Unhappypath - Verify error code 403 from create application when application state is invalid ",
											"pm.test(\"Create application status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Unhappypath - Verify error description if application state is invalid ",
											"pm.test(\"Validate 'invalid Application State' error description in response body\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"Invalid Application State\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",\n    \"termsAndConditions\": [\n        {\n            \"tsAndCsType\": \"CreditSubjectToStatus\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"HowWeWillUseYourData\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"MarketingComms\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        }\n    ],\n    \"customer\": {\n        \"additionalNeeds\":\"0\",\n        \"emailAddress\": \"{{firstName}}.{{lastName}}@gmail.com\",\n        \"nationalityCode\": \"GB\",\n        \"numberOfDependents\": 1,\n        \"mobilePhoneNumber\": \"07558334222\",\n        \"monthlyMortgageRent\": 300,\n        \"dateOfBirth\": \"{{dateOfBirth}}\",\n        \"maritalStatusCode\": \"M\",\n        \"residentialStatusCode\": \"M\",\n        \"employment\": {\n            \"employerName\": \"n/a\",\n            \"employmentStatusCode\": \"EMP\",\n            \"occupationCode\": \"33\"\n        },\n        \"income\": {\n            \"yearlyIncomeBeforeTax\": 33000,\n            \"otherIncome\": 0\n        },\n        \"addresses\": [\n            {\n                \"addressType\": \"Current\",\n                \"startDate\": {\n                    \"month\": 2,\n                    \"year\": 2016\n                }\n            }\n        ]\n    },\n    \"creditPlan\": {\n        \"planNumber\": \"20010\",\n        \"periodDuration\": 12,\n        \"apr\": 1.0\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-715-CreateApplication-HappyPath",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var reqbody = JSON.parse(pm.request.body.raw);",
											"",
											"// Happypath - Verify /create application endpoint  response status code is 200",
											"pm.test('The status code for the /create application end point is 200', ()=>{",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"// Happypath - Verify /create application endpoint response contains 'messageid' label",
											"pm.test(\"Validate The response body should contain a messageid label\", ()=>{",
											"   pm.expect(jsonData).to.have.property('messageId');",
											"});",
											"// Happypath - Verify /create application endpoint response messageid 'type' is string",
											"pm.test(\"Validate the type of messageid is string\", ()=>{",
											"    pm.expect(typeof jsonData.messageId === \"string\").to.be.true;",
											"});",
											"// Happypath - Verify /create application endpoint response 'body' contains same 'messageid' as request 'body'",
											"pm.test(\"Validate that the same messageid exists in the response body\", ()=>{",
											"    pm.expect(jsonData.messageId).to.eql(reqbody.messageId);",
											"});",
											"",
											"// Happypath - Verify /create application endpoint endpoint response contains 'applicationId'",
											"    pm.test(\"Validate the applicationId exists in the response body\", ()=>{",
											"pm.expect(jsonData).to.have.property('applicationId');",
											"});",
											"",
											"//Happypath - Verify /create application endpoint endpoint response applicationId 'type' is string",
											"pm.test(\"Validate the type of applicationId is string\", ()=>{",
											"    pm.expect(typeof jsonData.applicationId === \"string\").to.be.true;",
											"});",
											"",
											"// Happypath - Verify /create application endpoint response contains 'verificationToken'",
											"pm.test(\"Validate the nextstage exists in the response body\", ()=>{",
											"    pm.expect(jsonData).to.have.property('createApplicationResponse');",
											"});",
											"",
											"//Happypath - Verify /create application endpoint response verificationtoken 'type' is string",
											"pm.test(\"Validate the type of createApplicationResponse is string\", ()=>{",
											"    pm.expect(typeof jsonData.createApplicationResponse === \"string\").to.be.true;",
											"});",
											"",
											"//Happypath - Verify /create application endpoint response property 'loanApplicationReference'",
											"pm.test(\"Verify 'loanApplicationReference' property exists as a string of at least length 1\", ()=>{",
											"    pm.expect(typeof jsonData.loanApplicationReference === \"string\").to.be.true;",
											"    pm.expect(jsonData.loanApplicationReference.length).to.be.at.least(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_create_application = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"messageId\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"applicationId\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"createApplicationResponse\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"messageId\",",
											"      \"applicationId\",",
											"      \"createApplicationResponse\"",
											"    ]",
											"  }",
											"  pm.collectionVariables.set(\"schema_post_create_application\", response_schema_create_application);",
											"  ",
											"  const env = { get: variable => pm.environment.get(variable) }",
											"  ",
											"  // BEGIN UTIL FUNCTIONS",
											"  function _series (tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"  }",
											"  ",
											"  function asyncSeries (tasks, cb = () => {}) {",
											"    return _series(tasks, cb);",
											"  }",
											"  // END UTIL FUNCTIONS",
											"  ",
											"  // getting values from env variables",
											"  const baseURL = pm.environment.get(\"dev3\");",
											"  const b2bPath = pm.environment.get(\"b2b\");",
											"  const b2cPath = pm.environment.get(\"b2c\");",
											"  const sessionPath = pm.environment.get(\"getsession\");",
											"  const setupPath = pm.environment.get(\"setup\");",
											"  const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"  ",
											"  // set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"  const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"  pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"  pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"  ",
											"  // set agreedDateTime",
											"  const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"  pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"  ",
											"  // Create Date of Birth (Customer is 17 years old at the point of loan application)",
											"  const dateOfBirth = (new Date(new Date() - (7000 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"  pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"  console.info(\"dateOfBirth = \" + dateOfBirth);",
											"  ",
											"  // declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"  let getApplicationConfig;",
											"  let validateBankAccountConfig;",
											"  ",
											"  // setup request body",
											"  const setupRequestBody = JSON.stringify({",
											"    \"messageId\": \"OTHER_REQUEST\",",
											"    \"customer\": {",
											"      \"customerId\": \"123\",",
											"      \"title\": \"Mr\",",
											"      \"firstName\": \"Benjamin\",",
											"      \"lastName\": \"Shales\",",
											"      \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"      \"billingAddress\": {",
											"        \"houseNumber\": \"26\",",
											"        \"line1\": \"Moore Court\",",
											"        \"postCode\": \"HA0 4AF\",",
											"        \"town\": \"Wembley\",",
											"        \"county\": \"London\"",
											"      }",
											"    },",
											"    \"basket\": {",
											"      \"financeAmount\": 310.00, ",
											"      \"grossAmount\": 310.00, ",
											"      \"discounts\": 0.00, ",
											"      \"giftVouchers\": 0.00, ",
											"      \"nectarPointsCurrencyValue\": 0.00 ",
											"    },",
											"    \"others\": {",
											"      \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"      \"origin\": \"argos\", ",
											"      \"ipAddress\": \"99.99.99.99\",",
											"      \"collectionStoreId\": \"12345\", ",
											"      \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"      \"collectionStorePostCode\": \"BT14 6NE\", ",
											"      \"fulfilmentChannel\": \"Collection\", ",
											"      \"creditPlanId\": \"20010\", ",
											"      \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"      \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"      \"purchaseChannel\": \"Web\" ",
											"    },",
											"    \"products\": [",
											"      {",
											"        \"quantity\": 1,",
											"        \"sku\": 1000,",
											"        \"unitPrice\": 300.00,",
											"        \"description\": \"Samsung TV\"",
											"      },",
											"      {",
											"        \"quantity\": 2,",
											"        \"sku\": 2313131323,",
											"        \"unitPrice\": 10.00,",
											"        \"description\": \"AA Batteries\"",
											"      }",
											"    ]",
											"  });",
											"  ",
											"  // setup request config",
											"  const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,",
											"    method: 'POST',",
											"    header: {",
											"      'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"      mode: 'raw',",
											"      raw: setupRequestBody",
											"    }",
											"  };",
											"  ",
											"  // validate bank account request body",
											"  const validateBankAccountRequestBody = JSON.stringify({",
											"     \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"     \"sortCode\" : \"070116\",",
											"     \"accountNumber\": \"00003536\",",
											"     \"accountOpenedMonth\": 1, ",
											"     \"accountOpenedYear\": 2000",
											"  })",
											"  ",
											"  asyncSeries([",
											"      // application setup",
											"      (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"          if (err) throw new Error(`/setup call failed`)",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId = \" + applicationId);",
											"          pm.environment.set(\"applicationId\", applicationId);",
											"  ",
											"          // set up get application",
											"          getApplicationConfig = {",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
											"              method: 'GET',",
											"              header: {",
											"                  'Content-Type': 'application/json'",
											"              }",
											"          };",
											"  ",
											"          //Always call the callback to progess to the next request.",
											"          cb(err, res);",
											"      }),",
											"  ",
											"      // get Application",
											"      (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"          if (err) throw new Error(`/get application call failed`);",
											"  ",
											"          // set up validate bank account",
											"          validateBankAccountConfig = {",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"              method: 'POST',",
											"              header: {",
											"                  'Content-Type': 'application/json',",
											"              },",
											"              body: {",
											"                  mode: 'raw',",
											"                  raw: validateBankAccountRequestBody",
											"              }",
											"          }",
											"  ",
											"          //Always call the callback to progess to the next request.",
											"          cb(err, res);",
											"      }),",
											"  ",
											"      // validate bank account",
											"      (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"          if (err) throw new Error('/validate call failed');",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId = \" + applicationId);",
											"      })",
											"  ], (err, res) => console.info('All pre-requests completed', err, res));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",\n    \"termsAndConditions\": [\n        {\n            \"tsAndCsType\": \"CreditSubjectToStatus\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"HowWeWillUseYourData\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        },\n        {\n            \"tsAndCsType\": \"MarketingComms\",\n            \"agreed\": true,\n            \"agreedDateTime\": \"{{agreedDateTime}}\"\n        }\n    ],\n    \"customer\": {\n        \"additionalNeeds\":\"0\",\n        \"emailAddress\": \"{{firstName}}.{{lastName}}@gmail.com\",\n        \"nationalityCode\": \"GB\",\n        \"numberOfDependents\": 1,\n        \"mobilePhoneNumber\": \"07558334222\",\n        \"monthlyMortgageRent\": 300,\n        \"dateOfBirth\": \"{{dateOfBirth}}\",\n        \"maritalStatusCode\": \"M\",\n        \"residentialStatusCode\": \"M\",\n        \"employment\": {\n            \"employerName\": \"n/a\",\n            \"employmentStatusCode\": \"EMP\",\n            \"occupationCode\": \"33\"\n        },\n        \"income\": {\n            \"yearlyIncomeBeforeTax\": 33000,\n            \"otherIncome\": 0\n        },\n        \"addresses\": [\n            {\n                \"addressType\": \"Current\",\n                \"startDate\": {\n                    \"month\": 2,\n                    \"year\": 2016\n                }\n            },\n            {\n                \"addressType\": \"Previous\",\n                \"address\": {\n                    \"line1\": \"1\",\n                    \"line2\": \"Abbey Road\",\n                    \"line3\": \"Bee Corner\",\n                    \"town\": \"Holborn\",\n                    \"county\": \"London\",\n                    \"postCode\": \"A1 3AB\"\n                },\n                \"startDate\": {\n                    \"month\": 2,\n                    \"year\": 2010\n                }\n            }\n        ]\n    },\n    \"creditPlan\": {\n        \"planNumber\": \"20010\",\n        \"periodDuration\": 12,\n        \"apr\": 1.0\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CREATE_QUOTE",
					"item": [
						{
							"name": "FPP-241-create-quote-HappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_create_quote = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"applicationId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"loanQuote\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"aprRate\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"costPerMonth\": {",
											"                    \"type\": \"number\"",
											"                },",
											"                \"loanAmount\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"numberOfMonthlyPayments\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"offerAcceptanceLikelihood\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"totalInterest\": {",
											"                    \"type\": \"number\"",
											"                },",
											"                \"totalPayable\": {",
											"                    \"type\": \"number\"",
											"                }",
											"            },",
											"            \"required\": [",
											"                \"aprRate\",",
											"                \"costPerMonth\",",
											"                \"loanAmount\",",
											"                \"numberOfMonthlyPayments\",",
											"                \"offerAcceptanceLikelihood\",",
											"                \"totalInterest\",",
											"                \"totalPayable\"",
											"            ]",
											"        },",
											"        \"messageId\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"applicationId\",",
											"        \"loanQuote\",",
											"        \"messageId\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_create_quote\", response_schema_create_quote);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": \"123\",",
											"    \"title\": \"Mr\",",
											"    \"firstName\": \"Benjamin\",",
											"    \"lastName\": \"Shales\",",
											"    \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"    \"billingAddress\": {",
											"      \"houseNumber\": \"26\",",
											"      \"line1\": \"Moore Court\",",
											"      \"postCode\": \"HA0 4AF\",",
											"      \"town\": \"Wembley\",",
											"      \"county\": \"London\"",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var jsonData = pm.response.json();",
											"const {",
											"    loanAmount, ",
											"    aprRate, ",
											"    totalPayable, ",
											"    totalInterest, ",
											"    numberOfMonthlyPayments, ",
											"    costPerMonth, ",
											"    offerAcceptanceLikelihood ",
											"} = jsonData.loanQuote;",
											"",
											"// Happypath - Verify /quote request response status code is 200",
											"pm.test(\"Create quote status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has property messageid",
											"pm.test(\"Validate response body should have property 'messageid'\", ()=> {",
											"    const { messageId} = jsonData;",
											"    pm.expect(messageId).to.be.a('string');",
											"    pm.expect(messageId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has property applicationId",
											"pm.test(\"Validate response body should have property 'applicationId'\", ()=> {",
											"    const { applicationId} = jsonData;",
											"    pm.expect(applicationId).to.be.a('string');",
											"    pm.expect(applicationId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid loanAmount",
											"pm.test(\"Validate quote has valid 'loanAmount'\", ()=> {",
											"    pm.expect(loanAmount).to.be.a('number');",
											"    pm.expect(loanAmount > 0).to.be.true;",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid costPerMonth",
											"pm.test(\"Validate quote has valid 'costPerMonth'\", ()=> {",
											"    pm.expect(costPerMonth).to.be.a('number');",
											"    pm.expect(costPerMonth >= 0).to.be.true;",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid aprRate",
											"pm.test(\"Validate quote has valid 'aprRate'\", ()=> {",
											"    pm.expect(aprRate).to.be.a('number');",
											"    pm.expect(aprRate > 0).to.be.true;",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid numberOfMonthlyPayments",
											"pm.test(\"Validate quote has valid 'numberOfMonthlyPayments'\", ()=> {",
											"    pm.expect(numberOfMonthlyPayments).to.be.a('number');",
											"    pm.expect(numberOfMonthlyPayments > 0).to.be.true;",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid offerAcceptanceLikelihood",
											"pm.test(\"Validate quote has valid 'offerAcceptanceLikelihood'\", ()=> {",
											"    pm.expect(offerAcceptanceLikelihood).to.be.a('string');",
											"    pm.expect(offerAcceptanceLikelihood === '100').to.be.true;",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid totalInterest",
											"pm.test(\"Validate quote has valid 'totalInterest'\", ()=> {",
											"    pm.expect(totalInterest).to.be.a('number');",
											"    pm.expect(totalInterest >= 1).to.be.true;",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid totalPayable",
											"pm.test(\"Validate quote has valid 'totalPayable'\", ()=> {",
											"    pm.expect(totalPayable).to.be.a('number');",
											"    pm.expect(totalPayable > 0).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{quote}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{quote}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-241-zero-offer-acceptance-likelihood-UnHappyPath [MOCKED]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_create_quote = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"applicationId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"loanQuote\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"aprRate\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"costPerMonth\": {",
											"                    \"type\": \"number\"",
											"                },",
											"                \"loanAmount\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"numberOfMonthlyPayments\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"offerAcceptanceLikelihood\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"totalInterest\": {",
											"                    \"type\": \"number\"",
											"                },",
											"                \"totalPayable\": {",
											"                    \"type\": \"number\"",
											"                }",
											"            },",
											"            \"required\": [",
											"                \"aprRate\",",
											"                \"costPerMonth\",",
											"                \"loanAmount\",",
											"                \"numberOfMonthlyPayments\",",
											"                \"offerAcceptanceLikelihood\",",
											"                \"totalInterest\",",
											"                \"totalPayable\"",
											"            ]",
											"        },",
											"        \"messageId\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"applicationId\",",
											"        \"loanQuote\",",
											"        \"messageId\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_create_quote\", response_schema_create_quote);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"",
											"// Origins mocks variables",
											"const zeroOfferLikelihoodEmail = \"dm-execute-CD01@mock.com\";",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"// Use this to get stored environment variables",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": \"123\",",
											"    \"title\": \"Mr\",",
											"    \"firstName\": \"Benjamin\",",
											"    \"lastName\": \"Shales\",",
											"    \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"    \"billingAddress\": {",
											"      \"houseNumber\": \"26\",",
											"      \"line1\": \"Moore Court\",",
											"      \"postCode\": \"HA0 4AF\",",
											"      \"town\": \"Wembley\",",
											"      \"county\": \"London\"",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": zeroOfferLikelihoodEmail,",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// These will only run against the Origins mocks",
											"// =======================================================",
											"",
											"var jsonData = pm.response.json();",
											"const {",
											"    loanAmount, ",
											"    aprRate, ",
											"    totalPayable, ",
											"    totalInterest, ",
											"    numberOfMonthlyPayments, ",
											"    costPerMonth, ",
											"    offerAcceptanceLikelihood ",
											"} = jsonData.loanQuote;",
											"",
											"// Happypath - Verify /quote request response status code is 200",
											"pm.test(\"Create quote status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has property messageid",
											"pm.test(\"Validate response body should have property 'messageid'\", ()=> {",
											"    const { messageId} = jsonData;",
											"    pm.expect(messageId).to.be.a('string');",
											"    pm.expect(messageId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has property applicationId",
											"pm.test(\"Validate response body should have property 'applicationId'\", ()=> {",
											"    const { applicationId} = jsonData;",
											"    pm.expect(applicationId).to.be.a('string');",
											"    pm.expect(applicationId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid loanAmount",
											"pm.test(\"Validate quote has valid 'loanAmount'\", ()=> {",
											"    pm.expect(loanAmount).to.be.a('number');",
											"    pm.expect(loanAmount === 0).to.be.true;",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid costPerMonth",
											"pm.test(\"Validate quote has valid 'costPerMonth'\", ()=> {",
											"    pm.expect(costPerMonth).to.be.a('number');",
											"    pm.expect(costPerMonth === 0).to.be.true;",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid aprRate",
											"pm.test(\"Validate quote has valid 'aprRate'\", ()=> {",
											"    pm.expect(aprRate).to.be.a('number');",
											"    pm.expect(aprRate === 0).to.be.true;",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid numberOfMonthlyPayments",
											"pm.test(\"Validate quote has valid 'numberOfMonthlyPayments'\", ()=> {",
											"    pm.expect(numberOfMonthlyPayments).to.be.a('number');",
											"    pm.expect(numberOfMonthlyPayments === 0).to.be.true;",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid offerAcceptanceLikelihood",
											"pm.test(\"Validate quote has valid 'offerAcceptanceLikelihood'\", ()=> {",
											"    pm.expect(offerAcceptanceLikelihood).to.be.a('string');",
											"    pm.expect(offerAcceptanceLikelihood === '0').to.be.true;",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid totalInterest",
											"pm.test(\"Validate quote has valid 'totalInterest'\", ()=> {",
											"    pm.expect(totalInterest).to.be.a('number');",
											"    pm.expect(totalInterest === 0).to.be.true;",
											"});",
											"",
											"// Happypath - Verify /quote endpoint response has valid totalPayable",
											"pm.test(\"Validate quote has valid 'totalPayable'\", ()=> {",
											"    pm.expect(totalPayable).to.be.a('number');",
											"    pm.expect(totalPayable === 0).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{quote}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{quote}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-241-application-does-not-exist-404-error-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_create_quote = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"httpStatus\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"code\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"code\",",
											"                        \"description\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"warnings\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"httpStatus\",",
											"        \"status\",",
											"        \"name\",",
											"        \"path\",",
											"        \"errors\",",
											"        \"warnings\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_create_quote\", response_schema_create_quote);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"",
											"pm.environment.set('error404', '5ea3dfaa-5729-4fbc-998d-f8efc8be326a')",
											"",
											"// doing the getApplication call with the same applicationId value, we need the authentication cookie issued by the getApplication endpoint with the same appId value to get passed authentication",
											"",
											"const getApplicationConfig = {",
											"    url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"error404\"),",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json'",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Unhappypath - Verify error code 404 from create quote when application does not exist",
											"pm.test(\"Create quote status code is 404\", ()=> {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Unhappypath - Verify error description if application does not exist",
											"pm.test(\"Validate 'application does not exist' error description in response body\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"Application record does not exist\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{error404}}{{quote}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{error404}}{{quote}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-241-invalid-application-state-403-error-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_create_quote = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"httpStatus\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"code\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"code\",",
											"                        \"description\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"warnings\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"httpStatus\",",
											"        \"status\",",
											"        \"name\",",
											"        \"path\",",
											"        \"errors\",",
											"        \"warnings\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_create_quote\", response_schema_create_quote);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteRequestConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": \"123\",",
											"    \"title\": \"Mr\",",
											"    \"firstName\": \"Benjamin\",",
											"    \"lastName\": \"Shales\",",
											"    \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"    \"billingAddress\": {",
											"      \"houseNumber\": \"26\",",
											"      \"line1\": \"Moore Court\",",
											"      \"postCode\": \"HA0 4AF\",",
											"      \"town\": \"Wembley\",",
											"      \"county\": \"London\"",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"const createQuoteRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"asyncSeries([",
											"    // application setup call",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createQuoteRequestConfig",
											"        createQuoteRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createQuoteRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Unhappypath - Verify error code 403 from create quote when application state is invalid",
											"pm.test(\"Create quote status code is 403\", ()=> {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Unhappypath - Verify error description if application does not exist",
											"pm.test(\"Validate 'invalid Application State' error description in response body'\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"Invalid Application State\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{quote}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{quote}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-2810-create-quote-missing-auth-cookie",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set expiry time",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\"),",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 320,",
											"    \"grossAmount\": 320,",
											"    \"discounts\": 0,",
											"    \"giftVouchers\": 0,",
											"    \"nectarPointsCurrencyValue\": 0",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\",",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\",",
											"    \"userAgent\": \"FrontendTesting/1.00\",",
											"    \"collectionStorePostCode\": \"BT14 6NE\",",
											"    \"fulfilmentChannel\": \"Collection\",",
											"    \"creditPlanId\": \"20010\",",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\"",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"//getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"",
											"// setup request config",
											"const setupRequestConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"pm.sendRequest(setupRequestConfig, (err, res) => {",
											"  if (err) throw new Error('/setup call failed');",
											"  pm.environment.set(\"applicationId\", res.json().applicationId);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Unhappypath - Verify error code 403 from create quote when auth cookie is missing",
											"pm.test(\"Create application status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Unhappypath - Verify response is empty when auth cookie is missing",
											"pm.test(\"Verify response is empty when auth cookie is missing\", function () {",
											"    pm.expect(pm.response.text()).to.be.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{quote}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{quote}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-2607-create-quote-validation-data-driven",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"/* BEGIN UTILITY FUNCTIONS */",
											"",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"    return _series(tasks, cb);",
											"}",
											"",
											"/* END UTILITY FUNITONS */",
											"",
											"",
											"",
											"/* PRE-REQUEST SETUP */",
											"",
											"// We need to get a session cookie from the getApplicaiton endpoint to run our tests",
											"// so before we do anything else, we Setup a dummy application and get it",
											"// PostMan automatically save the response cookie for us so we don't need to do any post processing",
											"",
											"// Get URL components",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"",
											"// Generate expiry time",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"",
											"// Setup dummy application",
											"const setupRequestBody = {",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"customer\": {",
											"        \"customerId\": pm.environment.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": pm.environment.get('firstName'),",
											"        \"lastName\": pm.environment.get('lastName'),",
											"        \"emailAddress\":  `${this.firstName}.${this.lastName}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": pm.environment.get(\"houseNumber1\"),",
											"            \"line1\": pm.environment.get(\"street1\"),",
											"            \"postCode\": pm.environment.get(\"postCode1\"),",
											"            \"town\": pm.environment.get(\"town1\"),",
											"            \"county\": pm.environment.get(\"county1\"),",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 320,",
											"        \"grossAmount\": 320,",
											"        \"discounts\": 0,",
											"        \"giftVouchers\": 0,",
											"        \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"FrontendTesting/1.00\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": expiryTime,",
											"        \"stockHoldExpiryTime\": expiryTime,",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"};",
											"",
											"// Setup request config",
											"const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath, //building the url path",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(setupRequestBody)",
											"    }",
											"};",
											"",
											"// Get dummy application and auth cookie",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"",
											"        const { applicationId } = res.json();",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"        ",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"        ",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"    ",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"    }),",
											"    ",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											"",
											"/* END PRE-REQUEST SETUP */",
											"",
											"",
											"",
											"// Now we can build the request body for our tests using the test iteration data file",
											"",
											"// Array of request keys",
											"const requestKeys = [",
											"    'messageId',",
											"];",
											"",
											"const body = {};",
											"",
											"// Assign values to request body",
											"for( let i in requestKeys){",
											"    const key = requestKeys[i];",
											"    const value = pm.iterationData.get(key);",
											"    if (value !== undefined) {",
											"        body[key] = value;",
											"    }",
											"}",
											"",
											"// Set in request",
											"pm.environment.set('req_body', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(pm.iterationData.get(\"testName\"), ()=> {",
											"    console.info(pm.response.json());",
											"",
											"    const expectedErrorMessage = pm.iterationData.get(\"expectedErrorMessage\");",
											"    const { message: actualErrorMessage } = pm.response.json().errors[0];",
											"    pm.expect(actualErrorMessage).to.eq(expectedErrorMessage);",
											"",
											"    const expectedErrorName = pm.iterationData.get(\"expectedErrorName\");",
											"    const actualErrorName = pm.response.json().name;",
											"    pm.expect(actualErrorName).to.eq(expectedErrorName);",
											"    ",
											"    const expectedResponseCode = pm.iterationData.get(\"expectedResponseCode\");",
											"    const actualResponseCode = pm.response.code;",
											"    pm.expect(actualResponseCode).to.eq(expectedResponseCode);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{req_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{quote}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{quote}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "APPLY",
					"item": [
						{
							"name": "FPP-242-apply-HappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_apply = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"applicationId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"messageId\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"applicationId\",",
											"        \"messageId\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_apply\", response_schema_apply);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// set uuid",
											"const uuid = require('uuid');",
											"pm.environment.set('messageId', uuid.v4())",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"customer\": {",
											"        \"customerId\": \"123\",",
											"        \"title\": \"Mr\",",
											"        \"firstName\": \"Benjamin\",",
											"        \"lastName\": \"Shales\",",
											"        \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"        \"billingAddress\": {",
											"            \"houseNumber\": \"26\",",
											"            \"line1\": \"Moore Court\",",
											"            \"postCode\": \"HA0 4AF\",",
											"            \"town\": \"Wembley\",",
											"            \"county\": \"London\"",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 310.00,",
											"        \"grossAmount\": 310.00,",
											"        \"discounts\": 0.00,",
											"        \"giftVouchers\": 0.00,",
											"        \"nectarPointsCurrencyValue\": 0.00",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300.00,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10.00,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: setupRequestBody",
											"    }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"sortCode\": \"070116\",",
											"    \"accountNumber\": \"00003536\",",
											"    \"accountOpenedMonth\": 1,",
											"    \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\": \"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId')",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createQuoteRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const { applicationId, messageId: receivedMessageId } = pm.response.json();",
											"const { messageId: sentMessageId } = JSON.parse(request.data);",
											"",
											"// Happypath - Verify /apply request response status code is 200",
											"pm.test(\"Create quote status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Happypath - Verify /apply endpoint response messageid is same as in request",
											"pm.test(\"Validate response body should have property 'messageid'\", ()=> {",
											"    pm.expect(sentMessageId).to.eq(receivedMessageId);",
											"});",
											"",
											"// Happypath - Verify /apply endpoint response has property applicationId",
											"pm.test(\"Validate response body should have property 'applicationId'\", ()=> {",
											"    pm.expect(applicationId).to.be.a('string');",
											"    pm.expect(applicationId.length).to.be.at.least(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"{{messageId}}\",\n    \"deviceRiskBlackBox\": \"{{deviceRiskBlackBox}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{apply}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{apply}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-242-apply-missing-auth-cookie-403-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Unhappypath - Verify error code 403 from /apply when auth cookie is missing",
											"pm.test(\"/apply status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Unhappypath - Verify response is empty when auth cookie is missing",
											"pm.test(\"Verify response is empty when auth cookie is missing\", function () {",
											"    pm.expect(pm.response.text()).to.be.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",\n    \"deviceRiskBlackBox\": \"{{deviceRiskBlackBox}}\",\n    \"ipAddress\": \"99.99.99.99\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{apply}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{apply}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-242-application-does-not-exist-404-error-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_apply = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"httpStatus\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"status\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"path\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"errors\": {",
											"        \"type\": \"array\",",
											"        \"items\": [",
											"          {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"              \"code\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"description\": {",
											"                \"type\": \"string\"",
											"              }",
											"            },",
											"            \"required\": [",
											"              \"code\",",
											"              \"description\"",
											"            ]",
											"          }",
											"        ]",
											"      },",
											"      \"warnings\": {",
											"        \"type\": \"array\",",
											"        \"items\": {}",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"httpStatus\",",
											"      \"status\",",
											"      \"name\",",
											"      \"path\",",
											"      \"errors\",",
											"      \"warnings\"",
											"    ]",
											"  }",
											"  ",
											"  pm.collectionVariables.set(\"schema_post_apply\", response_schema_apply);",
											"  ",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"",
											"pm.environment.set('erroer404', '5ea3dfaa-5729-4fbc-998d-f8efc8be326a')",
											"",
											"// doing the getApplication call with the same applicationId value, we need the authentication cookie issued by the getApplication endpoint with the same appId value to get passed authentication",
											"",
											"const getApplicationConfig = {",
											"    url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"error404\"),",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json'",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Unhappypath - Verify error code 404 from /apply endpoint when application does not exist",
											"pm.test(\"/apply endpoint status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Unhappypath - Verify error description if application does not exist",
											"pm.test(\"Validate 'application does not exist' error description in response body\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"Application does not exist\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",\n    \"deviceRiskBlackBox\": \"{{deviceRiskBlackBox}}\",\n    \"ipAddress\": \"99.99.99.99\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{error404}}{{apply}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{error404}}{{apply}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-2608-apply-validation-data-driven",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_apply = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"httpStatus\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"code\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"code\",",
											"                        \"description\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"warnings\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"httpStatus\",",
											"        \"status\",",
											"        \"name\",",
											"        \"path\",",
											"        \"errors\",",
											"        \"warnings\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_apply\", response_schema_apply);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"customer\": {",
											"        \"customerId\": \"123\",",
											"        \"title\": \"Mr\",",
											"        \"firstName\": \"Louise\",",
											"        \"lastName\": \"Snell\",",
											"        \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"        \"billingAddress\": {",
											"            \"houseNumber\": \"26\",",
											"            \"line1\": \"Woodnesborough Road\",",
											"            \"postCode\": \"CT13 0AB\",",
											"            \"town\": \"Sandwich\",",
											"            \"county\": \"Kent\"",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 310.00,",
											"        \"grossAmount\": 310.00,",
											"        \"discounts\": 0.00,",
											"        \"giftVouchers\": 0.00,",
											"        \"nectarPointsCurrencyValue\": 0.00",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": \"2021-10-11T00:00:00.000Z\",",
											"        \"stockHoldExpiryTime\": \"2021-10-11T00:00:00.000Z\",",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300.00,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10.00,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: setupRequestBody",
											"    }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"sortCode\": \"070116\",",
											"    \"accountNumber\": \"00003536\",",
											"    \"accountOpenedMonth\": 1,",
											"    \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createQuoteRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											"// Array of request keys",
											"const requestKeys = [",
											"    'messageId',",
											"    'deviceRiskBlackBox',",
											"    'ipAddress'",
											"];",
											"",
											"const body = {};",
											"",
											"",
											"// Assign values to request body",
											"for( let i in requestKeys){",
											"    const key = requestKeys[i];",
											"    const value = pm.iterationData.get(key);",
											"    if (value !== undefined) {",
											"        body[key] = value;",
											"    }",
											"}",
											"",
											"// Set in request",
											"pm.environment.set('req_body', JSON.stringify(body));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const scenario = pm.iterationData.get(\"scenario\");",
											"const scenariosWithContainsAssertion = [",
											"    'messageId contains special char'",
											"];",
											"const { code, message: actualErrorMessage } = pm.response.json().errors[0];",
											"",
											"// Unhappypath - Verify '/apply' request response status code is 400",
											"pm.test(\"Verify /apply endpoint status code is 400\", ()=> {",
											"    pm.response.to.have.status(pm.iterationData.get(\"statusCode\"));",
											"});",
											"",
											"// Unhappypath - Verify '/apply' request parameters 'required error object'",
											"pm.test(`Verify '${scenario}' error object`, ()=> {",
											"    const expectedErrorMessage = pm.iterationData.get(\"errorDescription\");",
											"",
											"    console.info('actual error message is: ' + actualErrorMessage + '\\n\\n' + 'expected error message is: ' + expectedErrorMessage);",
											"",
											"    pm.expect(code).to.eq(pm.iterationData.get(\"code\"));",
											"",
											"    if ( scenariosWithContainsAssertion.includes(scenario)) {",
											"        pm.expect(actualErrorMessage).to.contain(expectedErrorMessage);",
											"    } else {",
											"        pm.expect(actualErrorMessage).to.eql(expectedErrorMessage);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{req_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{apply}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{apply}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-242-invalid-application-state-403-error-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_apply = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"httpStatus\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"status\": {",
											"        \"type\": \"integer\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"path\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"errors\": {",
											"        \"type\": \"array\",",
											"        \"items\": [",
											"          {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"              \"code\": {",
											"                \"type\": \"string\"",
											"              },",
											"              \"description\": {",
											"                \"type\": \"string\"",
											"              }",
											"            },",
											"            \"required\": [",
											"              \"code\",",
											"              \"description\"",
											"            ]",
											"          }",
											"        ]",
											"      },",
											"      \"warnings\": {",
											"        \"type\": \"array\",",
											"        \"items\": {}",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"httpStatus\",",
											"      \"status\",",
											"      \"name\",",
											"      \"path\",",
											"      \"errors\",",
											"      \"warnings\"",
											"    ]",
											"  }",
											"  ",
											"  pm.collectionVariables.set(\"schema_post_apply\", response_schema_apply);",
											"  ",
											"  // BEGIN UTIL FUNCTIONS",
											"  function _series (tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"  }",
											"  ",
											"  function asyncSeries (tasks, cb = () => {}) {",
											"    return _series(tasks, cb);",
											"  }",
											"  // END UTIL FUNCTIONS",
											"  ",
											"  // getting values from env variables",
											"  const baseURL = pm.environment.get(\"dev3\");",
											"  const b2bPath = pm.environment.get(\"b2b\");",
											"  const b2cPath = pm.environment.get(\"b2c\");",
											"  const sessionPath = pm.environment.get(\"getsession\");",
											"  const setupPath = pm.environment.get(\"setup\");",
											"  const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"  const quotePath = pm.environment.get(\"quote\");",
											"  const applyPath = pm.environment.get(\"apply\");",
											"  ",
											"  // declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"  let getApplicationConfig;",
											"  let validateBankAccountConfig;",
											"  let createApplicationRequestConfig;",
											"  let createQuoteConfig;",
											"  let applyConfig;",
											"  ",
											"  // Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"  const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"  pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"  console.info(\"dateOfBirth = \" + dateOfBirth);",
											"  ",
											"  const env = { get: variable => pm.environment.get(variable) }",
											"  ",
											"  // set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"  const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"  pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"  pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"  ",
											"  // set agreedDateTime",
											"  const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"  pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"  ",
											"  // setup request body",
											"  const setupRequestBody = JSON.stringify({",
											"    \"messageId\": \"OTHER_REQUEST\",",
											"    \"customer\": {",
											"      \"customerId\": \"123\",",
											"      \"title\": \"Mr\",",
											"      \"firstName\": \"Benjamin\",",
											"      \"lastName\": \"Shales\",",
											"      \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"      \"billingAddress\": {",
											"        \"houseNumber\": \"26\",",
											"        \"line1\": \"Moore Court\",",
											"        \"postCode\": \"HA0 4AF\",",
											"        \"town\": \"Wembley\",",
											"        \"county\": \"London\"",
											"      }",
											"    },",
											"    \"basket\": {",
											"      \"financeAmount\": 310.00, ",
											"      \"grossAmount\": 310.00, ",
											"      \"discounts\": 0.00, ",
											"      \"giftVouchers\": 0.00, ",
											"      \"nectarPointsCurrencyValue\": 0.00 ",
											"    },",
											"    \"others\": {",
											"      \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"      \"origin\": \"argos\", ",
											"      \"ipAddress\": \"99.99.99.99\",",
											"      \"collectionStoreId\": \"12345\", ",
											"      \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"      \"collectionStorePostCode\": \"BT14 6NE\", ",
											"      \"fulfilmentChannel\": \"Collection\", ",
											"      \"creditPlanId\": \"20010\", ",
											"      \"checkoutSessionExpiryTime\": \"2021-10-11T00:00:00.000Z\", ",
											"      \"stockHoldExpiryTime\": \"2021-10-11T00:00:00.000Z\", ",
											"      \"purchaseChannel\": \"Web\" ",
											"    },",
											"    \"products\": [",
											"      {",
											"        \"quantity\": 1,",
											"        \"sku\": 1000,",
											"        \"unitPrice\": 300.00,",
											"        \"description\": \"Samsung TV\"",
											"      },",
											"      {",
											"        \"quantity\": 2,",
											"        \"sku\": 2313131323,",
											"        \"unitPrice\": 10.00,",
											"        \"description\": \"AA Batteries\"",
											"      }",
											"    ]",
											"  });",
											"  ",
											"  // setup request config",
											"  const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,",
											"    method: 'POST',",
											"    header: {",
											"      'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"      mode: 'raw',",
											"      raw: setupRequestBody",
											"    }",
											"  };",
											"  ",
											"  // validate bank account request body",
											"  const validateBankAccountRequestBody = JSON.stringify({",
											"     \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"     \"sortCode\" : \"070116\",",
											"     \"accountNumber\": \"00003536\",",
											"     \"accountOpenedMonth\": 1, ",
											"     \"accountOpenedYear\": 2000",
											"  })",
											"  ",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"  ",
											"  // create quote request body",
											"  const createQuoteRequestBody = JSON.stringify({",
											"      \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"  })",
											"  ",
											"  // apply request body",
											"  const applyRequestBody = JSON.stringify({",
											"      \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"      \"deviceRiskBlackBox\": \"0400UtAq9oNuGZINf94lis1zt\",",
											"      \"ipAddress\": \"99.99.99.99\"",
											"  })",
											"  ",
											"  asyncSeries([",
											"      // application setup",
											"      (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"          if (err) throw new Error(`/setup call failed`);",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId value: \", applicationId);",
											"          pm.environment.set(\"applicationId\", applicationId);",
											"  ",
											"          //Now that we have the application ID, set up the config for the next request",
											"          getApplicationConfig = {",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"              method: 'GET',",
											"              header: {",
											"                  'Content-Type': 'application/json'",
											"              }",
											"          };",
											"  ",
											"          //Always call the callback to progess to the next request.",
											"          cb(err, res);",
											"      }),",
											"  ",
											"      // get application",
											"      (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"          if (err) throw new Error('get application call failed');",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId = \" + applicationId);",
											"  ",
											"          // set validateBankAccountConfig",
											"          validateBankAccountConfig = {",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"              method: 'POST',",
											"              header: {",
											"                  'Content-Type': 'application/json',",
											"              },",
											"              body: {",
											"                  mode: 'raw',",
											"                  raw: validateBankAccountRequestBody",
											"              }",
											"          }",
											"  ",
											"          cb(err, res);",
											"      }),",
											"  ",
											"      // validate bank account",
											"      (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"          if (err) throw new Error('/validate call failed');",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId = \" + applicationId);",
											"  ",
											"          // set createApplicationRequestConfig",
											"          createApplicationRequestConfig = {",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"              method: 'POST',",
											"              header: {",
											"                  'Content-Type': 'application/json',",
											"              },",
											"              body: {",
											"                  mode: 'raw',",
											"                  raw: createApplicationRequestBody",
											"              }",
											"          }",
											"  ",
											"          cb(err, res);",
											"      }),",
											"  ",
											"      // create application",
											"      (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"          if (err) throw new Error('create /applications/applicationId call failed');",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId = \" + applicationId);",
											"  ",
											"          // create quote request config",
											"          createQuoteConfig = {",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"              method: 'POST',",
											"              header: {",
											"                  'Content-Type': 'application/json',",
											"              },",
											"              body: {",
											"                  mode: 'raw',",
											"                  raw: createQuoteRequestBody",
											"              }",
											"          }",
											"  ",
											"          cb(err, res);",
											"      }),",
											"  ",
											"      // create quote",
											"      (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"          if (err) throw new Error('create /quote call failed');",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId = \" + applicationId);",
											"  ",
											"          applyConfig = {",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"              method: 'POST',",
											"              header: {",
											"                  'Content-Type': 'application/json',",
											"              },",
											"              body: {",
											"                  mode: 'raw',",
											"                  raw: applyRequestBody",
											"              }",
											"          }",
											"  ",
											"          cb(err, res);",
											"      }),",
											"  ",
											"      // apply",
											"      (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"          if (err) throw new Error('/apply call failed');",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId = \" + applicationId);",
											"      }),",
											"  ], (err, res) => console.info('All pre-requests completed', err, res));",
											"  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Unhappypath - Verify error code 403 from /apply endpoint when application state is invalid ",
											"pm.test(\"Create application status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Unhappypath - Verify error description if application state is invalid ",
											"pm.test(\"Validate 'invalid Application State' error description in response body\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"Invalid Application State\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",\n    \"deviceRiskBlackBox\": \"{{deviceRiskBlackBox}}\",\n    \"ipAddress\": \"99.99.99.99\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{apply}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{apply}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "EXIT",
					"item": [
						{
							"name": "FPP-2614-Exit_Validation",
							"item": [
								{
									"name": "MessageID",
									"item": [
										{
											"name": "Invalid-50+_chars",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// BEGIN UTIL FUNCTIONS",
															"function _series(tasks, cb, currOperation = 0, results = []) {",
															"    if (currOperation === tasks.length) {",
															"        return cb(null, results);",
															"    }",
															"    if (typeof tasks[currOperation] !== 'function') {",
															"        return cb(new Error('asyncSeries: Please provide a function'));",
															"    }",
															"    tasks[currOperation]((err, res) => {",
															"        if (err) {",
															"            return cb(err);",
															"        }",
															"        results.push(res);",
															"        return _series(tasks, cb, currOperation + 1, results);",
															"    });",
															"}",
															"",
															"function asyncSeries(tasks, cb = () => { }) {",
															"    return _series(tasks, cb);",
															"}",
															"// END UTIL FUNCTIONS",
															"",
															"//getting values from env variables",
															"const baseURL = pm.environment.get(\"dev3\");",
															"const b2bPath = pm.environment.get(\"b2b\");",
															"const b2cPath = pm.environment.get(\"b2c\")",
															"const sessionPath = pm.environment.get(\"getsession\");",
															"const setupPath = pm.environment.get(\"setup\");",
															"",
															"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
															"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
															"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
															"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
															"",
															"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
															"let getApplicationConfig;",
															"",
															"// Function to get variables from environment",
															"const env = { get: variable => pm.environment.get(variable) }",
															"",
															"var response_schema_exit = {",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"        \"applicationId\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"messageId\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"redirectUrl\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"required\": [",
															"            \"applicationId\",",
															"            \"messageId\",",
															"            \"redirectUrl\"",
															"        ]",
															"    }",
															"}",
															"",
															"pm.collectionVariables.set(\"response_schema_exit\", response_schema_exit);",
															"",
															"let setupRequestBody = JSON.stringify({",
															"    \"messageId\": env.get('messageId'),",
															"    \"customer\": {",
															"        \"customerId\": env.get('customerId'),",
															"        \"title\": \"Mr\",",
															"        \"firstName\": env.get('firstName'),",
															"        \"lastName\": env.get('lastName'),",
															"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
															"        \"billingAddress\": {",
															"            \"houseNumber\": env.get('houseNumber1'),",
															"            \"line1\": env.get('street1'),",
															"            \"postCode\": env.get('postCode1'),",
															"            \"town\": env.get('town1'),",
															"            \"county\": env.get('county1')",
															"        }",
															"    },",
															"    \"basket\": {",
															"        \"financeAmount\": 320,",
															"        \"grossAmount\": 320,",
															"        \"discounts\": 0,",
															"        \"giftVouchers\": 0,",
															"        \"nectarPointsCurrencyValue\": 0",
															"    },",
															"    \"others\": {",
															"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
															"        \"origin\": \"argos\",",
															"        \"ipAddress\": \"99.99.99.99\",",
															"        \"collectionStoreId\": \"12345\",",
															"        \"userAgent\": \"FrontendTesting/1.00\",",
															"        \"collectionStorePostCode\": \"BT14 6NE\",",
															"        \"fulfilmentChannel\": \"Collection\",",
															"        \"creditPlanId\": \"20010\",",
															"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
															"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
															"        \"purchaseChannel\": \"Web\"",
															"    },",
															"    \"products\": [",
															"        {",
															"            \"quantity\": 1,",
															"            \"sku\": 1000,",
															"            \"unitPrice\": 300,",
															"            \"description\": \"Samsung TV\"",
															"        },",
															"        {",
															"            \"quantity\": 2,",
															"            \"sku\": 2313131323,",
															"            \"unitPrice\": 10,",
															"            \"description\": \"AA Batteries\"",
															"        }",
															"    ]",
															"});",
															"",
															"//building the request",
															"const createSetupRequest = {",
															"    url: baseURL + b2bPath + sessionPath + setupPath,//building the url path",
															"",
															"    method: 'POST',",
															"    header: {",
															"        'Content-Type': 'application/json',",
															"    },",
															"    body: {",
															"        mode: 'raw',",
															"        raw: setupRequestBody",
															"    }",
															"};",
															"",
															"asyncSeries([",
															"    // application setup",
															"    (cb) => pm.sendRequest(createSetupRequest, (err, res) => {",
															"        if (err) throw new Error(`/setup call failed`);",
															"",
															"        const { applicationId } = res.json();",
															"        console.info(\"applicationId value: \", applicationId);",
															"        pm.environment.set(\"applicationId\", applicationId);",
															"",
															"                //Now that we have the application ID, set up the config for the next request",
															"        getApplicationConfig = {",
															"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
															"            method: 'GET',",
															"            header: {",
															"                'Content-Type': 'application/json'",
															"            }",
															"        };",
															"",
															"        //Always call the callback to progess to the next request.",
															"        cb(err, res);",
															"    }),",
															"",
															"    // get application",
															"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
															"        if (err) throw new Error('get application call failed');",
															"        const { applicationId } = res.json();",
															"        console.info(\"applicationId = \" + applicationId);",
															"",
															"        cb(err, res);",
															"    }),",
															"    ",
															"], (err, res) => console.info('All pre-requests completed', err, res));",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"})",
															"",
															"pm.test(\"Valid invalid messageId error\", function () {",
															"    const { message } = responseJson.errors[0];",
															"",
															"    pm.expect(message).to.eq(\"\\\"messageId\\\" length must be less than or equal to 50 characters long\");",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"messageId\": \"weiucseiuvberiuceoruyfvsoefhdbvseiurveairuaveiurbvesuirgbesrubvseiorubveiurbveiaurbviaurnpieaurnveiaruvcaeuirfg\",\n   \"currentStage\": \"Example\",\n   \"ctaCode\": \"LeaveApplication\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{exit}}",
													"host": [
														"{{dev3}}{{b2c}}{{getsession}}"
													],
													"path": [
														"{{applicationId}}{{exit}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid-spaces",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// BEGIN UTIL FUNCTIONS",
															"function _series(tasks, cb, currOperation = 0, results = []) {",
															"    if (currOperation === tasks.length) {",
															"        return cb(null, results);",
															"    }",
															"    if (typeof tasks[currOperation] !== 'function') {",
															"        return cb(new Error('asyncSeries: Please provide a function'));",
															"    }",
															"    tasks[currOperation]((err, res) => {",
															"        if (err) {",
															"            return cb(err);",
															"        }",
															"        results.push(res);",
															"        return _series(tasks, cb, currOperation + 1, results);",
															"    });",
															"}",
															"",
															"function asyncSeries(tasks, cb = () => { }) {",
															"    return _series(tasks, cb);",
															"}",
															"// END UTIL FUNCTIONS",
															"",
															"//getting values from env variables",
															"const baseURL = pm.environment.get(\"dev3\");",
															"const b2bPath = pm.environment.get(\"b2b\");",
															"const b2cPath = pm.environment.get(\"b2c\")",
															"const sessionPath = pm.environment.get(\"getsession\");",
															"const setupPath = pm.environment.get(\"setup\");",
															"",
															"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
															"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
															"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
															"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
															"",
															"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
															"let getApplicationConfig;",
															"",
															"// Function to get variables from environment",
															"const env = { get: variable => pm.environment.get(variable) }",
															"",
															"var response_schema_exit = {",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"        \"applicationId\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"messageId\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"redirectUrl\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"required\": [",
															"            \"applicationId\",",
															"            \"messageId\",",
															"            \"redirectUrl\"",
															"        ]",
															"    }",
															"}",
															"",
															"pm.collectionVariables.set(\"response_schema_exit\", response_schema_exit);",
															"",
															"let setupRequestBody = JSON.stringify({",
															"    \"messageId\": env.get('messageId'),",
															"    \"customer\": {",
															"        \"customerId\": env.get('customerId'),",
															"        \"title\": \"Mr\",",
															"        \"firstName\": env.get('firstName'),",
															"        \"lastName\": env.get('lastName'),",
															"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
															"        \"billingAddress\": {",
															"            \"houseNumber\": env.get('houseNumber1'),",
															"            \"line1\": env.get('street1'),",
															"            \"postCode\": env.get('postCode1'),",
															"            \"town\": env.get('town1'),",
															"            \"county\": env.get('county1')",
															"        }",
															"    },",
															"    \"basket\": {",
															"        \"financeAmount\": 320,",
															"        \"grossAmount\": 320,",
															"        \"discounts\": 0,",
															"        \"giftVouchers\": 0,",
															"        \"nectarPointsCurrencyValue\": 0",
															"    },",
															"    \"others\": {",
															"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
															"        \"origin\": \"argos\",",
															"        \"ipAddress\": \"99.99.99.99\",",
															"        \"collectionStoreId\": \"12345\",",
															"        \"userAgent\": \"FrontendTesting/1.00\",",
															"        \"collectionStorePostCode\": \"BT14 6NE\",",
															"        \"fulfilmentChannel\": \"Collection\",",
															"        \"creditPlanId\": \"20010\",",
															"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
															"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
															"        \"purchaseChannel\": \"Web\"",
															"    },",
															"    \"products\": [",
															"        {",
															"            \"quantity\": 1,",
															"            \"sku\": 1000,",
															"            \"unitPrice\": 300,",
															"            \"description\": \"Samsung TV\"",
															"        },",
															"        {",
															"            \"quantity\": 2,",
															"            \"sku\": 2313131323,",
															"            \"unitPrice\": 10,",
															"            \"description\": \"AA Batteries\"",
															"        }",
															"    ]",
															"});",
															"",
															"//building the request",
															"const createSetupRequest = {",
															"    url: baseURL + b2bPath + sessionPath + setupPath,//building the url path",
															"",
															"    method: 'POST',",
															"    header: {",
															"        'Content-Type': 'application/json',",
															"    },",
															"    body: {",
															"        mode: 'raw',",
															"        raw: setupRequestBody",
															"    }",
															"};",
															"",
															"asyncSeries([",
															"    // application setup",
															"    (cb) => pm.sendRequest(createSetupRequest, (err, res) => {",
															"        if (err) throw new Error(`/setup call failed`);",
															"",
															"        const { applicationId } = res.json();",
															"        console.info(\"applicationId value: \", applicationId);",
															"        pm.environment.set(\"applicationId\", applicationId);",
															"",
															"                //Now that we have the application ID, set up the config for the next request",
															"        getApplicationConfig = {",
															"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
															"            method: 'GET',",
															"            header: {",
															"                'Content-Type': 'application/json'",
															"            }",
															"        };",
															"",
															"        //Always call the callback to progess to the next request.",
															"        cb(err, res);",
															"    }),",
															"",
															"    // get application",
															"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
															"        if (err) throw new Error('get application call failed');",
															"        const { applicationId } = res.json();",
															"        console.info(\"applicationId = \" + applicationId);",
															"",
															"        cb(err, res);",
															"    }),",
															"    ",
															"], (err, res) => console.info('All pre-requests completed', err, res));",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"})",
															"",
															"pm.test(\"Valid invalid messageId error\", function () {",
															"    const { message } = responseJson.errors[0];",
															"",
															"    pm.expect(message).to.eq(\"\\\"messageId\\\" fails to match the required pattern: /^[^~`§±!@€£#$%^&(){}|:;\\\"’<>,.?¡¢¶•ªº«\\\\s]*$/\");",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"messageId\": \"weiucseiuvberiuceoruyfv soefhdbvseiurveair\",\n   \"currentStage\": \"Example\",\n   \"ctaCode\": \"LeaveApplication\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{exit}}",
													"host": [
														"{{dev3}}{{b2c}}{{getsession}}"
													],
													"path": [
														"{{applicationId}}{{exit}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid-less_than_1_char",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// BEGIN UTIL FUNCTIONS",
															"function _series(tasks, cb, currOperation = 0, results = []) {",
															"    if (currOperation === tasks.length) {",
															"        return cb(null, results);",
															"    }",
															"    if (typeof tasks[currOperation] !== 'function') {",
															"        return cb(new Error('asyncSeries: Please provide a function'));",
															"    }",
															"    tasks[currOperation]((err, res) => {",
															"        if (err) {",
															"            return cb(err);",
															"        }",
															"        results.push(res);",
															"        return _series(tasks, cb, currOperation + 1, results);",
															"    });",
															"}",
															"",
															"function asyncSeries(tasks, cb = () => { }) {",
															"    return _series(tasks, cb);",
															"}",
															"// END UTIL FUNCTIONS",
															"",
															"//getting values from env variables",
															"const baseURL = pm.environment.get(\"dev3\");",
															"const b2bPath = pm.environment.get(\"b2b\");",
															"const b2cPath = pm.environment.get(\"b2c\")",
															"const sessionPath = pm.environment.get(\"getsession\");",
															"const setupPath = pm.environment.get(\"setup\");",
															"",
															"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
															"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
															"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
															"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
															"",
															"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
															"let getApplicationConfig;",
															"",
															"// Function to get variables from environment",
															"const env = { get: variable => pm.environment.get(variable) }",
															"",
															"var response_schema_exit = {",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"        \"applicationId\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"messageId\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"redirectUrl\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"required\": [",
															"            \"applicationId\",",
															"            \"messageId\",",
															"            \"redirectUrl\"",
															"        ]",
															"    }",
															"}",
															"",
															"pm.collectionVariables.set(\"response_schema_exit\", response_schema_exit);",
															"",
															"let setupRequestBody = JSON.stringify({",
															"    \"messageId\": env.get('messageId'),",
															"    \"customer\": {",
															"        \"customerId\": env.get('customerId'),",
															"        \"title\": \"Mr\",",
															"        \"firstName\": env.get('firstName'),",
															"        \"lastName\": env.get('lastName'),",
															"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
															"        \"billingAddress\": {",
															"            \"houseNumber\": env.get('houseNumber1'),",
															"            \"line1\": env.get('street1'),",
															"            \"postCode\": env.get('postCode1'),",
															"            \"town\": env.get('town1'),",
															"            \"county\": env.get('county1')",
															"        }",
															"    },",
															"    \"basket\": {",
															"        \"financeAmount\": 320,",
															"        \"grossAmount\": 320,",
															"        \"discounts\": 0,",
															"        \"giftVouchers\": 0,",
															"        \"nectarPointsCurrencyValue\": 0",
															"    },",
															"    \"others\": {",
															"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
															"        \"origin\": \"argos\",",
															"        \"ipAddress\": \"99.99.99.99\",",
															"        \"collectionStoreId\": \"12345\",",
															"        \"userAgent\": \"FrontendTesting/1.00\",",
															"        \"collectionStorePostCode\": \"BT14 6NE\",",
															"        \"fulfilmentChannel\": \"Collection\",",
															"        \"creditPlanId\": \"20010\",",
															"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
															"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
															"        \"purchaseChannel\": \"Web\"",
															"    },",
															"    \"products\": [",
															"        {",
															"            \"quantity\": 1,",
															"            \"sku\": 1000,",
															"            \"unitPrice\": 300,",
															"            \"description\": \"Samsung TV\"",
															"        },",
															"        {",
															"            \"quantity\": 2,",
															"            \"sku\": 2313131323,",
															"            \"unitPrice\": 10,",
															"            \"description\": \"AA Batteries\"",
															"        }",
															"    ]",
															"});",
															"",
															"//building the request",
															"const createSetupRequest = {",
															"    url: baseURL + b2bPath + sessionPath + setupPath,//building the url path",
															"",
															"    method: 'POST',",
															"    header: {",
															"        'Content-Type': 'application/json',",
															"    },",
															"    body: {",
															"        mode: 'raw',",
															"        raw: setupRequestBody",
															"    }",
															"};",
															"",
															"asyncSeries([",
															"    // application setup",
															"    (cb) => pm.sendRequest(createSetupRequest, (err, res) => {",
															"        if (err) throw new Error(`/setup call failed`);",
															"",
															"        const { applicationId } = res.json();",
															"        console.info(\"applicationId value: \", applicationId);",
															"        pm.environment.set(\"applicationId\", applicationId);",
															"",
															"                //Now that we have the application ID, set up the config for the next request",
															"        getApplicationConfig = {",
															"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
															"            method: 'GET',",
															"            header: {",
															"                'Content-Type': 'application/json'",
															"            }",
															"        };",
															"",
															"        //Always call the callback to progess to the next request.",
															"        cb(err, res);",
															"    }),",
															"",
															"    // get application",
															"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
															"        if (err) throw new Error('get application call failed');",
															"        const { applicationId } = res.json();",
															"        console.info(\"applicationId = \" + applicationId);",
															"",
															"        cb(err, res);",
															"    }),",
															"    ",
															"], (err, res) => console.info('All pre-requests completed', err, res));",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"})",
															"",
															"pm.test(\"Valid invalid messageId error\", function () {",
															"    const { message } = responseJson.errors[0];",
															"",
															"    pm.expect(message).to.eq(\"\\\"messageId\\\" contains an invalid value. \\\"messageId\\\" is not allowed to be empty\");",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"messageId\": \"\",\n   \"currentStage\": \"Example\",\n   \"ctaCode\": \"LeaveApplication\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{exit}}",
													"host": [
														"{{dev3}}{{b2c}}{{getsession}}"
													],
													"path": [
														"{{applicationId}}{{exit}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid-excluded_special_chars",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// BEGIN UTIL FUNCTIONS",
															"function _series(tasks, cb, currOperation = 0, results = []) {",
															"    if (currOperation === tasks.length) {",
															"        return cb(null, results);",
															"    }",
															"    if (typeof tasks[currOperation] !== 'function') {",
															"        return cb(new Error('asyncSeries: Please provide a function'));",
															"    }",
															"    tasks[currOperation]((err, res) => {",
															"        if (err) {",
															"            return cb(err);",
															"        }",
															"        results.push(res);",
															"        return _series(tasks, cb, currOperation + 1, results);",
															"    });",
															"}",
															"",
															"function asyncSeries(tasks, cb = () => { }) {",
															"    return _series(tasks, cb);",
															"}",
															"// END UTIL FUNCTIONS",
															"",
															"//getting values from env variables",
															"const baseURL = pm.environment.get(\"dev3\");",
															"const b2bPath = pm.environment.get(\"b2b\");",
															"const b2cPath = pm.environment.get(\"b2c\")",
															"const sessionPath = pm.environment.get(\"getsession\");",
															"const setupPath = pm.environment.get(\"setup\");",
															"",
															"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
															"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
															"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
															"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
															"",
															"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
															"let getApplicationConfig;",
															"",
															"// Function to get variables from environment",
															"const env = { get: variable => pm.environment.get(variable) }",
															"",
															"var response_schema_exit = {",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"        \"applicationId\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"messageId\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"redirectUrl\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"required\": [",
															"            \"applicationId\",",
															"            \"messageId\",",
															"            \"redirectUrl\"",
															"        ]",
															"    }",
															"}",
															"",
															"pm.collectionVariables.set(\"response_schema_exit\", response_schema_exit);",
															"",
															"let setupRequestBody = JSON.stringify({",
															"    \"messageId\": env.get('messageId'),",
															"    \"customer\": {",
															"        \"customerId\": env.get('customerId'),",
															"        \"title\": \"Mr\",",
															"        \"firstName\": env.get('firstName'),",
															"        \"lastName\": env.get('lastName'),",
															"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
															"        \"billingAddress\": {",
															"            \"houseNumber\": env.get('houseNumber1'),",
															"            \"line1\": env.get('street1'),",
															"            \"postCode\": env.get('postCode1'),",
															"            \"town\": env.get('town1'),",
															"            \"county\": env.get('county1')",
															"        }",
															"    },",
															"    \"basket\": {",
															"        \"financeAmount\": 320,",
															"        \"grossAmount\": 320,",
															"        \"discounts\": 0,",
															"        \"giftVouchers\": 0,",
															"        \"nectarPointsCurrencyValue\": 0",
															"    },",
															"    \"others\": {",
															"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
															"        \"origin\": \"argos\",",
															"        \"ipAddress\": \"99.99.99.99\",",
															"        \"collectionStoreId\": \"12345\",",
															"        \"userAgent\": \"FrontendTesting/1.00\",",
															"        \"collectionStorePostCode\": \"BT14 6NE\",",
															"        \"fulfilmentChannel\": \"Collection\",",
															"        \"creditPlanId\": \"20010\",",
															"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
															"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
															"        \"purchaseChannel\": \"Web\"",
															"    },",
															"    \"products\": [",
															"        {",
															"            \"quantity\": 1,",
															"            \"sku\": 1000,",
															"            \"unitPrice\": 300,",
															"            \"description\": \"Samsung TV\"",
															"        },",
															"        {",
															"            \"quantity\": 2,",
															"            \"sku\": 2313131323,",
															"            \"unitPrice\": 10,",
															"            \"description\": \"AA Batteries\"",
															"        }",
															"    ]",
															"});",
															"",
															"//building the request",
															"const createSetupRequest = {",
															"    url: baseURL + b2bPath + sessionPath + setupPath,//building the url path",
															"",
															"    method: 'POST',",
															"    header: {",
															"        'Content-Type': 'application/json',",
															"    },",
															"    body: {",
															"        mode: 'raw',",
															"        raw: setupRequestBody",
															"    }",
															"};",
															"",
															"asyncSeries([",
															"    // application setup",
															"    (cb) => pm.sendRequest(createSetupRequest, (err, res) => {",
															"        if (err) throw new Error(`/setup call failed`);",
															"",
															"        const { applicationId } = res.json();",
															"        console.info(\"applicationId value: \", applicationId);",
															"        pm.environment.set(\"applicationId\", applicationId);",
															"",
															"                //Now that we have the application ID, set up the config for the next request",
															"        getApplicationConfig = {",
															"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
															"            method: 'GET',",
															"            header: {",
															"                'Content-Type': 'application/json'",
															"            }",
															"        };",
															"",
															"        //Always call the callback to progess to the next request.",
															"        cb(err, res);",
															"    }),",
															"",
															"    // get application",
															"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
															"        if (err) throw new Error('get application call failed');",
															"        const { applicationId } = res.json();",
															"        console.info(\"applicationId = \" + applicationId);",
															"",
															"        cb(err, res);",
															"    }),",
															"    ",
															"], (err, res) => console.info('All pre-requests completed', err, res));",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"})",
															"",
															"pm.test(\"Valid invalid messageId error\", function () {",
															"    const { message } = responseJson.errors[0];",
															"",
															"    pm.expect(message).to.eq(\"\\\"messageId\\\" fails to match the required pattern: /^[^~`§±!@€£#$%^&(){}|:;\\\"’<>,.?¡¢¶•ªº«\\\\s]*$/\");",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"messageId\": \"~`§±!@€£#$%^&*(){}|:;”’<>,.?¡¢¶•ªº«\",\n   \"currentStage\": \"Example\",\n   \"ctaCode\": \"LeaveApplication\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{exit}}",
													"host": [
														"{{dev3}}{{b2c}}{{getsession}}"
													],
													"path": [
														"{{applicationId}}{{exit}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Valid-leading0",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// BEGIN UTIL FUNCTIONS",
															"function _series(tasks, cb, currOperation = 0, results = []) {",
															"    if (currOperation === tasks.length) {",
															"        return cb(null, results);",
															"    }",
															"    if (typeof tasks[currOperation] !== 'function') {",
															"        return cb(new Error('asyncSeries: Please provide a function'));",
															"    }",
															"    tasks[currOperation]((err, res) => {",
															"        if (err) {",
															"            return cb(err);",
															"        }",
															"        results.push(res);",
															"        return _series(tasks, cb, currOperation + 1, results);",
															"    });",
															"}",
															"",
															"function asyncSeries(tasks, cb = () => { }) {",
															"    return _series(tasks, cb);",
															"}",
															"// END UTIL FUNCTIONS",
															"",
															"//getting values from env variables",
															"const baseURL = pm.environment.get(\"dev3\");",
															"const b2bPath = pm.environment.get(\"b2b\");",
															"const b2cPath = pm.environment.get(\"b2c\")",
															"const sessionPath = pm.environment.get(\"getsession\");",
															"const setupPath = pm.environment.get(\"setup\");",
															"",
															"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
															"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
															"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
															"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
															"",
															"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
															"let getApplicationConfig;",
															"",
															"// Function to get variables from environment",
															"const env = { get: variable => pm.environment.get(variable) }",
															"",
															"var response_schema_exit = {",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"        \"applicationId\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"messageId\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"redirectUrl\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"required\": [",
															"            \"applicationId\",",
															"            \"messageId\",",
															"            \"redirectUrl\"",
															"        ]",
															"    }",
															"}",
															"",
															"pm.collectionVariables.set(\"response_schema_exit\", response_schema_exit);",
															"",
															"let setupRequestBody = JSON.stringify({",
															"    \"messageId\": env.get('messageId'),",
															"    \"customer\": {",
															"        \"customerId\": env.get('customerId'),",
															"        \"title\": \"Mr\",",
															"        \"firstName\": env.get('firstName'),",
															"        \"lastName\": env.get('lastName'),",
															"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
															"        \"billingAddress\": {",
															"            \"houseNumber\": env.get('houseNumber1'),",
															"            \"line1\": env.get('street1'),",
															"            \"postCode\": env.get('postCode1'),",
															"            \"town\": env.get('town1'),",
															"            \"county\": env.get('county1')",
															"        }",
															"    },",
															"    \"basket\": {",
															"        \"financeAmount\": 320,",
															"        \"grossAmount\": 320,",
															"        \"discounts\": 0,",
															"        \"giftVouchers\": 0,",
															"        \"nectarPointsCurrencyValue\": 0",
															"    },",
															"    \"others\": {",
															"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
															"        \"origin\": \"argos\",",
															"        \"ipAddress\": \"99.99.99.99\",",
															"        \"collectionStoreId\": \"12345\",",
															"        \"userAgent\": \"FrontendTesting/1.00\",",
															"        \"collectionStorePostCode\": \"BT14 6NE\",",
															"        \"fulfilmentChannel\": \"Collection\",",
															"        \"creditPlanId\": \"20010\",",
															"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
															"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
															"        \"purchaseChannel\": \"Web\"",
															"    },",
															"    \"products\": [",
															"        {",
															"            \"quantity\": 1,",
															"            \"sku\": 1000,",
															"            \"unitPrice\": 300,",
															"            \"description\": \"Samsung TV\"",
															"        },",
															"        {",
															"            \"quantity\": 2,",
															"            \"sku\": 2313131323,",
															"            \"unitPrice\": 10,",
															"            \"description\": \"AA Batteries\"",
															"        }",
															"    ]",
															"});",
															"",
															"//building the request",
															"const createSetupRequest = {",
															"    url: baseURL + b2bPath + sessionPath + setupPath,//building the url path",
															"",
															"    method: 'POST',",
															"    header: {",
															"        'Content-Type': 'application/json',",
															"    },",
															"    body: {",
															"        mode: 'raw',",
															"        raw: setupRequestBody",
															"    }",
															"};",
															"",
															"asyncSeries([",
															"    // application setup",
															"    (cb) => pm.sendRequest(createSetupRequest, (err, res) => {",
															"        if (err) throw new Error(`/setup call failed`);",
															"",
															"        const { applicationId } = res.json();",
															"        console.info(\"applicationId value: \", applicationId);",
															"        pm.environment.set(\"applicationId\", applicationId);",
															"",
															"                //Now that we have the application ID, set up the config for the next request",
															"        getApplicationConfig = {",
															"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
															"            method: 'GET',",
															"            header: {",
															"                'Content-Type': 'application/json'",
															"            }",
															"        };",
															"",
															"        //Always call the callback to progess to the next request.",
															"        cb(err, res);",
															"    }),",
															"",
															"    // get application",
															"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
															"        if (err) throw new Error('get application call failed');",
															"        const { applicationId } = res.json();",
															"        console.info(\"applicationId = \" + applicationId);",
															"",
															"        cb(err, res);",
															"    }),",
															"    ",
															"], (err, res) => console.info('All pre-requests completed', err, res));",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Valid invalid messageId error\", function () {",
															"    const { messageId } = responseJson;",
															"",
															"    pm.expect(messageId).to.eq(JSON.parse(request.data).messageId);",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"messageId\": \"0weiucseiuvberiuceoruyfvsoefhdbvseiurveair\",\n   \"currentStage\": \"Example\",\n   \"ctaCode\": \"LeaveApplication\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{exit}}",
													"host": [
														"{{dev3}}{{b2c}}{{getsession}}"
													],
													"path": [
														"{{applicationId}}{{exit}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Valid-allowed_special_chars",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// BEGIN UTIL FUNCTIONS",
															"function _series(tasks, cb, currOperation = 0, results = []) {",
															"    if (currOperation === tasks.length) {",
															"        return cb(null, results);",
															"    }",
															"    if (typeof tasks[currOperation] !== 'function') {",
															"        return cb(new Error('asyncSeries: Please provide a function'));",
															"    }",
															"    tasks[currOperation]((err, res) => {",
															"        if (err) {",
															"            return cb(err);",
															"        }",
															"        results.push(res);",
															"        return _series(tasks, cb, currOperation + 1, results);",
															"    });",
															"}",
															"",
															"function asyncSeries(tasks, cb = () => { }) {",
															"    return _series(tasks, cb);",
															"}",
															"// END UTIL FUNCTIONS",
															"",
															"//getting values from env variables",
															"const baseURL = pm.environment.get(\"dev3\");",
															"const b2bPath = pm.environment.get(\"b2b\");",
															"const b2cPath = pm.environment.get(\"b2c\")",
															"const sessionPath = pm.environment.get(\"getsession\");",
															"const setupPath = pm.environment.get(\"setup\");",
															"",
															"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
															"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
															"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
															"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
															"",
															"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
															"let getApplicationConfig;",
															"",
															"// Function to get variables from environment",
															"const env = { get: variable => pm.environment.get(variable) }",
															"",
															"var response_schema_exit = {",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"        \"applicationId\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"messageId\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"redirectUrl\": {",
															"            \"type\": \"string\"",
															"        },",
															"        \"required\": [",
															"            \"applicationId\",",
															"            \"messageId\",",
															"            \"redirectUrl\"",
															"        ]",
															"    }",
															"}",
															"",
															"pm.collectionVariables.set(\"response_schema_exit\", response_schema_exit);",
															"",
															"let setupRequestBody = JSON.stringify({",
															"    \"messageId\": env.get('messageId'),",
															"    \"customer\": {",
															"        \"customerId\": env.get('customerId'),",
															"        \"title\": \"Mr\",",
															"        \"firstName\": env.get('firstName'),",
															"        \"lastName\": env.get('lastName'),",
															"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
															"        \"billingAddress\": {",
															"            \"houseNumber\": env.get('houseNumber1'),",
															"            \"line1\": env.get('street1'),",
															"            \"postCode\": env.get('postCode1'),",
															"            \"town\": env.get('town1'),",
															"            \"county\": env.get('county1')",
															"        }",
															"    },",
															"    \"basket\": {",
															"        \"financeAmount\": 320,",
															"        \"grossAmount\": 320,",
															"        \"discounts\": 0,",
															"        \"giftVouchers\": 0,",
															"        \"nectarPointsCurrencyValue\": 0",
															"    },",
															"    \"others\": {",
															"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
															"        \"origin\": \"argos\",",
															"        \"ipAddress\": \"99.99.99.99\",",
															"        \"collectionStoreId\": \"12345\",",
															"        \"userAgent\": \"FrontendTesting/1.00\",",
															"        \"collectionStorePostCode\": \"BT14 6NE\",",
															"        \"fulfilmentChannel\": \"Collection\",",
															"        \"creditPlanId\": \"20010\",",
															"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
															"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
															"        \"purchaseChannel\": \"Web\"",
															"    },",
															"    \"products\": [",
															"        {",
															"            \"quantity\": 1,",
															"            \"sku\": 1000,",
															"            \"unitPrice\": 300,",
															"            \"description\": \"Samsung TV\"",
															"        },",
															"        {",
															"            \"quantity\": 2,",
															"            \"sku\": 2313131323,",
															"            \"unitPrice\": 10,",
															"            \"description\": \"AA Batteries\"",
															"        }",
															"    ]",
															"});",
															"",
															"//building the request",
															"const createSetupRequest = {",
															"    url: baseURL + b2bPath + sessionPath + setupPath,//building the url path",
															"",
															"    method: 'POST',",
															"    header: {",
															"        'Content-Type': 'application/json',",
															"    },",
															"    body: {",
															"        mode: 'raw',",
															"        raw: setupRequestBody",
															"    }",
															"};",
															"",
															"asyncSeries([",
															"    // application setup",
															"    (cb) => pm.sendRequest(createSetupRequest, (err, res) => {",
															"        if (err) throw new Error(`/setup call failed`);",
															"",
															"        const { applicationId } = res.json();",
															"        console.info(\"applicationId value: \", applicationId);",
															"        pm.environment.set(\"applicationId\", applicationId);",
															"",
															"                //Now that we have the application ID, set up the config for the next request",
															"        getApplicationConfig = {",
															"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
															"            method: 'GET',",
															"            header: {",
															"                'Content-Type': 'application/json'",
															"            }",
															"        };",
															"",
															"        //Always call the callback to progess to the next request.",
															"        cb(err, res);",
															"    }),",
															"",
															"    // get application",
															"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
															"        if (err) throw new Error('get application call failed');",
															"        const { applicationId } = res.json();",
															"        console.info(\"applicationId = \" + applicationId);",
															"",
															"        cb(err, res);",
															"    }),",
															"    ",
															"], (err, res) => console.info('All pre-requests completed', err, res));",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Valid invalid messageId error\", function () {",
															"    const { messageId } = responseJson;",
															"",
															"    pm.expect(messageId).to.eq(JSON.parse(request.data).messageId);",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"messageId\": \"-_+=[]\\/\",\n   \"currentStage\": \"Example\",\n   \"ctaCode\": \"LeaveApplication\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{exit}}",
													"host": [
														"{{dev3}}{{b2c}}{{getsession}}"
													],
													"path": [
														"{{applicationId}}{{exit}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "FPP-253-Implement-endpoint-Exit-Session-Happy-Path-code=Incomplete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"//getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\")",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"//Set Random messageId value ",
											"var uuid = require(\"uuid\");",
											"var messageId = uuid.v4();",
											"",
											"pm.environment.set('messageId',messageId)",
											"",
											"// Function to get variables from environment",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"var response_schema_exit = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"applicationId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"messageId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"redirectUrl\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"required\": [",
											"            \"applicationId\",",
											"            \"messageId\",",
											"            \"redirectUrl\"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.collectionVariables.set(\"response_schema_exit\", response_schema_exit);",
											"",
											"let setupRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"customer\": {",
											"        \"customerId\": env.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": env.get('firstName'),",
											"        \"lastName\": env.get('lastName'),",
											"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": env.get('houseNumber1'),",
											"            \"line1\": env.get('street1'),",
											"            \"postCode\": env.get('postCode1'),",
											"            \"town\": env.get('town1'),",
											"            \"county\": env.get('county1')",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 320,",
											"        \"grossAmount\": 320,",
											"        \"discounts\": 0,",
											"        \"giftVouchers\": 0,",
											"        \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"FrontendTesting/1.00\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"});",
											"",
											"//building the request",
											"const createSetupRequest = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,//building the url path",
											"",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: setupRequestBody",
											"    }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": env.get('messageId'),",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(createSetupRequest, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"                //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"const applicationID = pm.environment.get(\"applicationId\")",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"messageId in response to equal messageId in request\", function () {",
											"    pm.expect(JSON.parse(request.data).messageId).to.eq(pm.response.json().messageId);",
											"})",
											"",
											"pm.test(\"Redirect URL contains applicationID\", function () {",
											"    pm.expect(responseJson.redirectUrl).to.eq(\"https://www.argos.co.uk/?code=incomplete&token=\" + applicationID)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"messageId\": \"{{messageId}}\",\n   \"currentStage\": \"OfferRejected\",\n   \"ctaCode\": \"LeaveApplication\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{exit}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{exit}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-1717-Timed-out-HappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"//getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\")",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const pingPath = pm.environment.get(\"ping\");",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() - (20 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let pingConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"//Set Random messageId value ",
											"var uuid = require(\"uuid\");",
											"var messageId = uuid.v4();",
											"",
											"pm.environment.set('messageId', messageId)",
											"",
											"// Function to get variables from environment",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"var response_schema_exit = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"applicationId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"messageId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"redirectUrl\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"required\": [",
											"            \"applicationId\",",
											"            \"messageId\",",
											"            \"redirectUrl\"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.collectionVariables.set(\"response_schema_exit\", response_schema_exit);",
											"",
											"let setupRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"customer\": {",
											"        \"customerId\": env.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": env.get('firstName'),",
											"        \"lastName\": env.get('lastName'),",
											"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": env.get('houseNumber1'),",
											"            \"line1\": env.get('street1'),",
											"            \"postCode\": env.get('postCode1'),",
											"            \"town\": env.get('town1'),",
											"            \"county\": env.get('county1')",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 320,",
											"        \"grossAmount\": 320,",
											"        \"discounts\": 0,",
											"        \"giftVouchers\": 0,",
											"        \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"FrontendTesting/1.00\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"});",
											"",
											"//building the request",
											"const createSetupRequest = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,//building the url path",
											"",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: setupRequestBody",
											"    }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"sortCode\": \"070116\",",
											"    \"accountNumber\": \"00003536\",",
											"    \"accountOpenedMonth\": 1,",
											"    \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(createSetupRequest, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        pingConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + pingPath,",
											"            method: \"GET\",",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    (cb) => pm.sendRequest(pingConfig, (err, res) => {",
											"        if (err) throw new Error('ping request failed');",
											"",
											"        cb(err, res);",
											"    })",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"const applicationID = pm.environment.get(\"applicationId\")",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"messageId in response to equal messageId in request\", function () {",
											"    pm.expect(JSON.parse(request.data).messageId).to.eq(responseJson.messageId);",
											"})",
											"",
											"pm.test(\"Redirect URL contains applicationID\", function () {",
											"    pm.expect(responseJson.redirectUrl).to.eq(\"https://www.argos.co.uk/?code=timed_out&token=\" + applicationID)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"messageId\": \"{{messageId}}\",\n   \"currentStage\": \"OfferRejected\",\n   \"ctaCode\": \"LeaveApplication\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{exit}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{exit}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-253-Implement-endpoint-Exit-Session-Happy-Path-code=amend_details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"//getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\")",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"//Set Random messageId value ",
											"var uuid = require(\"uuid\");",
											"var messageId = uuid.v4();",
											"",
											"pm.environment.set('messageId',messageId)",
											"",
											"// Function to get variables from environment",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"var response_schema_exit = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"applicationId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"messageId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"redirectUrl\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"required\": [",
											"            \"applicationId\",",
											"            \"messageId\",",
											"            \"redirectUrl\"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.collectionVariables.set(\"response_schema_exit\", response_schema_exit);",
											"",
											"let setupRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"customer\": {",
											"        \"customerId\": env.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": env.get('firstName'),",
											"        \"lastName\": env.get('lastName'),",
											"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": env.get('houseNumber1'),",
											"            \"line1\": env.get('street1'),",
											"            \"postCode\": env.get('postCode1'),",
											"            \"town\": env.get('town1'),",
											"            \"county\": env.get('county1')",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 320,",
											"        \"grossAmount\": 320,",
											"        \"discounts\": 0,",
											"        \"giftVouchers\": 0,",
											"        \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"FrontendTesting/1.00\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"});",
											"",
											"//building the request",
											"const createSetupRequest = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,//building the url path",
											"",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: setupRequestBody",
											"    }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": env.get('messageId'),",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(createSetupRequest, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"                //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"const applicationID = pm.environment.get(\"applicationId\")",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"messageId in response to equal messageId in request\", function () {",
											"    pm.expect(JSON.parse(request.data).messageId).to.eq(pm.response.json().messageId);",
											"})",
											"",
											"pm.test(\"Redirect URL contains applicationID\", function () {",
											"    pm.expect(responseJson.redirectUrl).to.eq(\"https://www.argos.co.uk/?code=amend_details&token=\" + applicationID)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"messageId\": \"{{messageId}}\",\n   \"currentStage\": \"notUsed\",\n   \"ctaCode\": \"AmendDetails\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{exit}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{exit}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-688-declined-code-HappyPath",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resJson = pm.response.json();",
											"const applicationId = pm.environment.get('applicationId');",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"ApplicationId is correct\", function () {",
											"    pm.expect(resJson.applicationId).to.eql(applicationId);",
											"});",
											"",
											"pm.test('RedirectUrl has declined code and has applicationID', function () {",
											"",
											"    pm.expect(resJson.redirectUrl).to.eql(\"https://www.argos.co.uk/?code=declined&token=\" + applicationId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_exit = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"applicationId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"messageId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"redirectUrl\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"applicationId\",",
											"        \"messageId\",",
											"        \"redirectUrl\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_exit\", response_schema_exit);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
											"const websocketHost = pm.environment.get(\"websocket_host\");",
											"",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let applyConfig;",
											"let decisionReadyConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (9855 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"//Set Random messageId value ",
											"var uuid = require(\"uuid\");",
											"var messageId = uuid.v4();",
											"",
											"pm.environment.set('messageId',messageId);",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"    \"messageId\": \"OTHER_REQUEST\",",
											"    \"customer\": {",
											"        \"customerId\": env.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": env.get('firstName'),",
											"        \"lastName\": env.get('lastName'),",
											"        \"emailAddress\": env.get('firstName') + '.' + env.get('lastName') + '@gmail.com',",
											"        \"billingAddress\": {",
											"            \"houseNumber\": env.get('houseNumber1'),",
											"            \"line1\": env.get('street1'),",
											"            \"postCode\": env.get('postCode1'),",
											"            \"town\": env.get('town1'),",
											"            \"county\": env.get('county1')",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 6100.00,",
											"        \"grossAmount\": 6100.00,",
											"        \"discounts\": 0.00,",
											"        \"giftVouchers\": 0.00,",
											"        \"nectarPointsCurrencyValue\": 0.00",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300.00,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10.00,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: setupRequestBody",
											"    }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"sortCode\": \"070116\",",
											"    \"accountNumber\": \"00003536\",",
											"    \"accountOpenedMonth\": 1,",
											"    \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"// apply request body",
											"const applyBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"deviceRiskBlackBox\": \"0400UtAq9oNuGZINf94lis1zt\",",
											"    \"ipAddress\": \"99.99.99.99\"",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        const { loanApplicationReference } = res.json();",
											"",
											"        console.info(\"applicationId = \" + applicationId);",
											"        console.info(\"appRef = \" + loanApplicationReference);",
											"",
											"        pm.environment.set('appRef', loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createQuoteRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // Apply",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('Apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        decisionReadyBody = JSON.stringify({",
											"            \"appRef\": env.get('appRef'),",
											"            \"channel\": \"Web\",",
											"            \"decision\": \"Declined\",",
											"            \"status\": \"DCLI\"",
											"        })",
											"",
											"        decisionReadyConfig = {",
											"            url: websocketHost + decisionReadyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"                'HMACSecret': env.get('HMACSecret'),",
											"                'url': env.get('decison_ready_api_lambda') + '/event/v1/fis' + env.get('decison_ready'),",
											"                'applicationId': env.get('applicationId')",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: decisionReadyBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // Decision ready after 60 sec wait",
											"    (cb) => setTimeout(() => pm.sendRequest(decisionReadyConfig, (err, res) => {",
											"        if (err) throw new Error('Decision Ready call failed');",
											"",
											"        cb(err, res);",
											"    }), 60000)",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"messageId\": \"{{messageId}}\",\n   \"currentStage\": \"Declined\",\n   \"ctaCode\": \"LeaveApplication\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{exit}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{exit}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PLACEHOLDER-CreditServiceError",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_apply = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"messageId\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"applicationId\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"nextStage\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"messageId\",",
											"      \"applicationId\",",
											"      \"nextStage\"",
											"    ]",
											"  }",
											"  ",
											"  pm.collectionVariables.set(\"schema_post_apply\", response_schema_apply);",
											"  ",
											"  // BEGIN UTIL FUNCTIONS",
											"  function _series (tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"  }",
											"  ",
											"  function asyncSeries (tasks, cb = () => {}) {",
											"    return _series(tasks, cb);",
											"  }",
											"  // END UTIL FUNCTIONS",
											"  ",
											"  // getting values from env variables",
											"  const baseURL = pm.environment.get(\"dev3\");",
											"  const b2bPath = pm.environment.get(\"b2b\");",
											"  const b2cPath = pm.environment.get(\"b2c\");",
											"  const sessionPath = pm.environment.get(\"getsession\");",
											"  const setupPath = pm.environment.get(\"setup\");",
											"  const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"  const quotePath = pm.environment.get(\"quote\");",
											"  const applyPath = pm.environment.get(\"apply\")",
											"  ",
											"  // declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"  let getApplicationConfig;",
											"  let validateBankAccountConfig;",
											"  let createApplicationRequestConfig;",
											"  let createQuoteConfig;",
											"  let applyConfig;",
											"  ",
											"  // Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"  const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"  pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"  console.info(\"dateOfBirth = \" + dateOfBirth);",
											"  ",
											"  const env = { get: variable => pm.environment.get(variable) }",
											"",
											"  //Set Random messageId value ",
											"var uuid = require(\"uuid\");",
											"var messageId = uuid.v4();",
											"",
											"pm.environment.set('messageId',messageId);",
											"  ",
											"  // set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"  const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"  pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"  pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"  ",
											"  // set agreedDateTime",
											"  const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"  pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"  ",
											"  // setup request body",
											"  const setupRequestBody = JSON.stringify({",
											"    \"messageId\": \"OTHER_REQUEST\",",
											"    \"customer\": {",
											"      \"customerId\": \"123\",",
											"      \"title\": \"Mr\",",
											"      \"firstName\": \"Benjamin\",",
											"      \"lastName\": \"Shales\",",
											"      \"emailAddress\": \"Benjamin.Shales@gmail.com\",",
											"      \"billingAddress\": {",
											"        \"houseNumber\": \"26\",",
											"        \"line1\": \"Moore Court\",",
											"        \"postCode\": \"HA0 4AF\",",
											"        \"town\": \"Wembley\",",
											"        \"county\": \"London\"",
											"      }",
											"    },",
											"    \"basket\": {",
											"      \"financeAmount\": 310.00, ",
											"      \"grossAmount\": 310.00, ",
											"      \"discounts\": 0.00, ",
											"      \"giftVouchers\": 0.00, ",
											"      \"nectarPointsCurrencyValue\": 0.00 ",
											"    },",
											"    \"others\": {",
											"      \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"      \"origin\": \"argos\", ",
											"      \"ipAddress\": \"99.99.99.99\",",
											"      \"collectionStoreId\": \"12345\", ",
											"      \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"      \"collectionStorePostCode\": \"BT14 6NE\", ",
											"      \"fulfilmentChannel\": \"Collection\", ",
											"      \"creditPlanId\": \"20010\", ",
											"      \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"      \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"      \"purchaseChannel\": \"Web\" ",
											"    },",
											"    \"products\": [",
											"      {",
											"        \"quantity\": 1,",
											"        \"sku\": 1000,",
											"        \"unitPrice\": 300.00,",
											"        \"description\": \"Samsung TV\"",
											"      },",
											"      {",
											"        \"quantity\": 2,",
											"        \"sku\": 2313131323,",
											"        \"unitPrice\": 10.00,",
											"        \"description\": \"AA Batteries\"",
											"      }",
											"    ]",
											"  });",
											"  ",
											"  // setup request config",
											"  const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,",
											"    method: 'POST',",
											"    header: {",
											"      'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"      mode: 'raw',",
											"      raw: setupRequestBody",
											"    }",
											"  };",
											"  ",
											"  // validate bank account request body",
											"  const validateBankAccountRequestBody = JSON.stringify({",
											"     \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"     \"sortCode\" : \"070116\",",
											"     \"accountNumber\": \"00003536\",",
											"     \"accountOpenedMonth\": 1, ",
											"     \"accountOpenedYear\": 2000",
											"  })",
											"  ",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"  ",
											"  // create quote request body",
											"  const createQuoteRequestBody = JSON.stringify({",
											"      \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"  })",
											"",
											"// apply request body",
											"  const applyBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"deviceRiskBlackBox\": \"0400UtAq9oNuGZINf94lis1zt\",",
											"    \"ipAddress\": \"99.99.99.99\"",
											"})",
											"  ",
											"  asyncSeries([",
											"      // application setup",
											"      (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"          if (err) throw new Error(`/setup call failed`);",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId value: \", applicationId);",
											"          pm.environment.set(\"applicationId\", applicationId);",
											"  ",
											"          //Now that we have the application ID, set up the config for the next request",
											"          getApplicationConfig = {",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"              method: 'GET',",
											"              header: {",
											"                  'Content-Type': 'application/json'",
											"              }",
											"          };",
											"  ",
											"          //Always call the callback to progess to the next request.",
											"          cb(err, res);",
											"      }),",
											"  ",
											"      // get application",
											"      (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"          if (err) throw new Error('get application call failed');",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId = \" + applicationId);",
											"  ",
											"          // set validateBankAccountConfig",
											"          validateBankAccountConfig = {",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"              method: 'POST',",
											"              header: {",
											"                  'Content-Type': 'application/json',",
											"              },",
											"              body: {",
											"                  mode: 'raw',",
											"                  raw: validateBankAccountRequestBody",
											"              }",
											"          }",
											"  ",
											"          cb(err, res);",
											"      }),",
											"  ",
											"      // validate bank account",
											"      (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"          if (err) throw new Error('/validate call failed');",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId = \" + applicationId);",
											"  ",
											"          // set createApplicationRequestConfig",
											"          createApplicationRequestConfig = {",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"              method: 'POST',",
											"              header: {",
											"                  'Content-Type': 'application/json',",
											"              },",
											"              body: {",
											"                  mode: 'raw',",
											"                  raw: createApplicationRequestBody",
											"              }",
											"          }",
											"  ",
											"          cb(err, res);",
											"      }),",
											"  ",
											"      // create application",
											"      (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"          if (err) throw new Error('create /applications/applicationId call failed');",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId = \" + applicationId);",
											"  ",
											"          // create quote request config",
											"          createQuoteConfig = {",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"              method: 'POST',",
											"              header: {",
											"                  'Content-Type': 'application/json',",
											"              },",
											"              body: {",
											"                  mode: 'raw',",
											"                  raw: createQuoteRequestBody",
											"              }",
											"          }",
											"  ",
											"          cb(err, res);",
											"      }),",
											"  ",
											"      // create quote",
											"      (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"          if (err) throw new Error('create /quote call failed');",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId = \" + applicationId);",
											"",
											"          applyConfig = {",
											"              url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"              method: 'POST',",
											"              header: {",
											"                  'Content-Type': 'application/json',",
											"              },",
											"              body: {",
											"                  mode: 'raw',",
											"                  raw: applyBody",
											"                }",
											"            }",
											"            cb(err, res);",
											"      }),",
											"",
											"      (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"          if (err) throw new Error('Apply call failed');",
											"          const { applicationId } = res.json();",
											"          console.info(\"applicationId = \" + applicationId);",
											"",
											"          cb(err, res);",
											"      })",
											"",
											"  ], (err, res) => console.info('All pre-requests completed', err, res));",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"messageId\": \"{{messageId}}\",\n   \"currentStage\": \"OfferRejected\",\n   \"ctaCode\": \"LeaveApplication\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{exit}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{exit}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-253-exit-request-invalid-UnhappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"//getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\")",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"checkoutSessionExpiryTime\", expiryTime);",
											"pm.environment.set(\"stockHoldExpiryTime\", expiryTime);",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"// Function to get variables from environment",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"//Set Random messageId value ",
											"var uuid = require(\"uuid\");",
											"var messageId = uuid.v4();",
											"",
											"pm.environment.set('messageId',messageId)",
											"",
											"var response_schema_exit = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"applicationId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"messageId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"redirectUrl\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"required\": [",
											"            \"applicationId\",",
											"            \"messageId\",",
											"            \"redirectUrl\"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.collectionVariables.set(\"response_schema_exit\", response_schema_exit);",
											"",
											"let setupRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"customer\": {",
											"        \"customerId\": env.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": env.get('firstName'),",
											"        \"lastName\": env.get('lastName'),",
											"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": env.get('houseNumber1'),",
											"            \"line1\": env.get('street1'),",
											"            \"postCode\": env.get('postCode1'),",
											"            \"town\": env.get('town1'),",
											"            \"county\": env.get('county1')",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 320,",
											"        \"grossAmount\": 320,",
											"        \"discounts\": 0,",
											"        \"giftVouchers\": 0,",
											"        \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"FrontendTesting/1.00\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"});",
											"",
											"//building the request",
											"const createSetupRequest = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,//building the url path",
											"",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: setupRequestBody",
											"    }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(createSetupRequest, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"                //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"})",
											"",
											"pm.test(\"Exit request invalid\", function () {",
											"        pm.expect(responseJson.errors[0].code).to.eql(\"EXIT_REQUEST_INVALID\");",
											"        pm.expect(responseJson.errors[0].message).to.eql('\"ctaCode\" is required. \"currentStage\" is required. \"messageId\" is required. \"REDACTED\" is not allowed');",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"invalid\": \"invalid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{exit}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{exit}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-253-Application-not-found-UnhappyPath-404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"",
											"pm.environment.set('error404', '5ea3dfaa-5729-4fbc-998d-f8efc8be326a')",
											"",
											"// doing the getApplication call with the same applicationId value, we need the authentication cookie issued by the getApplication endpoint with the same appId value to get passed authentication",
											"",
											"const getApplicationConfig = {",
											"    url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"error404\"),",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json'",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"})",
											"",
											"pm.test(\"Application does not exist error message present\", function () {",
											"    const { message } = responseJson.errors[0];",
											"",
											"    pm.expect(message).to.eql(\"Application does not exist\");",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"messageId\": \"test-message-Id\",\n   \"ctaCode\": \"LeaveApplication\",\n   \"currentStage\": \"Example\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{error404}}{{exit}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{error404}}{{exit}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PING",
					"item": [
						{
							"name": "Validation",
							"item": [
								{
									"name": "Invalid-applicationId_not_found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var response_schema_ping_api_validate ={",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timeout\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"applicationExpiryTime\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"redirectUrl\": {",
													"        \"type\": \"string\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timeout\",",
													"      \"applicationExpiryTime\",",
													"      \"redirectUrl\"",
													"    ]",
													"  }",
													"  ",
													"  pm.collectionVariables.set(\"response_schema_get_ping_api_validate\", response_schema_ping_api_validate);",
													"  ",
													"  //getting values from env variables",
													"  const baseURL = pm.environment.get(\"dev3\");",
													"  const b2cPath = pm.environment.get(\"b2c\");",
													"  const sessionPath = pm.environment.get(\"getsession\");",
													"",
													"const applicationId = \"abcdef01-1278-448a-890c-30bbc708ee52\"",
													"pm.environment.set(\"applicationId\", applicationId)",
													"",
													"  ",
													"  //building the request",
													"  const getApplicationConfig = {",
													"            url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
													"            method: 'GET',",
													"            header: {",
													"                'Content-Type': 'application/json'",
													"            }",
													"        };",
													"  ",
													"  pm.sendRequest(getApplicationConfig, (err, res) => {",
													"  })",
													"  "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Happypath - Verify /PING endpoint  response status code is 404",
													"pm.test('The status code for the /Ping endpoint is 404', ()=>{",
													"    pm.expect(pm.response.code).to.eql(404);",
													"});",
													"",
													"// Unhappypath - Verify /Ping endpoint error description if application does not exist",
													"pm.test(\"Validate 'application does not exist' error description in response body\", function () {",
													"    const { message } = pm.response.json().errors[0];",
													"    pm.expect(message).to.eql(\"Application does not exist\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{ping}}",
											"host": [
												"{{dev3}}{{b2c}}{{getsession}}"
											],
											"path": [
												"{{applicationId}}{{ping}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid-50+_chars",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var response_schema_ping_api_validate ={",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timeout\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"applicationExpiryTime\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"redirectUrl\": {",
													"        \"type\": \"string\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timeout\",",
													"      \"applicationExpiryTime\",",
													"      \"redirectUrl\"",
													"    ]",
													"  }",
													"  ",
													"  pm.collectionVariables.set(\"response_schema_get_ping_api_validate\", response_schema_ping_api_validate);",
													"  ",
													"  //getting values from env variables",
													"  const baseURL = pm.environment.get(\"dev3\");",
													"  const b2cPath = pm.environment.get(\"b2c\");",
													"  const sessionPath = pm.environment.get(\"getsession\");",
													"",
													"const applicationId = \"abcdef01-1278-448a-890c-30bbc708ee52wedwhdiucnsdijiucbwiejncsidufehrbceirjncwiejciwejnbciwejbcwiejnwiejnciwberivwejbrc\"",
													"pm.environment.set(\"applicationId\", applicationId)",
													"",
													"  ",
													"  //building the request",
													"  const getApplicationConfig = {",
													"            url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
													"            method: 'GET',",
													"            header: {",
													"                'Content-Type': 'application/json'",
													"            }",
													"        };",
													"  ",
													"  pm.sendRequest(getApplicationConfig, (err, res) => {",
													"  })",
													"  "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Happypath - Verify /PING endpoint  response status code is 400",
													"pm.test('The status code for the /Ping endpoint is 400', ()=>{",
													"    pm.expect(pm.response.code).to.eql(400);",
													"});",
													"",
													"// Unhappypath - Verify /Ping endpoint error description if application does not exist",
													"pm.test(\"Validate 'Invalid Application Id' error message\", function () {",
													"    const { message } = pm.response.json().errors[0];",
													"    pm.expect(message).to.eql(\"Invalid Application Id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{ping}}",
											"host": [
												"{{dev3}}{{b2c}}{{getsession}}"
											],
											"path": [
												"{{applicationId}}{{ping}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid-space",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var response_schema_ping_api_validate ={",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timeout\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"applicationExpiryTime\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"redirectUrl\": {",
													"        \"type\": \"string\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timeout\",",
													"      \"applicationExpiryTime\",",
													"      \"redirectUrl\"",
													"    ]",
													"  }",
													"  ",
													"  pm.collectionVariables.set(\"response_schema_get_ping_api_validate\", response_schema_ping_api_validate);",
													"  ",
													"  //getting values from env variables",
													"  const baseURL = pm.environment.get(\"dev3\");",
													"  const b2cPath = pm.environment.get(\"b2c\");",
													"  const sessionPath = pm.environment.get(\"getsession\");",
													"",
													"const applicationId = \"abcdef01-1278-448a-89 0c-30bbc708ee52\"",
													"pm.environment.set(\"applicationId\", applicationId)",
													"",
													"  ",
													"  //building the request",
													"  const getApplicationConfig = {",
													"            url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
													"            method: 'GET',",
													"            header: {",
													"                'Content-Type': 'application/json'",
													"            }",
													"        };",
													"  ",
													"  pm.sendRequest(getApplicationConfig, (err, res) => {",
													"  })",
													"  "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Happypath - Verify /PING endpoint  response status code is 400",
													"pm.test('The status code for the /Ping endpoint is 400', ()=>{",
													"    pm.expect(pm.response.code).to.eql(400);",
													"});",
													"",
													"// Unhappypath - Verify /Ping endpoint error description ",
													"pm.test(\"Validate 'Invalid Application Id' error description in response body\", function () {",
													"    const { message } = pm.response.json().errors[0];",
													"    pm.expect(message).to.eql(\"Invalid Application Id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{ping}}",
											"host": [
												"{{dev3}}{{b2c}}{{getsession}}"
											],
											"path": [
												"{{applicationId}}{{ping}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid-special_chars",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var response_schema_ping_api_validate ={",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timeout\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"applicationExpiryTime\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"redirectUrl\": {",
													"        \"type\": \"string\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timeout\",",
													"      \"applicationExpiryTime\",",
													"      \"redirectUrl\"",
													"    ]",
													"  }",
													"  ",
													"  pm.collectionVariables.set(\"response_schema_get_ping_api_validate\", response_schema_ping_api_validate);",
													"  ",
													"  //getting values from env variables",
													"  const baseURL = pm.environment.get(\"dev3\");",
													"  const b2cPath = pm.environment.get(\"b2c\");",
													"  const sessionPath = pm.environment.get(\"getsession\");",
													"",
													"const applicationId = \"*£@!$\"",
													"pm.environment.set(\"applicationId\", applicationId)",
													"",
													"  ",
													"  //building the request",
													"  const getApplicationConfig = {",
													"            url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
													"            method: 'GET',",
													"            header: {",
													"                'Content-Type': 'application/json'",
													"            }",
													"        };",
													"  ",
													"  pm.sendRequest(getApplicationConfig, (err, res) => {",
													"  })",
													"  "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Happypath - Verify /PING endpoint  response status code is 400",
													"pm.test('The status code for the /Ping endpoint is 400', ()=>{",
													"    pm.expect(pm.response.code).to.eql(400);",
													"});",
													"",
													"// Unhappypath - Verify /Ping endpoint error description ",
													"pm.test(\"Validate 'Invalid Application Id' error description in response body\", function () {",
													"    const { message } = pm.response.json().errors[0];",
													"    pm.expect(message).to.eql(\"Invalid Application Id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{ping}}",
											"host": [
												"{{dev3}}{{b2c}}{{getsession}}"
											],
											"path": [
												"{{applicationId}}{{ping}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "valid-leading0",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var response_schema_ping_api_validate ={",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timeout\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"applicationExpiryTime\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"redirectUrl\": {",
													"        \"type\": \"string\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timeout\",",
													"      \"applicationExpiryTime\",",
													"      \"redirectUrl\"",
													"    ]",
													"  }",
													"  ",
													"  pm.collectionVariables.set(\"response_schema_get_ping_api_validate\", response_schema_ping_api_validate);",
													"  ",
													"  //getting values from env variables",
													"  const baseURL = pm.environment.get(\"dev3\");",
													"  const b2cPath = pm.environment.get(\"b2c\");",
													"  const sessionPath = pm.environment.get(\"getsession\");",
													"",
													"const applicationId = \"012382\"",
													"pm.environment.set(\"applicationId\", applicationId)",
													"",
													"  ",
													"  //building the request",
													"  const getApplicationConfig = {",
													"            url: baseURL + b2cPath + sessionPath + \"/\" + applicationId,",
													"            method: 'GET',",
													"            header: {",
													"                'Content-Type': 'application/json'",
													"            }",
													"        };",
													"  ",
													"  pm.sendRequest(getApplicationConfig, (err, res) => {",
													"  })",
													"  "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Happypath - Verify /PING endpoint  response status code is 400",
													"pm.test('The status code for the /Ping endpoint is 400', ()=>{",
													"    pm.expect(pm.response.code).to.eql(400);",
													"});",
													"",
													"// Unhappypath - Verify /Ping endpoint error description ",
													"pm.test(\"Validate 'Invalid Application Id' error description in response body\", function () {",
													"    const { message } = pm.response.json().errors[0];",
													"    pm.expect(message).to.eql(\"Invalid Application Id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{ping}}",
											"host": [
												"{{dev3}}{{b2c}}{{getsession}}"
											],
											"path": [
												"{{applicationId}}{{ping}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "FPP-254-PingAPI-UnHappyPath-error404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_ping_api_validate ={",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"timeout\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"applicationExpiryTime\": {",
											"        \"type\": \"string\"",
											"      },",
											"      \"redirectUrl\": {",
											"        \"type\": \"string\"",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"timeout\",",
											"      \"applicationExpiryTime\",",
											"      \"redirectUrl\"",
											"    ]",
											"  }",
											"  ",
											"  pm.collectionVariables.set(\"response_schema_get_ping_api_validate\", response_schema_ping_api_validate);",
											"  ",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"",
											"pm.environment.set('error404', '5ea3dfaa-5729-4fbc-998d-f8efc8be326a')",
											"",
											"// doing the getApplication call with the same applicationId value, we need the authentication cookie issued by the getApplication endpoint with the same appId value to get passed authentication",
											"",
											"const getApplicationConfig = {",
											"    url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"error404\"),",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json'",
											"    }",
											"};",
											"",
											"asyncSeries([",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Happypath - Verify /PING endpoint  response status code is 404",
											"pm.test('The status code for the /Ping endpoint is 404', ()=>{",
											"    pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"// Unhappypath - Verify /Ping endpoint error description if application does not exist",
											"pm.test(\"Validate 'application does not exist' error description in response body\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"Application does not exist\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{error404}}{{ping}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{error404}}{{ping}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-254-PingAPI-HappyPath-Timeout-False",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"var response_schema_ping_api_validate ={",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"timeout\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"applicationExpiryTime\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"redirectUrl\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"timeout\",",
											"    \"applicationExpiryTime\",",
											"    \"redirectUrl\"",
											"  ]",
											"}",
											"",
											"pm.collectionVariables.set(\"response_schema_get_ping_api_validate\", response_schema_ping_api_validate);",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const tenMinutesInMilliseconds = 600000;",
											"const twoMinutesInMilliseconds = 120000;",
											"const checkoutExpiryTime = new Date(Date.now() + tenMinutesInMilliseconds);",
											"const expectedApplicationExpiryTimePreISO = new Date(checkoutExpiryTime - twoMinutesInMilliseconds).setMilliseconds(0);",
											"const expectedApplicationExpiryTime = new Date(expectedApplicationExpiryTimePreISO).toISOString();",
											"console.info(`Checkout Expiry:${checkoutExpiryTime}`);",
											"console.info(`Expected Application Expiry:${expectedApplicationExpiryTime}`)",
											"pm.environment.set(\"checkoutSessionExpiryTime\", checkoutExpiryTime);",
											"pm.environment.set(\"expectedApplicationExpiryTime\", expectedApplicationExpiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get('houseNumber1'),",
											"      \"line1\": env.get('street1'),",
											"      \"postCode\": env.get('postCode1'),",
											"      \"town\": env.get('town1'),",
											"      \"county\": env.get('county1')",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const { timeout, applicationExpiryTime } = pm.response.json();",
											"",
											"// Happypath - Verify /PING endpoint  response status code is 200",
											"pm.test('The status code for the /Ping endpoint is 200', ()=>{",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"// Happypath - Verify timeout is false",
											"pm.test(\"Timeout value is false\", function () {",
											"    pm.expect(timeout).to.eql(false);",
											"});",
											"",
											"// Happypath - Verify applicationExpiryTime is 120 seconds less than checkoutExpiry",
											"pm.test(\"applicationExpiryTime is 120 seconds less than checkoutExpiry\", function () {",
											"    const expectedApplicationExpiry =  pm.environment.get(\"expectedApplicationExpiryTime\");",
											"    pm.expect(applicationExpiryTime).to.eql(expectedApplicationExpiry);",
											"",
											"    console.info('checkoutExpiryTime from request:' + pm.environment.get(\"checkoutSessionExpiryTime\") + '\\n' + 'applicationExpiry from request:' + applicationExpiryTime);",
											"})",
											"",
											"// Verify applicationExpiry is a string",
											"pm.test(\"applicationExpiryTime is of type string\", function () {",
											"    pm.expect(typeof applicationExpiryTime === \"string\").to.be.true;",
											"})",
											"",
											"// Verify timeout is a boolean",
											"pm.test(\"timeout is of type string\", function () {",
											"    pm.expect(typeof timeout === \"boolean\").to.be.true;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{ping}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{ping}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-254-PingAPI-HappyPath-Timeout-True",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Happypath - Verify /PING endpoint  response status code is 200",
											"pm.test('The status code for the /Ping endpoint is 200', ()=>{",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"// Happypath - Verify timeout is true",
											"pm.test(\"Timeout value is true\", function () {",
											"    const { timeout } = pm.response.json();",
											"    pm.expect(timeout).to.eql(true);",
											"});",
											"",
											"// Happypath - Verify applicationExpiryTime is 120 seconds less than checkoutExpiry",
											"pm.test(\"applicationExpiryTime is 120 seconds less than checkoutExpiry\", function () {",
											"    const { applicationExpiryTime } = pm.response.json();",
											"    expectedApplicationExpiry =  pm.environment.get(\"expectedApplicationExpiryTime\");",
											"    pm.expect(applicationExpiryTime).to.eql(expectedApplicationExpiry);",
											"    console.info(`checkoutExpiryTime from request:${pm.environment.get(\"checkoutSessionExpiryTime\")}`);",
											"    console.info(`applicationExpiry from response:${applicationExpiryTime}`);",
											"});",
											"",
											"// Check that redirectUrl is present and contains applicationId ",
											"pm.test(\"The redirectUrl is present and contains applicationId\", function () {",
											"    pm.response.json().hasOwnProperty(\"timeout\")",
											"    const { redirectUrl } = pm.response.json();",
											"    pm.expect(redirectUrl).to.eql(`https://www.argos.co.uk/?code=timed_out&token=${pm.environment.get(\"applicationId\")}`)",
											"});",
											"",
											"// Verify applicationExpiry is a string",
											"pm.test(\"applicationExpiryTime is of type string\", function () {",
											"    const { applicationExpiryTime } = pm.response.json();",
											"    pm.expect(typeof applicationExpiryTime === \"string\").to.be.true;",
											"});",
											"",
											"// Verify redirectUrl is a string",
											"pm.test(\"redirectUrl is of type string\", function () {",
											"    const { redirectUrl } = pm.response.json();",
											"    pm.expect(typeof redirectUrl === \"string\").to.be.true;",
											"});",
											"",
											"// Verify timeout is a boolean",
											"pm.test(\"Timeout is of type boolean\", function () {",
											"    const { timeout } = pm.response.json();",
											"    pm.expect(typeof timeout === \"boolean\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"var response_schema_ping_api_validate ={",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"timeout\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"applicationExpiryTime\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"redirectUrl\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"timeout\",",
											"    \"applicationExpiryTime\",",
											"    \"redirectUrl\"",
											"  ]",
											"}",
											"",
											"pm.collectionVariables.set(\"response_schema_get_ping_api_validate\", response_schema_ping_api_validate);",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"const tenMinutesInMilliseconds = 600000;",
											"const twoMinutesInMilliseconds = 120000;",
											"const checkoutExpiryTime = new Date(Date.now() - (tenMinutesInMilliseconds));",
											"const expectedApplicationExpiryTimePreISO = new Date(checkoutExpiryTime - twoMinutesInMilliseconds).setMilliseconds(0);",
											"const expectedApplicationExpiryTime = new Date(expectedApplicationExpiryTimePreISO).toISOString();",
											"console.info(`Checkout Expiry:${checkoutExpiryTime}`);",
											"console.info(`Expected Application Expiry:${expectedApplicationExpiryTime}`)",
											"pm.environment.set(\"checkoutSessionExpiryTime\", checkoutExpiryTime);",
											"pm.environment.set(\"expectedApplicationExpiryTime\", expectedApplicationExpiryTime);",
											"",
											"// set agreedDateTime",
											"const agreedDateTime = new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString();",
											"pm.environment.set(\"agreedDateTime\", agreedDateTime);",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get('houseNumber1'),",
											"      \"line1\": env.get('street1'),",
											"      \"postCode\": env.get('postCode1'),",
											"      \"town\": env.get('town1'),",
											"      \"county\": env.get('county1')",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": \"126f2a5e-5f3c-4851-8346-6eaa0f7543zs3\",",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{ping}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{ping}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DECISON_READY",
					"item": [
						{
							"name": "FPP-479-No-authorization-header-UnhappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_decison_ready = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"httpStatus\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"code\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"code\",",
											"                        \"description\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"warnings\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"httpStatus\",",
											"        \"status\",",
											"        \"name\",",
											"        \"path\",",
											"        \"errors\",",
											"        \"warnings\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_decison_ready\", response_schema_decison_ready);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let applyConfig;",
											"",
											"// create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"//Set Random messageId value ",
											"var uuid = require(\"uuid\");",
											"var messageId = uuid.v4();",
											"",
											"pm.environment.set('messageId',messageId)",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\":  `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\"),",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": env.get('messageId'),",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId')",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox'),",
											"    \"ipAddress\": \"99.99.99.99\"",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // get 'Set-Cookie' header & set it as 'getApplicationCookies'",
											"        pm.environment.set('getApplicationCookies', res.headers.get(\"Set-Cookie\"));",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // loan /apply call",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Unhappypath - Verify '/decisionready' response code is 400",
											"pm.test(\"Verify /decisionready endpoint status code is 400\", ()=> {",
											"    pm.expect(pm.response.code).to.eq(400);",
											"});",
											"",
											"// Unhappypath - Verify '/decisionready' response error'",
											"pm.test(\"Verify '/decisionready' endpoint error message\", ()=> {",
											"    pm.expect(pm.response.text()).to.contain(\"HMACSecret header not set\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "url",
										"value": "{{decison_ready_api_lambda}}/event/v1/fis{{decison_ready}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"appRef\": \"{{appRef}}\",\n    \"channel\": \"Web\",\n    \"decision\": \"Approved\",\n    \"status\": \"AOG\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{websocket_host}}{{decison_ready}}",
									"host": [
										"{{websocket_host}}{{decison_ready}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-479-invalid-HMAC-header-UnhappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var response_schema_decison_ready = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"httpStatus\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"code\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"code\",",
											"                        \"description\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"warnings\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"httpStatus\",",
											"        \"status\",",
											"        \"name\",",
											"        \"path\",",
											"        \"errors\",",
											"        \"warnings\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_decison_ready\", response_schema_decison_ready);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"      return cb(null, results);",
											"  }",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"      return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"  tasks[currOperation]((err, res) => {",
											"      if (err) {",
											"          return cb(err);",
											"      }",
											"      results.push(res);",
											"      return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"",
											"// declare configs which require 'applicationId' to be available. These will be defined when the 'applicationId' is available",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let applyConfig;",
											"",
											"// create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = (new Date(new Date() - (10190 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"//Set Random messageId value ",
											"var uuid = require(\"uuid\");",
											"var messageId = uuid.v4();",
											"",
											"pm.environment.set('messageId',messageId)",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\":  `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\"),",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"   \"messageId\": env.get('messageId'),",
											"   \"sortCode\" : \"070116\",",
											"   \"accountNumber\": \"00003536\",",
											"   \"accountOpenedMonth\": 1, ",
											"   \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId')",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox'),",
											"    \"ipAddress\": \"99.99.99.99\"",
											"})",
											"",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // get 'Set-Cookie' header & set it as 'getApplicationCookies'",
											"        pm.environment.set('getApplicationCookies', res.headers.get(\"Set-Cookie\"));",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // loan /apply call",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Unhappypath - Verify '/decisionready' response code is 200",
											"pm.test(\"Verify /decisionready endpoint status code is 200\", ()=> {",
											"    pm.expect(pm.response.code).to.eq(200);",
											"});",
											"",
											"// Unhappypath - Verify '/decisionready' response error'",
											"pm.test(\"Verify '/decisionready' endpoint error message\", ()=> {",
											"    const { code, message } = pm.response.json().errors[0];",
											"",
											"    pm.expect(code).to.eq('INVALID_HMAC');",
											"    pm.expect(message).to.eq(\"Invalid HMAC\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "url",
										"value": "{{decison_ready_api_lambda}}/event/v1/fis{{decison_ready}}",
										"type": "text"
									},
									{
										"key": "HMACSecret",
										"value": "abc",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"appRef\": \"{{appRef}}\",\n    \"channel\": \"Web\",\n    \"decision\": \"Approved\",\n    \"status\": \"AOG\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{websocket_host}}{{decison_ready}}",
									"host": [
										"{{websocket_host}}{{decison_ready}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "IDIQ",
					"item": [
						{
							"name": "FPP-480-identity-questions-HappyPath [MOCKED]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const jsonData = pm.response.json();",
											"",
											"const questionOne = jsonData.identityQuestions[0];",
											"const questionTwo = jsonData.identityQuestions[1];",
											"",
											"// Happypath - Verify /identity/questions request response status code is 200",
											"pm.test(\"/identity/questions status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Happypath - Verify identity questions is an array of size two (2)",
											"pm.test(\"Verify identity questions is an array of size two (2)\", ()=> {",
											"    pm.expect(jsonData.identityQuestions).to.be.an('array');",
											"    pm.expect(jsonData.identityQuestions.length).to.equal(2);",
											"});",
											"",
											"// Happypath - Verity response has property `questionId`",
											"pm.test(\"Verity response has property `questionId`\", ()=> {    ",
											"    // QuestionOne",
											"    pm.expect(questionOne['questionId']).to.be.a('string');",
											"    pm.expect(questionOne['questionId'].length).to.be.at.least(1);",
											"",
											"    // QuestionTwo",
											"    pm.expect(questionTwo['questionId']).to.be.a('string');",
											"    pm.expect(questionTwo['questionId'].length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verity response has property `text`",
											"pm.test(\"Verity response has property `text`\", ()=> {    ",
											"    // QuestionOne",
											"    pm.expect(questionOne['text']).to.be.a('string');",
											"    pm.expect(questionOne['text'].length).to.be.at.least(1);",
											"",
											"    // QuestionTwo",
											"    pm.expect(questionTwo['text']).to.be.a('string');",
											"    pm.expect(questionTwo['text'].length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verity response has property `tooltip`",
											"pm.test(\"Verity response has property `tooltip`\", ()=> {    ",
											"    // QuestionOne",
											"    pm.expect(questionOne['tooltip']).to.be.a('string');",
											"    pm.expect(questionOne['tooltip'].length).to.be.at.least(1);",
											"",
											"    // QuestionTwo",
											"    pm.expect(questionTwo['tooltip']).to.be.a('string');",
											"    pm.expect(questionTwo['tooltip'].length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verity response has property `identifier`",
											"pm.test(\"Verity response has property `identifier`\", ()=> {    ",
											"    // QuestionOne",
											"    pm.expect(questionOne['answerFormat']['identifier']).to.be.a('string');",
											"    pm.expect(questionOne['answerFormat']['identifier'].length).to.be.at.least(1);",
											"",
											"    // QuestionTwo",
											"    pm.expect(questionTwo['answerFormat']['identifier']).to.be.a('string');",
											"    pm.expect(questionTwo['answerFormat']['identifier'].length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verity response has property `fieldType`",
											"pm.test(\"Verity response has property `fieldType`\", ()=> {    ",
											"    // QuestionOne",
											"    pm.expect(questionOne['answerFormat']['fieldType']).to.be.a('string');",
											"    pm.expect(questionOne['answerFormat']['fieldType'].length).to.be.at.least(1);",
											"",
											"    // QuestionTwo",
											"    pm.expect(questionTwo['answerFormat']['fieldType']).to.be.a('string');",
											"    pm.expect(questionTwo['answerFormat']['fieldType'].length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verity response has property `answerList`",
											"pm.test(\"Verity response has property `answerList`\", ()=> {    ",
											"    // QuestionOne",
											"    pm.expect(questionOne['answerFormat']['answerList']).to.be.an('array');",
											"    pm.expect(questionOne['answerFormat']['answerList'].length).to.be.at.least(1);",
											"",
											"    // QuestionTwo",
											"    pm.expect(questionTwo['answerFormat']['answerList']).to.be.an('array');",
											"    pm.expect(questionTwo['answerFormat']['answerList'].length).to.be.at.least(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_get_ID_questions = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"messageId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"applicationId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"identityQuestions\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"questionId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"text\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"tooltip\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"answerFormat\": {",
											"                            \"type\": \"object\",",
											"                            \"properties\": {",
											"                                \"identifier\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"fieldType\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"answerList\": {",
											"                                    \"type\": \"array\",",
											"                                    \"items\": [",
											"                                        {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        {",
											"                                            \"type\": \"string\"",
											"                                        }",
											"                                    ]",
											"                                }",
											"                            },",
											"                            \"required\": [",
											"                                \"identifier\",",
											"                                \"fieldType\",",
											"                                \"answerList\"",
											"                            ]",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"questionId\",",
											"                        \"text\",",
											"                        \"tooltip\",",
											"                        \"answerFormat\"",
											"                    ]",
											"                },",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"questionId\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"text\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"tooltip\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"answerFormat\": {",
											"                            \"type\": \"object\",",
											"                            \"properties\": {",
											"                                \"identifier\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"fieldType\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"answerList\": {",
											"                                    \"type\": \"array\",",
											"                                    \"items\": [",
											"                                        {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        {",
											"                                            \"type\": \"string\"",
											"                                        }",
											"                                    ]",
											"                                }",
											"                            },",
											"                            \"required\": [",
											"                                \"identifier\",",
											"                                \"fieldType\",",
											"                                \"answerList\"",
											"                            ]",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"questionId\",",
											"                        \"text\",",
											"                        \"tooltip\",",
											"                        \"answerFormat\"",
											"                    ]",
											"                }",
											"            ]",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"messageId\",",
											"        \"applicationId\",",
											"        \"identityQuestions\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_IDquestions\", response_schema_get_ID_questions);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
											"const messagesPath = pm.environment.get(\"messages_path\");",
											"const websocketHost = pm.environment.get(\"websocket_host\");",
											"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
											"",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let applyConfig;",
											"let getAppRefConfig;",
											"let decisionReadyConfig;",
											"",
											"// Create Date of Birth (27 years, 10 months, 23 days i.e. 880329600 secs)",
											"const dateOfBirth = new Date(Date.now() - (880329600 * 1000)).toISOString().split('T')[0];",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"// set timeout",
											"const timeout = pm.environment.name.includes('MOCKS') ? 1000 : 60000;",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"    \"messageId\": \"OTHER_REQUEST\",",
											"    \"customer\": {",
											"        \"customerId\": env.get('customerId'),",
											"        \"title\": \"Miss\",",
											"        \"firstName\": env.get('firstName'),",
											"        \"lastName\": env.get('lastName'),",
											"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": env.get(\"houseNumber1\"),",
											"            \"line1\": env.get(\"street1\"),",
											"            \"postCode\": env.get(\"postCode1\"),",
											"            \"town\": env.get(\"town1\"),",
											"            \"county\": env.get(\"county1\"),",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 310.00,",
											"        \"grossAmount\": 310.00,",
											"        \"discounts\": 0.00,",
											"        \"giftVouchers\": 0.00,",
											"        \"nectarPointsCurrencyValue\": 0.00",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300.00,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10.00,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: setupRequestBody",
											"    }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"sortCode\": \"070116\",",
											"    \"accountNumber\": \"00003536\",",
											"    \"accountOpenedMonth\": 1,",
											"    \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"1\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox')",
											"})",
											"",
											"// Requests series (application setup -> get application -> validate bank account -> create application -> create quote -> apply for loan -> (wait max 60secs) -> decison ready webhook -> get IDIQ)",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // apply for loan",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set decisionReadyConfig ",
											"        decisionReadyConfig = {",
											"            url: websocketHost + decisionReadyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
											"                'Content-Type': 'application/json',",
											"                'connection': 'keep-alive',",
											"                'HMACSecret': env.get('HMACSecret'),",
											"                'applicationId': env.get(\"applicationId\")",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    'appRef': env.get(\"appRef\"),",
											"                    'channel': \"Web\",",
											"                    'decision': \"Approved\",",
											"                    'status': \"PIDIQ\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // wait here for origin to do its thing",
											"    (cb) => setTimeout(function () {",
											"        pm.sendRequest(decisionReadyConfig, (err, res) => {",
											"            if (err) throw new Error('decision ready call failed');",
											"",
											"            cb(err, res);",
											"        })",
											"    }, timeout)",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followOriginalHttpMethod": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{IDIQ_questions}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{IDIQ_questions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-2609-get-idiq-validation-data-driven",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"/* BEGIN UTILITY FUNCTIONS */",
											"",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"    return _series(tasks, cb);",
											"}",
											"",
											"/* END UTILITY FUNITONS */",
											"",
											"",
											"",
											"/* PRE-REQUEST SETUP */",
											"",
											"// We need to get a session cookie from the getApplicaiton endpoint to run our tests",
											"// so before we do anything else, we Setup a dummy application and get it",
											"// PostMan automatically save the response cookie for us so we don't need to do any post processing",
											"",
											"// Get URL components",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"",
											"// Generate expiry time",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"",
											"// Setup dummy application",
											"const setupRequestBody = {",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"customer\": {",
											"        \"customerId\": pm.environment.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": pm.environment.get('firstName'),",
											"        \"lastName\": pm.environment.get('lastName'),",
											"        \"emailAddress\":  `${this.firstName}.${this.lastName}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": pm.environment.get(\"houseNumber1\"),",
											"            \"line1\": pm.environment.get(\"street1\"),",
											"            \"postCode\": pm.environment.get(\"postCode1\"),",
											"            \"town\": pm.environment.get(\"town1\"),",
											"            \"county\": pm.environment.get(\"county1\"),",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 320,",
											"        \"grossAmount\": 320,",
											"        \"discounts\": 0,",
											"        \"giftVouchers\": 0,",
											"        \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"FrontendTesting/1.00\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": expiryTime,",
											"        \"stockHoldExpiryTime\": expiryTime,",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"};",
											"",
											"// Setup request config",
											"const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath, //building the url path",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(setupRequestBody)",
											"    }",
											"};",
											"",
											"// Get dummy application and auth cookie",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"",
											"        const { applicationId } = res.json();",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"        ",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"        ",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"    ",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"    }),",
											"    ",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											"",
											"/* END PRE-REQUEST SETUP */",
											"",
											"",
											"",
											"// Now we can build the request body for our tests using the test iteration data file",
											"",
											"// Array of request keys",
											"const requestKeys = [",
											"    'messageId',",
											"];",
											"",
											"const body = {};",
											"",
											"// Assign values to request body",
											"for( let i in requestKeys){",
											"    const key = requestKeys[i];",
											"    const value = pm.iterationData.get(key);",
											"    if (value !== undefined) {",
											"        body[key] = value;",
											"    }",
											"}",
											"",
											"// Set in request",
											"pm.environment.set('req_body', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(pm.iterationData.get(\"testName\"), ()=> {",
											"    console.info(pm.response.json());",
											"",
											"    const expectedErrorMessage = pm.iterationData.get(\"expectedErrorMessage\");",
											"    const { message: actualErrorMessage } = pm.response.json().errors[0];",
											"    pm.expect(actualErrorMessage).to.eq(expectedErrorMessage);",
											"",
											"    const expectedErrorName = pm.iterationData.get(\"expectedErrorName\");",
											"    const actualErrorName = pm.response.json().name;",
											"    pm.expect(actualErrorName).to.eq(expectedErrorName);",
											"    ",
											"    const expectedResponseCode = pm.iterationData.get(\"expectedResponseCode\");",
											"    const actualResponseCode = pm.response.code;",
											"    pm.expect(actualResponseCode).to.eq(expectedResponseCode);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{req_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{IDIQ_questions}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{IDIQ_questions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-2609-IDIQ-403-missing-auth-cookie-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Unhappypath - Verify error code 403 from /identity/questions when auth cookie is missing",
											"pm.test(\"/identity/questions status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Unhappypath - Verify response is empty when auth cookie is missing",
											"pm.test(\"Verify response is empty when auth cookie is missing\", function () {",
											"    pm.expect(pm.response.text()).to.be.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}{{error404}}{{IDIQ_questions}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}{{error404}}{{IDIQ_questions}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-480-invalid-application-state-403-error-UnHappyPath",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const { messageId, applicationId, nextStage, declinedMessageCode } = pm.response.json();",
											"",
											"// Unhappypath - Verify /identity/questions request response status code is 403",
											"pm.test(\"/identity/questions status code is 403\", ()=> {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Unhappypath - Verify error description if application state is invalid",
											"pm.test(\"Validate 'invalid Application State' error description in response body'\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"Invalid Application State\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_get_ID_questions = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"messageId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"applicationId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"nextStage\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"declinedMessageCode\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"messageId\",",
											"        \"applicationId\",",
											"        \"nextStage\",",
											"        \"declinedMessageCode\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_IDquestions\", response_schema_get_ID_questions);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"    return cb(null, results);",
											"  }",
											"",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"    return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"",
											"  tasks[currOperation]((err, res) => {",
											"    if (err) {",
											"      return cb(err);",
											"    }",
											"",
											"    results.push(res);",
											"    return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
											"const messagesPath = pm.environment.get(\"messages_path\");",
											"const IDIQQuestionsPath = pm.environment.get(\"IDIQ_questions\");",
											"const websocketHost = pm.environment.get(\"websocket_host\");",
											"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
											"",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let openWebsocketConnectionConfig;",
											"let applyConfig;",
											"let getAppRefConfig;",
											"let decisionReadyConfig;",
											"let IDIQQuestionsConfig;",
											"",
											"// Create Date of Birth (27 years, 10 months, 23 days i.e. 880329600 secs)",
											"const dateOfBirth = new Date(Date.now() - (880329600 * 1000)).toISOString().split('T')[0];",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\"),",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00,",
											"    \"grossAmount\": 310.00,",
											"    \"discounts\": 0.00,",
											"    \"giftVouchers\": 0.00,",
											"    \"nectarPointsCurrencyValue\": 0.00",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
											"    \"origin\": \"argos\",",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\",",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"    \"collectionStorePostCode\": \"BT14 6NE\",",
											"    \"fulfilmentChannel\": \"Collection\",",
											"    \"creditPlanId\": \"20010\",",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\"",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"sortCode\": \"070116\",",
											"  \"accountNumber\": \"00003536\",",
											"  \"accountOpenedMonth\": 1,",
											"  \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": dateOfBirth,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"1\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox')",
											"})",
											"",
											"// Requests series (application setup -> get application -> validate bank account -> create application -> create quote -> apply for loan -> (wait max 60secs) -> decison ready webhook -> get IDIQ)",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // apply for loan",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set decisionReadyConfig ",
											"        decisionReadyConfig = {",
											"            url: websocketHost + decisionReadyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
											"                'Content-Type': 'application/json',",
											"                'connection': 'keep-alive',",
											"                'HMACSecret': env.get('HMACSecret'),",
											"                'applicationId': env.get(\"applicationId\")",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    'appRef': env.get(\"appRef\"),",
											"                    'channel': \"Web\",",
											"                    'decision': \"Approved\",",
											"                    'status': \"PIDIQ\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // wait here for origin to do its thing",
											"    (cb) => setTimeout(function () {",
											"        pm.sendRequest(decisionReadyConfig, (err, res) => {",
											"            if (err) throw new Error('decision ready call failed');",
											"",
											"            // set 'IDIQ questions' config",
											"            IDIQQuestionsConfig = {",
											"                url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQQuestionsPath,",
											"                method: 'POST',",
											"                header: {",
											"                    'Content-Type': 'application/json',",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                    })",
											"                }",
											"            }",
											"",
											"            cb(err, res);",
											"        })",
											"    }, 60000),",
											"",
											"    // make IDIQ call",
											"    (cb) => pm.sendRequest(IDIQQuestionsConfig, (err, res) => {",
											"        if (err) throw new Error('create /identity/questions call failed');",
											"        const { applicationId } = res.json();",
											"",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followOriginalHttpMethod": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{IDIQ_questions}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{IDIQ_questions}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST_IDENTITY_ANSWERS",
					"item": [
						{
							"name": "FPP-2601-identity-answers-validation-data-driven",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"/* BEGIN UTILITY FUNCTIONS */",
											"",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"    return _series(tasks, cb);",
											"}",
											"",
											"/* END UTILITY FUNITONS */",
											"",
											"",
											"",
											"/* PRE-REQUEST SETUP */",
											"",
											"// We need to get a session cookie from the getApplicaiton endpoint to run our tests",
											"// so before we do anything else, we Setup a dummy application and get it",
											"// PostMan automatically save the response cookie for us so we don't need to do any post processing",
											"",
											"// Get URL components",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"",
											"// Generate expiry time",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"",
											"// Setup dummy application",
											"const setupRequestBody = {",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"customer\": {",
											"        \"customerId\": pm.environment.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": pm.environment.get('firstName'),",
											"        \"lastName\": pm.environment.get('lastName'),",
											"        \"emailAddress\":  `${this.firstName}.${this.lastName}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": pm.environment.get(\"houseNumber1\"),",
											"            \"line1\": pm.environment.get(\"street1\"),",
											"            \"postCode\": pm.environment.get(\"postCode1\"),",
											"            \"town\": pm.environment.get(\"town1\"),",
											"            \"county\": pm.environment.get(\"county1\"),",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 320,",
											"        \"grossAmount\": 320,",
											"        \"discounts\": 0,",
											"        \"giftVouchers\": 0,",
											"        \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"FrontendTesting/1.00\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": expiryTime,",
											"        \"stockHoldExpiryTime\": expiryTime,",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"};",
											"",
											"// Setup request config",
											"const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath, //building the url path",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(setupRequestBody)",
											"    }",
											"};",
											"",
											"// Get dummy application and auth cookie",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"",
											"        const { applicationId } = res.json();",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"        ",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"        ",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"    ",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"    }),",
											"    ",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											"",
											"/* END PRE-REQUEST SETUP */",
											"",
											"",
											"",
											"// Now we can build the request body for our tests using the test iteration data file",
											"",
											"// Array of request keys",
											"const requestKeys = [",
											"    'messageId',",
											"    'identityAnswers',",
											"];",
											"",
											"const body = {};",
											"",
											"// Assign values to request body",
											"for( let i in requestKeys){",
											"    const key = requestKeys[i];",
											"    const value = pm.iterationData.get(key);",
											"    if (value !== undefined) {",
											"        body[key] = value;",
											"    }",
											"}",
											"",
											"// Set in request",
											"pm.environment.set('req_body', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(pm.iterationData.get(\"testName\"), ()=> {",
											"    console.info(pm.response.json());",
											"",
											"    const expectedErrorMessage = pm.iterationData.get(\"expectedErrorMessage\");",
											"    const { message: actualErrorMessage } = pm.response.json().errors[0];",
											"    pm.expect(actualErrorMessage).to.eq(expectedErrorMessage);",
											"",
											"    const expectedErrorName = pm.iterationData.get(\"expectedErrorName\");",
											"    const actualErrorName = pm.response.json().name;",
											"    pm.expect(actualErrorName).to.eq(expectedErrorName);",
											"    ",
											"    const expectedResponseCode = pm.iterationData.get(\"expectedResponseCode\");",
											"    const actualResponseCode = pm.response.code;",
											"    pm.expect(actualResponseCode).to.eq(expectedResponseCode);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{req_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{IDIQ_answers}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{IDIQ_answers}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-2601-identity-answers-missing-auth-cookie-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Unhappypath - Verify error code 403 from /identity/answers when auth cookie is missing",
											"pm.test(\"/identity/answers status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Unhappypath - Verify response is empty when auth cookie is missing",
											"pm.test(\"Verify response is empty when auth cookie is missing\", function () {",
											"    pm.expect(pm.response.text()).to.be.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",\n    \"identityAnswers\": [\n        {\n            \"questionId\": \"Q00008\",\n            \"value\": \"NONE OF THE ABOVE / DOES NOT APPLY\"\n        },\n        {\n            \"questionId\": \"Q00009\",\n            \"value\": \"NONE OF THE ABOVE / DOES NOT APPLY\"\n        }\n    ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{IDIQ_answers}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{IDIQ_answers}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-481-correct-answers-HappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_post_ID_answers = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"messageId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"applicationId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"nextStage\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"messageId\",",
											"    \"applicationId\",",
											"    \"nextStage\"",
											"  ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_ID_answers\", response_schema_post_ID_answers);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"    return cb(null, results);",
											"  }",
											"",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"    return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"",
											"  tasks[currOperation]((err, res) => {",
											"    if (err) {",
											"      return cb(err);",
											"    }",
											"",
											"    results.push(res);",
											"    return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
											"const messagesPath = pm.environment.get(\"messages_path\");",
											"const IDIQQuestionsPath = pm.environment.get(\"IDIQ_questions\");",
											"const websocketHost = pm.environment.get(\"websocket_host\");",
											"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
											"",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let openWebsocketConnectionConfig;",
											"let applyConfig;",
											"let getAppRefConfig;",
											"let decisionReadyConfig;",
											"let getMessagesConfig;",
											"let closeWebsocketConnectionConfig;",
											"let IDIQQuestionsConfig;",
											"",
											"// Create Date of Birth (27 years, 10 months, 23 days i.e. 880329600 secs)",
											"const dateOfBirth = new Date(Date.now() - (880329600 * 1000)).toISOString().split('T')[0];",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\"),",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00,",
											"    \"grossAmount\": 310.00,",
											"    \"discounts\": 0.00,",
											"    \"giftVouchers\": 0.00,",
											"    \"nectarPointsCurrencyValue\": 0.00",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
											"    \"origin\": \"argos\",",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\",",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"    \"collectionStorePostCode\": \"BT14 6NE\",",
											"    \"fulfilmentChannel\": \"Collection\",",
											"    \"creditPlanId\": \"20010\",",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\"",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"sortCode\": \"070116\",",
											"  \"accountNumber\": \"00003536\",",
											"  \"accountOpenedMonth\": 1,",
											"  \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"  \"messageId\": env.get('messageId'),",
											"  \"termsAndConditions\": [",
											"    {",
											"      \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    },",
											"    {",
											"      \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    },",
											"    {",
											"      \"tsAndCsType\": \"MarketingComms\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    }",
											"  ],",
											"  \"customer\": {",
											"    \"additionalNeeds\":\"0\",",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"nationalityCode\": \"GB\",",
											"    \"numberOfDependents\": 1,",
											"    \"mobilePhoneNumber\": \"07558334222\",",
											"    \"monthlyMortgageRent\": 300,",
											"    \"dateOfBirth\": dateOfBirth,",
											"    \"maritalStatusCode\": \"M\",",
											"    \"residentialStatusCode\": \"M\",",
											"    \"employment\": {",
											"      \"employerName\": \"n/a\",",
											"      \"employmentStatusCode\": \"EMP\",",
											"      \"occupationCode\": \"1\"",
											"    },",
											"    \"income\": {",
											"      \"yearlyIncomeBeforeTax\": 33000,",
											"      \"otherIncome\": 0",
											"    },",
											"    \"addresses\": [",
											"      {",
											"        \"addressType\": \"Current\",",
											"        \"startDate\": {",
											"          \"month\": 2,",
											"          \"year\": 2016",
											"        }",
											"      }",
											"    ]",
											"  },",
											"  \"creditPlan\": {",
											"    \"planNumber\": \"20010\",",
											"    \"periodDuration\": 12,",
											"    \"apr\": 1.0",
											"  }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox')",
											"})",
											"",
											"// Requests series (application setup -> get application -> validate bank account -> create application -> create quote -> apply for loan -> (wait max 60secs) -> decison ready webhook -> get IDIQ)",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // apply for loan",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set decisionReadyConfig ",
											"        decisionReadyConfig = {",
											"            url: websocketHost + decisionReadyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
											"                'Content-Type': 'application/json',",
											"                'connection': 'keep-alive',",
											"                'HMACSecret': env.get('HMACSecret'),",
											"                'applicationId': env.get(\"applicationId\")",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    'appRef': env.get(\"appRef\"),",
											"                    'channel': \"Web\",",
											"                    'decision': \"Approved\",",
											"                    'status': \"PIDIQ\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // wait here for origin to do its thing",
											"    (cb) => setTimeout(function () {",
											"        pm.sendRequest(decisionReadyConfig, (err, res) => {",
											"            if (err) throw new Error('decision ready call failed');",
											"",
											"            // set 'IDIQ questions' config",
											"            IDIQQuestionsConfig = {",
											"                url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQQuestionsPath,",
											"                method: 'POST',",
											"                header: {",
											"                    'Content-Type': 'application/json',",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                    })",
											"                }",
											"            }",
											"",
											"            cb(err, res);",
											"        })",
											"    }, 60000),",
											"",
											"    // IDID Questions request",
											"    (cb) => pm.sendRequest(IDIQQuestionsConfig, (err, res) => {",
											"        if (err) throw new Error('create /identity/questions call failed');",
											"        const { applicationId, identityQuestions } = res.json();",
											"",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // store the question Ids as that's what we use in getting the right answers",
											"        pm.environment.set(\"question1\", identityQuestions[0].questionId);",
											"        pm.environment.set(\"question2\", identityQuestions[1].questionId);",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const { messageId, applicationId, nextStage } = pm.response.json();",
											"",
											"// Happypath - Verify /identity/questions request response status code is 200",
											"pm.test(\"/identity/questions status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Happypath - Verify /identity/questions endpoint response has property applicationId",
											"pm.test(\"Validate response body should have property 'applicationId'\", ()=> {",
											"    pm.expect(applicationId).to.be.a('string');",
											"    pm.expect(applicationId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /identity/questions endpoint response has property messageId",
											"pm.test(\"Validate response body should have property 'messageId'\", ()=> {",
											"    pm.expect(messageId).to.be.a('string');",
											"    pm.expect(messageId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /identity/questions endpoint response nextStage is in 'ApprovalAccepted' state",
											"pm.test(\"Validate response body should have property 'messageId'\", ()=> {",
											"    pm.expect(nextStage).to.eq('ApprovalAccepted');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followOriginalHttpMethod": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",\n    \"identityAnswers\": [\n        {\n            \"questionId\": \"{{question1}}\",\n            \"value\": \"NONE OF THE ABOVE / DOES NOT APPLY\"\n        },\n        {\n            \"questionId\": \"{{question2}}\",\n            \"value\": \"NONE OF THE ABOVE / DOES NOT APPLY\"\n        }\n    ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{IDIQ_answers}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{IDIQ_answers}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ACCEPT_OFFER",
					"item": [
						{
							"name": "FPP-246-accept-offer-HappyPath [MOCKS]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_accept_offer = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"status\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"path\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"errors\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"code\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"message\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"code\",",
											"            \"message\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"status\",",
											"    \"name\",",
											"    \"path\",",
											"    \"errors\"",
											"  ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_accept_offer\", response_schema_accept_offer);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"    return cb(null, results);",
											"  }",
											"",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"    return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"",
											"  tasks[currOperation]((err, res) => {",
											"    if (err) {",
											"      return cb(err);",
											"    }",
											"",
											"    results.push(res);",
											"    return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
											"const messagesPath = pm.environment.get(\"messages_path\");",
											"const IDIQQuestionsPath = pm.environment.get(\"IDIQ_questions\");",
											"const IDIQAnswersPath = pm.environment.get(\"IDIQ_answers\");",
											"const acceptOfferPath = pm.environment.get(\"acceptOffer\");",
											"const websocketHost = pm.environment.get(\"websocket_host\");",
											"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
											"const dobConstants = {",
											"    \"Date of Entry on CTDB\": 42818,",
											"    \"DOB\": 26907,",
											"}",
											"",
											"",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let openWebsocketConnectionConfig;",
											"let applyConfig;",
											"let getAppRefConfig;",
											"let decisionReadyConfig;",
											"let IDIQQuestionsConfig;",
											"let IDIQAnswersConfig;",
											"let acceptOfferConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = new Date(new Date() - (dobConstants[\"Date of Entry on CTDB\"] - dobConstants[\"DOB\"]) * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"// set timeout",
											"const timeout = pm.environment.name.includes('MOCKS') ? 1000 : 60000;",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\"),",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00,",
											"    \"grossAmount\": 310.00,",
											"    \"discounts\": 0.00,",
											"    \"giftVouchers\": 0.00,",
											"    \"nectarPointsCurrencyValue\": 0.00",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
											"    \"origin\": \"argos\",",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\",",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"    \"collectionStorePostCode\": \"BT14 6NE\",",
											"    \"fulfilmentChannel\": \"Collection\",",
											"    \"creditPlanId\": \"20010\",",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\"",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"sortCode\": \"070116\",",
											"  \"accountNumber\": \"00003536\",",
											"  \"accountOpenedMonth\": 1,",
											"  \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"  \"messageId\": env.get('messageId'),",
											"  \"termsAndConditions\": [",
											"    {",
											"      \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    },",
											"    {",
											"      \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    },",
											"    {",
											"      \"tsAndCsType\": \"MarketingComms\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    }",
											"  ],",
											"  \"customer\": {",
											"    \"additionalNeeds\":\"0\",",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"nationalityCode\": \"GB\",",
											"    \"numberOfDependents\": 1,",
											"    \"mobilePhoneNumber\": \"07558334222\",",
											"    \"monthlyMortgageRent\": 300,",
											"    \"dateOfBirth\": dateOfBirth,",
											"    \"maritalStatusCode\": \"M\",",
											"    \"residentialStatusCode\": \"M\",",
											"    \"employment\": {",
											"      \"employerName\": \"n/a\",",
											"      \"employmentStatusCode\": \"EMP\",",
											"      \"occupationCode\": \"1\"",
											"    },",
											"    \"income\": {",
											"      \"yearlyIncomeBeforeTax\": 33000,",
											"      \"otherIncome\": 0",
											"    },",
											"    \"addresses\": [",
											"      {",
											"        \"addressType\": \"Current\",",
											"        \"startDate\": {",
											"          \"month\": 2,",
											"          \"year\": 2016",
											"        }",
											"      }",
											"    ]",
											"  },",
											"  \"creditPlan\": {",
											"    \"planNumber\": \"20010\",",
											"    \"periodDuration\": 12,",
											"    \"apr\": 1.0",
											"  }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox')",
											"})",
											"",
											"// Requests series (application setup -> get application -> validate bank account -> create application -> create quote -> apply for loan -> (wait max 60secs) -> decison ready webhook -> get IDIQ -> post IDIQ)",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // apply for loan",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set decisionReadyConfig ",
											"        decisionReadyConfig = {",
											"            url: websocketHost + decisionReadyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
											"                'Content-Type': 'application/json',",
											"                'connection': 'keep-alive',",
											"                'HMACSecret': env.get('HMACSecret'),",
											"                'applicationId': env.get(\"applicationId\")",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    'appRef': env.get(\"appRef\"),",
											"                    'channel': \"Web\",",
											"                    'decision': \"Approved\",",
											"                    'status': \"PIDIQ\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // wait here for origins to do its thing",
											"    (cb) => setTimeout(function () {",
											"        pm.sendRequest(decisionReadyConfig, (err, res) => {",
											"            if (err) throw new Error('decision ready call failed');",
											"",
											"            // set 'IDIQ questions' config",
											"            IDIQQuestionsConfig = {",
											"                url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQQuestionsPath,",
											"                method: 'POST',",
											"                header: {",
											"                    'Content-Type': 'application/json',",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                    })",
											"                }",
											"            }",
											"",
											"            cb(err, res);",
											"        })",
											"    }, timeout),",
											"",
											"    // IDID Questions request",
											"    (cb) => pm.sendRequest(IDIQQuestionsConfig, (err, res) => {",
											"        if (err) throw new Error('create /identity/questions call failed');",
											"        const { applicationId, identityQuestions } = res.json();",
											"",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        pm.environment.set(\"question1\", identityQuestions[0].questionId);",
											"        pm.environment.set(\"question2\", identityQuestions[1].questionId);",
											"",
											"        // set 'IDIQ answers' config",
											"        IDIQAnswersConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQAnswersPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"                        \"identityAnswers\": [",
											"                            {",
											"                                \"questionId\": env.get('question1'),",
											"                                \"value\": 'NONE OF THE ABOVE / DOES NOT APPLY'",
											"                            },",
											"                            {",
											"                                \"questionId\": env.get('question2'),",
											"                                \"value\": 'NONE OF THE ABOVE / DOES NOT APPLY'",
											"                            }",
											"                        ]",
											"                    })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // IDID Answers request",
											"    (cb) => pm.sendRequest(IDIQAnswersConfig, (err, res) => {",
											"        if (err) throw new Error('create /identity/answers call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const { messageId, applicationId, nextStage } = pm.response.json();",
											"",
											"// Happypath - Verify /offer/accept request response status code is 200",
											"pm.test(\"/offer/accept status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Happypath - Verify /offer/accept endpoint response has property applicationId",
											"pm.test(\"Validate response body should have property 'applicationId'\", ()=> {",
											"    pm.expect(applicationId).to.be.a('string');",
											"    pm.expect(applicationId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /offer/accept endpoint response has property messageId",
											"pm.test(\"Validate response body should have property 'messageId'\", ()=> {",
											"    pm.expect(messageId).to.be.a('string');",
											"    pm.expect(messageId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /offer/accept endpoint response nextStage is in 'ItsTimeToSign' state",
											"pm.test(\"Validate response body should have property 'nextStage'\", ()=> {",
											"    pm.expect(nextStage).to.eq('ItsTimeToSign');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followOriginalHttpMethod": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{acceptOffer}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{acceptOffer}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-246-accept-offer-bypassStrategy-HappyPath [ORIGINS]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_accept_offer = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"status\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"path\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"errors\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"code\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"message\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"code\",",
											"            \"message\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"status\",",
											"    \"name\",",
											"    \"path\",",
											"    \"errors\"",
											"  ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_accept_offer\", response_schema_accept_offer);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"    return cb(null, results);",
											"  }",
											"",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"    return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"",
											"  tasks[currOperation]((err, res) => {",
											"    if (err) {",
											"      return cb(err);",
											"    }",
											"",
											"    results.push(res);",
											"    return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
											"const messagesPath = pm.environment.get(\"messages_path\");",
											"const acceptOfferPath = pm.environment.get(\"acceptOffer\");",
											"const websocketHost = pm.environment.get(\"websocket_host\");",
											"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
											"",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let openWebsocketConnectionConfig;",
											"let applyConfig;",
											"let getAppRefConfig;",
											"let decisionReadyConfig;",
											"let acceptOfferConfig;",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"//Set Random messageId value ",
											"var uuid = require(\"uuid\");",
											"var messageId = uuid.v4();",
											"",
											"pm.environment.set('messageId',messageId)",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\"),",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00,",
											"    \"grossAmount\": 310.00,",
											"    \"discounts\": 0.00,",
											"    \"giftVouchers\": 0.00,",
											"    \"nectarPointsCurrencyValue\": 0.00",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
											"    \"origin\": \"argos\",",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\",",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"    \"collectionStorePostCode\": \"BT14 6NE\",",
											"    \"fulfilmentChannel\": \"Collection\",",
											"    \"creditPlanId\": \"20010\",",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\"",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"sortCode\": \"070116\",",
											"  \"accountNumber\": \"00003536\",",
											"  \"accountOpenedMonth\": 1,",
											"  \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": \"1900-01-01\",",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox'),",
											"  \"ipAddress\": \"99.99.99.99\"",
											"})",
											"",
											"// Requests series (application setup -> get application -> validate bank account -> create application -> create quote -> apply for loan -> (wait max 60secs) -> decison ready webhook)",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // apply for loan",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set decisionReadyConfig ",
											"        decisionReadyConfig = {",
											"            url: websocketHost + decisionReadyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
											"                'Content-Type': 'application/json',",
											"                'connection': 'keep-alive',",
											"                'HMACSecret': env.get('HMACSecret'),",
											"                'applicationId': env.get(\"applicationId\")",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    'appRef': env.get(\"appRef\"),",
											"                    'channel': \"Web\",",
											"                    'decision': \"Approved\",",
											"                    'status': \"PIDIQ\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // wait here for origins to do its thing",
											"    (cb) => setTimeout(function () {",
											"        pm.sendRequest(decisionReadyConfig, (err, res) => {",
											"            if (err) throw new Error('decision ready call failed');",
											"",
											"            // set 'accept offer' config",
											"            acceptOfferConfig = {",
											"                url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + acceptOfferPath,",
											"                method: 'POST',",
											"                header: {",
											"                    'Content-Type': 'application/json',",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                    })",
											"                }",
											"            }",
											"",
											"            cb(err, res);",
											"        })",
											"    }, 60000)",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const { messageId, applicationId, nextStage } = pm.response.json();",
											"",
											"// Happypath - Verify /offer/accept request response status code is 200",
											"pm.test(\"/offer/accept status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Happypath - Verify /offer/accept endpoint response has property applicationId",
											"pm.test(\"Validate response body should have property 'applicationId'\", ()=> {",
											"    pm.expect(applicationId).to.be.a('string');",
											"    pm.expect(applicationId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /offer/accept endpoint response has property messageId",
											"pm.test(\"Validate response body should have property 'messageId'\", ()=> {",
											"    pm.expect(messageId).to.be.a('string');",
											"    pm.expect(messageId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /offer/accept endpoint response nextStage is in 'ItsTimeToSign' state",
											"pm.test(\"Validate response body should have property 'nextStage'\", ()=> {",
											"    pm.expect(nextStage).to.eq('ItsTimeToSign');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followOriginalHttpMethod": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{acceptOffer}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{acceptOffer}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-246-invalid-app-state-403-bypassStrategy-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_accept_offer = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"status\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"path\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"errors\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"code\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"message\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"code\",",
											"            \"message\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"status\",",
											"    \"name\",",
											"    \"path\",",
											"    \"errors\"",
											"  ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_accept_offer\", response_schema_accept_offer);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"    return cb(null, results);",
											"  }",
											"",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"    return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"",
											"  tasks[currOperation]((err, res) => {",
											"    if (err) {",
											"      return cb(err);",
											"    }",
											"",
											"    results.push(res);",
											"    return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
											"const acceptOfferPath = pm.environment.get(\"acceptOffer\");",
											"const websocketHost = pm.environment.get(\"websocket_host\");",
											"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
											"",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let applyConfig;",
											"let decisionReadyConfig;",
											"let acceptOfferConfig;",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"//Set Random messageId value ",
											"var uuid = require(\"uuid\");",
											"var messageId = uuid.v4();",
											"",
											"pm.environment.set('messageId',messageId)",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\"),",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00,",
											"    \"grossAmount\": 310.00,",
											"    \"discounts\": 0.00,",
											"    \"giftVouchers\": 0.00,",
											"    \"nectarPointsCurrencyValue\": 0.00",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
											"    \"origin\": \"argos\",",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\",",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"    \"collectionStorePostCode\": \"BT14 6NE\",",
											"    \"fulfilmentChannel\": \"Collection\",",
											"    \"creditPlanId\": \"20010\",",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\"",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"sortCode\": \"070116\",",
											"  \"accountNumber\": \"00003536\",",
											"  \"accountOpenedMonth\": 1,",
											"  \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": \"email@email.com\",",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": \"1900-01-01\",",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"33\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox'),",
											"  \"ipAddress\": \"99.99.99.99\"",
											"})",
											"",
											"// Requests series (application setup -> get application -> validate bank account -> create application -> create quote -> apply for loan -> (wait max 60secs) -> decison ready webhook -> get IDIQ -> post IDIQ)",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // apply for loan",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set decisionReadyConfig ",
											"        decisionReadyConfig = {",
											"            url: websocketHost + decisionReadyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
											"                'Content-Type': 'application/json',",
											"                'connection': 'keep-alive',",
											"                'HMACSecret': env.get('HMACSecret'),",
											"                'applicationId': env.get(\"applicationId\")",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    'appRef': env.get(\"appRef\"),",
											"                    'channel': \"Web\",",
											"                    'decision': \"Approved\",",
											"                    'status': \"PIDIQ\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // wait here for origins to do its thing",
											"    (cb) => setTimeout(function () {",
											"        pm.sendRequest(decisionReadyConfig, (err, res) => {",
											"            if (err) throw new Error('decision ready call failed');",
											"",
											"            // set 'accept offer' config",
											"            acceptOfferConfig = {",
											"                url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + acceptOfferPath,",
											"                method: 'POST',",
											"                header: {",
											"                    'Content-Type': 'application/json',",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                    })",
											"                }",
											"            }",
											"",
											"            cb(err, res);",
											"        })",
											"    }, 60000),",
											"",
											"    // accept offer request",
											"    (cb) => pm.sendRequest(acceptOfferConfig, (err, res) => {",
											"        if (err) throw new Error('create /offer/accept call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Unhappypath - Verify error code 403 from create 'accept offer' when application state is invalid",
											"pm.test(\"Accept offer status code is 403\", ()=> {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Unhappypath - Verify error description if application does not exist",
											"pm.test(\"Validate 'invalid Application State' error description in response body'\", function () {",
											"    const { message } = pm.response.json().errors[0];",
											"    pm.expect(message).to.eql(\"Invalid Application State\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followOriginalHttpMethod": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{acceptOffer}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{acceptOffer}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-2611-accept-offer-validation-data-driven",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(pm.iterationData.get(\"testName\"), ()=> {",
											"    console.info(pm.response.json());",
											"",
											"    const expectedErrorMessage = pm.iterationData.get(\"expectedErrorMessage\");",
											"    const { message: actualErrorMessage } = pm.response.json().errors[0];",
											"    pm.expect(actualErrorMessage).to.eq(expectedErrorMessage);",
											"",
											"    const expectedErrorName = pm.iterationData.get(\"expectedErrorName\");",
											"    const actualErrorName = pm.response.json().name;",
											"    pm.expect(actualErrorName).to.eq(expectedErrorName);",
											"    ",
											"    const expectedResponseCode = pm.iterationData.get(\"expectedResponseCode\");",
											"    const actualResponseCode = pm.response.code;",
											"    pm.expect(actualResponseCode).to.eq(expectedResponseCode);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"/* BEGIN UTILITY FUNCTIONS */",
											"",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"    return _series(tasks, cb);",
											"}",
											"",
											"/* END UTILITY FUNITONS */",
											"",
											"",
											"",
											"/* PRE-REQUEST SETUP */",
											"",
											"// We need to get a session cookie from the getApplicaiton endpoint to run our tests",
											"// so before we do anything else, we Setup a dummy application and get it",
											"// PostMan automatically save the response cookie for us so we don't need to do any post processing",
											"",
											"// Get URL components",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"",
											"// Generate expiry time",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"",
											"// Setup dummy application",
											"const setupRequestBody = {",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"customer\": {",
											"        \"customerId\": pm.environment.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": pm.environment.get('firstName'),",
											"        \"lastName\": pm.environment.get('lastName'),",
											"        \"emailAddress\":  `${this.firstName}.${this.lastName}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": pm.environment.get(\"houseNumber1\"),",
											"            \"line1\": pm.environment.get(\"street1\"),",
											"            \"postCode\": pm.environment.get(\"postCode1\"),",
											"            \"town\": pm.environment.get(\"town1\"),",
											"            \"county\": pm.environment.get(\"county1\"),",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 320,",
											"        \"grossAmount\": 320,",
											"        \"discounts\": 0,",
											"        \"giftVouchers\": 0,",
											"        \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"FrontendTesting/1.00\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": expiryTime,",
											"        \"stockHoldExpiryTime\": expiryTime,",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"};",
											"",
											"// Setup request config",
											"const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath, //building the url path",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(setupRequestBody)",
											"    }",
											"};",
											"",
											"// Get dummy application and auth cookie",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"",
											"        const { applicationId } = res.json();",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"        ",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"        ",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"    ",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"    }),",
											"    ",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											"",
											"/* END PRE-REQUEST SETUP */",
											"",
											"",
											"",
											"// Now we can build the request body for our tests using the test iteration data file",
											"",
											"// Array of request keys",
											"const requestKeys = [",
											"    'messageId',",
											"];",
											"",
											"const body = {};",
											"",
											"// Assign values to request body",
											"for( let i in requestKeys){",
											"    const key = requestKeys[i];",
											"    const value = pm.iterationData.get(key);",
											"    if (value !== undefined) {",
											"        body[key] = value;",
											"    }",
											"}",
											"",
											"// Set in request",
											"pm.environment.set('req_body', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{req_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{acceptOffer}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{acceptOffer}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ESIG_SETUP",
					"item": [
						{
							"name": "FPP-1243-Esig-setup-HappyPath [MOCKS]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_esig_setup = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"applicationId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"messageId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"redirectUrl\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"applicationId\",",
											"    \"messageId\",",
											"    \"redirectUrl\"",
											"  ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_esig_setup\", response_schema_esig_setup);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"    return cb(null, results);",
											"  }",
											"",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"    return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"",
											"  tasks[currOperation]((err, res) => {",
											"    if (err) {",
											"      return cb(err);",
											"    }",
											"",
											"    results.push(res);",
											"    return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
											"const messagesPath = pm.environment.get(\"messages_path\");",
											"const IDIQQuestionsPath = pm.environment.get(\"IDIQ_questions\");",
											"const IDIQAnswersPath = pm.environment.get(\"IDIQ_answers\");",
											"const acceptOfferPath = pm.environment.get(\"acceptOffer\");",
											"const websocketHost = pm.environment.get(\"websocket_host\");",
											"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
											"const dobConstants = {",
											"    \"Date of Entry on CTDB\": 42818,",
											"    \"DOB\": 26907,",
											"}",
											"",
											"",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let openWebsocketConnectionConfig;",
											"let applyConfig;",
											"let getAppRefConfig;",
											"let decisionReadyConfig;",
											"let IDIQQuestionsConfig;",
											"let IDIQAnswersConfig;",
											"let acceptOfferConfig;",
											"",
											"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
											"const dateOfBirth = new Date(new Date() - (dobConstants[\"Date of Entry on CTDB\"] - dobConstants[\"DOB\"]) * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0];",
											"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
											"console.info(\"dateOfBirth = \" + dateOfBirth);",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"// set timeout",
											"const timeout = pm.environment.name.includes('MOCKS') ? 1000 : 60000;",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\"),",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00,",
											"    \"grossAmount\": 310.00,",
											"    \"discounts\": 0.00,",
											"    \"giftVouchers\": 0.00,",
											"    \"nectarPointsCurrencyValue\": 0.00",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
											"    \"origin\": \"argos\",",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\",",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"    \"collectionStorePostCode\": \"BT14 6NE\",",
											"    \"fulfilmentChannel\": \"Collection\",",
											"    \"creditPlanId\": \"20010\",",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\"",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"sortCode\": \"070116\",",
											"  \"accountNumber\": \"00003536\",",
											"  \"accountOpenedMonth\": 1,",
											"  \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"  \"messageId\": env.get('messageId'),",
											"  \"termsAndConditions\": [",
											"    {",
											"      \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    },",
											"    {",
											"      \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    },",
											"    {",
											"      \"tsAndCsType\": \"MarketingComms\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    }",
											"  ],",
											"  \"customer\": {",
											"    \"additionalNeeds\":\"0\",",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"nationalityCode\": \"GB\",",
											"    \"numberOfDependents\": 1,",
											"    \"mobilePhoneNumber\": \"07558334222\",",
											"    \"monthlyMortgageRent\": 300,",
											"    \"dateOfBirth\": dateOfBirth,",
											"    \"maritalStatusCode\": \"M\",",
											"    \"residentialStatusCode\": \"M\",",
											"    \"employment\": {",
											"      \"employerName\": \"n/a\",",
											"      \"employmentStatusCode\": \"EMP\",",
											"      \"occupationCode\": \"1\"",
											"    },",
											"    \"income\": {",
											"      \"yearlyIncomeBeforeTax\": 33000,",
											"      \"otherIncome\": 0",
											"    },",
											"    \"addresses\": [",
											"      {",
											"        \"addressType\": \"Current\",",
											"        \"startDate\": {",
											"          \"month\": 2,",
											"          \"year\": 2016",
											"        }",
											"      }",
											"    ]",
											"  },",
											"  \"creditPlan\": {",
											"    \"planNumber\": \"20010\",",
											"    \"periodDuration\": 12,",
											"    \"apr\": 1.0",
											"  }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox')",
											"})",
											"",
											"// Requests series (application setup -> get application -> validate bank account -> create application -> create quote -> apply for loan -> (wait max 60secs) -> decison ready webhook -> get IDIQ -> post IDIQ -> accept offer)",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // apply for loan",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set decisionReadyConfig ",
											"        decisionReadyConfig = {",
											"            url: websocketHost + decisionReadyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
											"                'Content-Type': 'application/json',",
											"                'connection': 'keep-alive',",
											"                'HMACSecret': env.get('HMACSecret'),",
											"                'applicationId': env.get(\"applicationId\")",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    'appRef': env.get(\"appRef\"),",
											"                    'channel': \"Web\",",
											"                    'decision': \"Approved\",",
											"                    'status': \"PIDIQ\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // wait here for origins to do its thing",
											"    (cb) => setTimeout(function () {",
											"        pm.sendRequest(decisionReadyConfig, (err, res) => {",
											"            if (err) throw new Error('decision ready call failed');",
											"",
											"            // set 'IDIQ questions' config",
											"            IDIQQuestionsConfig = {",
											"                url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQQuestionsPath,",
											"                method: 'POST',",
											"                header: {",
											"                    'Content-Type': 'application/json',",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                    })",
											"                }",
											"            }",
											"",
											"            cb(err, res);",
											"        })",
											"    }, timeout),",
											"",
											"    // IDID Questions request",
											"    (cb) => pm.sendRequest(IDIQQuestionsConfig, (err, res) => {",
											"        if (err) throw new Error('create /identity/questions call failed');",
											"        const { applicationId, identityQuestions } = res.json();",
											"",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        pm.environment.set(\"question1\", identityQuestions[0].questionId);",
											"        pm.environment.set(\"question2\", identityQuestions[1].questionId);",
											"",
											"        // set 'IDIQ answers' config",
											"        IDIQAnswersConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQAnswersPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"                        \"identityAnswers\": [",
											"                            {",
											"                                \"questionId\": env.get('question1'),",
											"                                \"value\": 'NONE OF THE ABOVE / DOES NOT APPLY'",
											"                            },",
											"                            {",
											"                                \"questionId\": env.get('question2'),",
											"                                \"value\": 'NONE OF THE ABOVE / DOES NOT APPLY'",
											"                            }",
											"                        ]",
											"                    })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // IDID Answers request",
											"    (cb) => pm.sendRequest(IDIQAnswersConfig, (err, res) => {",
											"        if (err) throw new Error('create /identity/answers call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set 'accept offer' config",
											"        acceptOfferConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + acceptOfferPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // accept offer request",
											"    (cb) => pm.sendRequest(acceptOfferConfig, (err, res) => {",
											"        if (err) throw new Error('create /offer/accept call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const { messageId, applicationId, redirectUrl } = pm.response.json();",
											"",
											"// Happypath - Verify /esig/setup request response status code is 200",
											"pm.test(\"/esig/setup status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Happypath - Verify /esig/setup endpoint response has property applicationId",
											"pm.test(\"Validate response body should have property 'applicationId'\", ()=> {",
											"    pm.expect(applicationId).to.be.a('string');",
											"    pm.expect(applicationId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /esig/setup endpoint response has property messageId",
											"pm.test(\"Validate response body should have property 'messageId'\", ()=> {",
											"    pm.expect(messageId).to.be.a('string');",
											"    pm.expect(messageId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /esig/setup response has property redirectUrl",
											"pm.test(\"Validate response body should have property 'redirectUrl'\", ()=> {",
											"    pm.expect(redirectUrl).to.be.a('string');",
											"    // pm.expect(redirectUrl).to.contain('Docusign');",
											"    pm.expect(redirectUrl).to.match(/^.*Docusign/i);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followOriginalHttpMethod": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{esig_setup}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{esig_setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-1243-Esig-setup-bypassStrategy-HappyPath [ORIGINS]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_esig_setup = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"applicationId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"messageId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"redirectUrl\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"applicationId\",",
											"    \"messageId\",",
											"    \"redirectUrl\"",
											"  ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_esig_setup\", response_schema_esig_setup);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"    return cb(null, results);",
											"  }",
											"",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"    return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"",
											"  tasks[currOperation]((err, res) => {",
											"    if (err) {",
											"      return cb(err);",
											"    }",
											"",
											"    results.push(res);",
											"    return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
											"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
											"const messagesPath = pm.environment.get(\"messages_path\");",
											"const acceptOfferPath = pm.environment.get(\"acceptOffer\");",
											"const websocketHost = pm.environment.get(\"websocket_host\");",
											"const esigSetupPath = pm.environment.get(\"esig_setup\");",
											"",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let applyConfig;",
											"let getAppRefConfig;",
											"let decisionReadyConfig;",
											"let acceptOfferConfig;",
											"let EsigSetupConfig;",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"// set timeout",
											"const timeout = pm.environment.name.includes('MOCKS') ? 1000 : 60000;",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\"),",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00,",
											"    \"grossAmount\": 310.00,",
											"    \"discounts\": 0.00,",
											"    \"giftVouchers\": 0.00,",
											"    \"nectarPointsCurrencyValue\": 0.00",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
											"    \"origin\": \"argos\",",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\",",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"    \"collectionStorePostCode\": \"BT14 6NE\",",
											"    \"fulfilmentChannel\": \"Collection\",",
											"    \"creditPlanId\": \"20010\",",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\"",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"sortCode\": \"070116\",",
											"  \"accountNumber\": \"00003536\",",
											"  \"accountOpenedMonth\": 1,",
											"  \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"  \"messageId\": env.get('messageId'),",
											"  \"termsAndConditions\": [",
											"    {",
											"      \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    },",
											"    {",
											"      \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    },",
											"    {",
											"      \"tsAndCsType\": \"MarketingComms\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    }",
											"  ],",
											"  \"customer\": {",
											"    \"additionalNeeds\":\"0\",",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"nationalityCode\": \"GB\",",
											"    \"numberOfDependents\": 1,",
											"    \"mobilePhoneNumber\": \"07558334222\",",
											"    \"monthlyMortgageRent\": 300,",
											"    \"dateOfBirth\": \"1900-01-01\",",
											"    \"maritalStatusCode\": \"M\",",
											"    \"residentialStatusCode\": \"M\",",
											"    \"employment\": {",
											"      \"employerName\": \"n/a\",",
											"      \"employmentStatusCode\": \"EMP\",",
											"      \"occupationCode\": \"1\"",
											"    },",
											"    \"income\": {",
											"      \"yearlyIncomeBeforeTax\": 33000,",
											"      \"otherIncome\": 0",
											"    },",
											"    \"addresses\": [",
											"      {",
											"        \"addressType\": \"Current\",",
											"        \"startDate\": {",
											"          \"month\": 2,",
											"          \"year\": 2016",
											"        }",
											"      }",
											"    ]",
											"  },",
											"  \"creditPlan\": {",
											"    \"planNumber\": \"20010\",",
											"    \"periodDuration\": 12,",
											"    \"apr\": 1.0",
											"  }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox')",
											"})",
											"",
											"// Requests series (application setup -> get application -> validate bank account -> create application -> create quote -> websocket connection -> apply for loan -> (wait max 60secs) -> decison ready webhook -> get IDIQ -> post IDIQ)",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // apply for loan",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set decisionReadyConfig ",
											"        decisionReadyConfig = {",
											"            url: websocketHost + decisionReadyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
											"                'Content-Type': 'application/json',",
											"                'connection': 'keep-alive',",
											"                'HMACSecret': env.get('HMACSecret'),",
											"                'applicationId': env.get(\"applicationId\")",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    'appRef': env.get(\"appRef\"),",
											"                    'channel': \"Web\",",
											"                    'decision': \"Approved\",",
											"                    'status': \"PIDIQ\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // wait here for origins to do its thing",
											"    (cb) => setTimeout(function () {",
											"        pm.sendRequest(decisionReadyConfig, (err, res) => {",
											"            if (err) throw new Error('decision ready call failed');",
											"",
											"        // set 'accept offer' config",
											"        acceptOfferConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + acceptOfferPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"            cb(err, res);",
											"        })",
											"    }, timeout),",
											"",
											"    // accept offer request",
											"    (cb) => pm.sendRequest(acceptOfferConfig, (err, res) => {",
											"        if (err) throw new Error('create /offer/accept call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const { messageId, applicationId, redirectUrl } = pm.response.json();",
											"",
											"// Happypath - Verify /esig/setup request response status code is 200",
											"pm.test(\"/esig/setup status code is 200\", ()=> {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Happypath - Verify /esig/setup endpoint response has property applicationId",
											"pm.test(\"Validate response body should have property 'applicationId'\", ()=> {",
											"    pm.expect(applicationId).to.be.a('string');",
											"    pm.expect(applicationId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /esig/setup endpoint response has property messageId",
											"pm.test(\"Validate response body should have property 'messageId'\", ()=> {",
											"    pm.expect(messageId).to.be.a('string');",
											"    pm.expect(messageId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /esig/setup response has property redirectUrl",
											"pm.test(\"Validate response body should have property 'redirectUrl'\", ()=> {",
											"    pm.expect(redirectUrl).to.be.a('string');",
											"    pm.expect(redirectUrl).to.match(/^.*Docusign/i);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followOriginalHttpMethod": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{esig_setup}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{esig_setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-1243-invalid-app-state-403-bypassStrategy-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_esig_setup = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"applicationId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"messageId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"redirectUrl\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"applicationId\",",
											"    \"messageId\",",
											"    \"redirectUrl\"",
											"  ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_esig_setup\", response_schema_esig_setup);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"  if (currOperation === tasks.length) {",
											"    return cb(null, results);",
											"  }",
											"",
											"  if (typeof tasks[currOperation] !== 'function') {",
											"    return cb(new Error('asyncSeries: Please provide a function'));",
											"  }",
											"",
											"  tasks[currOperation]((err, res) => {",
											"    if (err) {",
											"      return cb(err);",
											"    }",
											"",
											"    results.push(res);",
											"    return _series(tasks, cb, currOperation + 1, results);",
											"  });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"  return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
											"const messagesPath = pm.environment.get(\"messages_path\");",
											"const acceptOfferPath = pm.environment.get(\"acceptOffer\");",
											"const websocketHost = pm.environment.get(\"websocket_host\");",
											"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
											"const esigSetupPath = pm.environment.get(\"esig_setup\");",
											"const dobConstants = {",
											"    \"Date of Entry on CTDB\": 42818,",
											"    \"DOB\": 26907,",
											"}",
											"",
											"",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let openWebsocketConnectionConfig;",
											"let applyConfig;",
											"let getAppRefConfig;",
											"let decisionReadyConfig;",
											"let acceptOfferConfig;",
											"let EsigSetupConfig;",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"// set timeout",
											"const timeout = pm.environment.name.includes('MOCKS') ? 1000 : 60000;",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\"),",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00,",
											"    \"grossAmount\": 310.00,",
											"    \"discounts\": 0.00,",
											"    \"giftVouchers\": 0.00,",
											"    \"nectarPointsCurrencyValue\": 0.00",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
											"    \"origin\": \"argos\",",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\",",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"    \"collectionStorePostCode\": \"BT14 6NE\",",
											"    \"fulfilmentChannel\": \"Collection\",",
											"    \"creditPlanId\": \"20010\",",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\"",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"sortCode\": \"070116\",",
											"  \"accountNumber\": \"00003536\",",
											"  \"accountOpenedMonth\": 1,",
											"  \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"  \"messageId\": env.get('messageId'),",
											"  \"termsAndConditions\": [",
											"    {",
											"      \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    },",
											"    {",
											"      \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    },",
											"    {",
											"      \"tsAndCsType\": \"MarketingComms\",",
											"      \"agreed\": true,",
											"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"    }",
											"  ],",
											"  \"customer\": {",
											"    \"additionalNeeds\":\"0\",",
											"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"    \"nationalityCode\": \"GB\",",
											"    \"numberOfDependents\": 1,",
											"    \"mobilePhoneNumber\": \"07558334222\",",
											"    \"monthlyMortgageRent\": 300,",
											"    \"dateOfBirth\": \"1900-01-01\",",
											"    \"maritalStatusCode\": \"M\",",
											"    \"residentialStatusCode\": \"M\",",
											"    \"employment\": {",
											"      \"employerName\": \"n/a\",",
											"      \"employmentStatusCode\": \"EMP\",",
											"      \"occupationCode\": \"1\"",
											"    },",
											"    \"income\": {",
											"      \"yearlyIncomeBeforeTax\": 33000,",
											"      \"otherIncome\": 0",
											"    },",
											"    \"addresses\": [",
											"      {",
											"        \"addressType\": \"Current\",",
											"        \"startDate\": {",
											"          \"month\": 2,",
											"          \"year\": 2016",
											"        }",
											"      }",
											"    ]",
											"  },",
											"  \"creditPlan\": {",
											"    \"planNumber\": \"20010\",",
											"    \"periodDuration\": 12,",
											"    \"apr\": 1.0",
											"  }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"  \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox')",
											"})",
											"",
											"// Requests series (application setup -> get application -> validate bank account -> create application -> create quote -> apply for loan -> (wait max 60secs) -> decison ready webhook -> get IDIQ -> post IDIQ)",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // apply for loan",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set decisionReadyConfig ",
											"        decisionReadyConfig = {",
											"            url: websocketHost + decisionReadyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
											"                'Content-Type': 'application/json',",
											"                'connection': 'keep-alive',",
											"                'HMACSecret': env.get('HMACSecret'),",
											"                'applicationId': env.get(\"applicationId\")",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    'appRef': env.get(\"appRef\"),",
											"                    'channel': \"Web\",",
											"                    'decision': \"Approved\",",
											"                    'status': \"PIDIQ\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // wait here for origins to do its thing",
											"    (cb) => setTimeout(function () {",
											"        pm.sendRequest(decisionReadyConfig, (err, res) => {",
											"            if (err) throw new Error('decision ready call failed');",
											"",
											"            // set 'accept offer' config",
											"            acceptOfferConfig = {",
											"                url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + acceptOfferPath,",
											"                method: 'POST',",
											"                header: {",
											"                    'Content-Type': 'application/json',",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                    })",
											"                }",
											"            }",
											"",
											"            cb(err, res);",
											"        })",
											"    }, timeout),",
											"",
											"    // accept offer request",
											"    (cb) => pm.sendRequest(acceptOfferConfig, (err, res) => {",
											"        if (err) throw new Error('create /offer/accept call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set 'Esig setup' config",
											"        EsigSetupConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + esigSetupPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // EsigSetup request",
											"    (cb) => pm.sendRequest(EsigSetupConfig, (err, res) => {",
											"        if (err) throw new Error('create /esig/setup call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Unhappypath - Verify error code 403 from create 'esig/setup' when application state is invalid",
											"pm.test(\"Accept offer status code is 403\", ()=> {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Unhappypath - Verify error if application state is invalid",
											"pm.test(\"Validate 'invalid Application State' error in response body'\", function () {",
											"    const { code, message } = pm.response.json().errors[0];",
											"    pm.expect(code).to.eql(\"APPLICATION_STATE_INVALID\");",
											"    pm.expect(message).to.eql(\"Invalid Application State\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followOriginalHttpMethod": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{esig_setup}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{esig_setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-2612-esig-setup-validation-data-driven",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"/* BEGIN UTILITY FUNCTIONS */",
											"",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"    return _series(tasks, cb);",
											"}",
											"",
											"/* END UTILITY FUNITONS */",
											"",
											"",
											"",
											"/* PRE-REQUEST SETUP */",
											"",
											"// We need to get a session cookie from the getApplicaiton endpoint to run our tests",
											"// so before we do anything else, we Setup a dummy application and get it",
											"// PostMan automatically save the response cookie for us so we don't need to do any post processing",
											"",
											"// Get URL components",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"",
											"// Generate expiry time",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"",
											"// Setup dummy application",
											"const setupRequestBody = {",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"customer\": {",
											"        \"customerId\": pm.environment.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": pm.environment.get('firstName'),",
											"        \"lastName\": pm.environment.get('lastName'),",
											"        \"emailAddress\":  `${this.firstName}.${this.lastName}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": pm.environment.get(\"houseNumber1\"),",
											"            \"line1\": pm.environment.get(\"street1\"),",
											"            \"postCode\": pm.environment.get(\"postCode1\"),",
											"            \"town\": pm.environment.get(\"town1\"),",
											"            \"county\": pm.environment.get(\"county1\"),",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 320,",
											"        \"grossAmount\": 320,",
											"        \"discounts\": 0,",
											"        \"giftVouchers\": 0,",
											"        \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"FrontendTesting/1.00\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": expiryTime,",
											"        \"stockHoldExpiryTime\": expiryTime,",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"};",
											"",
											"// Setup request config",
											"const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath, //building the url path",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(setupRequestBody)",
											"    }",
											"};",
											"",
											"// Get dummy application and auth cookie",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"",
											"        const { applicationId } = res.json();",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"        ",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"        ",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"    ",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"    }),",
											"    ",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											"",
											"/* END PRE-REQUEST SETUP */",
											"",
											"",
											"",
											"// Now we can build the request body for our tests using the test iteration data file",
											"",
											"// Array of request keys",
											"const requestKeys = [",
											"    'messageId',",
											"];",
											"",
											"const body = {};",
											"",
											"// Assign values to request body",
											"for( let i in requestKeys){",
											"    const key = requestKeys[i];",
											"    const value = pm.iterationData.get(key);",
											"    if (value !== undefined) {",
											"        body[key] = value;",
											"    }",
											"}",
											"",
											"// Set in request",
											"pm.environment.set('req_body', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(pm.iterationData.get(\"testName\"), ()=> {",
											"    console.info(pm.response.json());",
											"",
											"    const expectedErrorMessage = pm.iterationData.get(\"expectedErrorMessage\");",
											"    const { message: actualErrorMessage } = pm.response.json().errors[0];",
											"    pm.expect(actualErrorMessage).to.eq(expectedErrorMessage);",
											"",
											"    const expectedErrorName = pm.iterationData.get(\"expectedErrorName\");",
											"    const actualErrorName = pm.response.json().name;",
											"    pm.expect(actualErrorName).to.eq(expectedErrorName);",
											"    ",
											"    const expectedResponseCode = pm.iterationData.get(\"expectedResponseCode\");",
											"    const actualResponseCode = pm.response.code;",
											"    pm.expect(actualResponseCode).to.eq(expectedResponseCode);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{req_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{esig_setup}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{esig_setup}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ESIG_STATUS",
					"item": [
						{
							"name": "FPP-664-Esig-status-HappyPath [MOCKS]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_esig_status = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"messageId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"applicationId\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"nextStage\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"redirectUrl\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"messageId\",",
											"        \"applicationId\",",
											"        \"nextStage\",",
											"        \"redirectUrl\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_esig_status\", response_schema_esig_status);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
											"const messagesPath = pm.environment.get(\"messages_path\");",
											"const IDIQQuestionsPath = pm.environment.get(\"IDIQ_questions\");",
											"const IDIQAnswersPath = pm.environment.get(\"IDIQ_answers\");",
											"const acceptOfferPath = pm.environment.get(\"acceptOffer\");",
											"const websocketHost = pm.environment.get(\"websocket_host\");",
											"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
											"const esigSetupPath = pm.environment.get(\"esig_setup\");",
											"const byPassStrategyDOB = \"1900-01-01\";",
											"",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let applyConfig;",
											"let getAppRefConfig;",
											"let decisionReadyConfig;",
											"let acceptOfferConfig;",
											"let EsigSetupConfig;",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"// set timeout",
											"const timeout = pm.environment.name.includes('MOCKS') ? 1000 : 60000;",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"    \"messageId\": \"OTHER_REQUEST\",",
											"    \"customer\": {",
											"        \"customerId\": env.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": env.get('firstName'),",
											"        \"lastName\": env.get('lastName'),",
											"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": env.get(\"houseNumber1\"),",
											"            \"line1\": env.get(\"street1\"),",
											"            \"postCode\": env.get(\"postCode1\"),",
											"            \"town\": env.get(\"town1\"),",
											"            \"county\": env.get(\"county1\"),",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 310.00,",
											"        \"grossAmount\": 310.00,",
											"        \"discounts\": 0.00,",
											"        \"giftVouchers\": 0.00,",
											"        \"nectarPointsCurrencyValue\": 0.00",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300.00,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10.00,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: setupRequestBody",
											"    }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"sortCode\": \"070116\",",
											"    \"accountNumber\": \"00003536\",",
											"    \"accountOpenedMonth\": 1,",
											"    \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": byPassStrategyDOB,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"1\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox')",
											"})",
											"",
											"// Requests series (setup -> get application -> validate bank account -> create application -> create quote -> apply for loan -> (wait max 60secs) -> decison ready webhook -> get IDIQ -> post IDIQ -> accept offer -> Esig setup)",
											"asyncSeries([",
											"    // setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote request",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // apply for loan",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set decisionReadyConfig ",
											"        decisionReadyConfig = {",
											"            url: websocketHost + decisionReadyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
											"                'Content-Type': 'application/json',",
											"                'connection': 'keep-alive',",
											"                'HMACSecret': env.get('HMACSecret'),",
											"                'applicationId': env.get(\"applicationId\")",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    'appRef': env.get(\"appRef\"),",
											"                    'channel': \"Web\",",
											"                    'decision': \"Approved\",",
											"                    'status': \"PIDIQ\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // make decision-ready request & wait here for Origins to do its thing",
											"    (cb) => setTimeout(function () {",
											"        pm.sendRequest(decisionReadyConfig, (err, res) => {",
											"            if (err) throw new Error('decision ready call failed');",
											"",
											"            // set 'IDIQ questions' config",
											"            IDIQQuestionsConfig = {",
											"                url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQQuestionsPath,",
											"                method: 'POST',",
											"                header: {",
											"                    'Content-Type': 'application/json',",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                    })",
											"                }",
											"            }",
											"",
											"            cb(err, res);",
											"        })",
											"    }, timeout),",
											"",
											"    // get IDID Questions request",
											"    (cb) => pm.sendRequest(IDIQQuestionsConfig, (err, res) => {",
											"        if (err) throw new Error('create /identity/questions call failed');",
											"        const { applicationId, identityQuestions } = res.json();",
											"",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        pm.environment.set(\"question1\", identityQuestions[0].questionId);",
											"        pm.environment.set(\"question2\", identityQuestions[1].questionId);",
											"",
											"        // set 'IDIQ answers' config",
											"        IDIQAnswersConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQAnswersPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"                        \"identityAnswers\": [",
											"                            {",
											"                                \"questionId\": env.get('question1'),",
											"                                \"value\": 'NONE OF THE ABOVE / DOES NOT APPLY'",
											"                            },",
											"                            {",
											"                                \"questionId\": env.get('question2'),",
											"                                \"value\": 'NONE OF THE ABOVE / DOES NOT APPLY'",
											"                            }",
											"                        ]",
											"                    })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // IDID Answers request",
											"    (cb) => pm.sendRequest(IDIQAnswersConfig, (err, res) => {",
											"        if (err) throw new Error('create /identity/answers call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set 'accept offer' config",
											"        acceptOfferConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + acceptOfferPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // make accept-offer request",
											"    (cb) => pm.sendRequest(acceptOfferConfig, (err, res) => {",
											"        if (err) throw new Error('create /offer/accept call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set 'Esig setup' config",
											"        EsigSetupConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + esigSetupPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // make EsigSetup request",
											"    (cb) => pm.sendRequest(EsigSetupConfig, (err, res) => {",
											"        if (err) throw new Error('create /esig/setup call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"], (err, res) => console.info('All pre-requests completed', err, res));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { applicationId, messageId, nextStage, redirectUrl } = pm.response.json();",
											"",
											"// Happypath - Verify /esig/status request response status code is 200",
											"pm.test(\"/esig/status status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Happypath - Verify /esig/status endpoint response has property applicationId",
											"pm.test(\"Validate response body should have property 'applicationId'\", () => {",
											"    pm.expect(applicationId).to.be.a('string');",
											"    pm.expect(applicationId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /esig/status endpoint response has property messageId",
											"pm.test(\"Validate response body should have property 'messageId'\", () => {",
											"    pm.expect(messageId).to.be.a('string');",
											"    pm.expect(messageId.length).to.be.at.least(1);",
											"});",
											"",
											"// Happypath - Verify /esig/status response has property nextStage",
											"pm.test(\"Validate response body should have property 'nextStage'\", () => {",
											"    pm.expect(nextStage).to.be.a('string');",
											"    pm.expect(nextStage).to.eq(`RedirectToCheckout`);",
											"});",
											"",
											"// Happypath - Verify /esig/status response has property redirectUrl",
											"pm.test(\"Validate response body should have property 'redirectUrl'\", () => {",
											"    pm.expect(redirectUrl).to.be.a('string');",
											"    pm.expect(redirectUrl).to.contain(`https://argos.co.uk/?code=success&token=${applicationId}`);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{esig_status}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{esig_status}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-664-invalid-app-state-403-UnHappyPath [MOCKS]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_esig_status = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"errors\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"code\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"message\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"code\",",
											"            \"message\"",
											"          ]",
											"        }",
											"      ]",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"path\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"status\": {",
											"      \"type\": \"integer\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"errors\",",
											"    \"name\",",
											"    \"path\",",
											"    \"status\"",
											"  ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_esig_status\", response_schema_esig_status);",
											"",
											"// BEGIN UTIL FUNCTIONS",
											"function _series(tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries(tasks, cb = () => { }) {",
											"    return _series(tasks, cb);",
											"}",
											"// END UTIL FUNCTIONS",
											"",
											"const env = { get: variable => pm.environment.get(variable) }",
											"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
											"",
											"// getting values from env variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
											"const quotePath = pm.environment.get(\"quote\");",
											"const applyPath = pm.environment.get(\"apply\");",
											"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
											"const messagesPath = pm.environment.get(\"messages_path\");",
											"const IDIQQuestionsPath = pm.environment.get(\"IDIQ_questions\");",
											"const IDIQAnswersPath = pm.environment.get(\"IDIQ_answers\");",
											"const acceptOfferPath = pm.environment.get(\"acceptOffer\");",
											"const websocketHost = pm.environment.get(\"websocket_host\");",
											"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
											"const esigSetupPath = pm.environment.get(\"esig_setup\");",
											"const esigStatusPath = pm.environment.get(\"esig_status\");",
											"const byPassStrategyDOB = \"1900-01-01\";",
											"",
											"let getApplicationConfig;",
											"let validateBankAccountConfig;",
											"let createApplicationRequestConfig;",
											"let createQuoteConfig;",
											"let openWebsocketConnectionConfig;",
											"let applyConfig;",
											"let getAppRefConfig;",
											"let decisionReadyConfig;",
											"let IDIQQuestionsConfig;",
											"let IDIQAnswersConfig;",
											"let acceptOfferConfig;",
											"let EsigSetupConfig;",
											"let EsigStatusConfig;",
											"",
											"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
											"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
											"",
											"// set agreedDateTime",
											"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
											"",
											"// set timeout",
											"const timeout = pm.environment.name.includes('MOCKS') ? 1000 : 60000;",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"    \"messageId\": \"OTHER_REQUEST\",",
											"    \"customer\": {",
											"        \"customerId\": env.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": env.get('firstName'),",
											"        \"lastName\": env.get('lastName'),",
											"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": env.get(\"houseNumber1\"),",
											"            \"line1\": env.get(\"street1\"),",
											"            \"postCode\": env.get(\"postCode1\"),",
											"            \"town\": env.get(\"town1\"),",
											"            \"county\": env.get(\"county1\"),",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 310.00,",
											"        \"grossAmount\": 310.00,",
											"        \"discounts\": 0.00,",
											"        \"giftVouchers\": 0.00,",
											"        \"nectarPointsCurrencyValue\": 0.00",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"        \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300.00,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10.00,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: setupRequestBody",
											"    }",
											"};",
											"",
											"// validate bank account request body",
											"const validateBankAccountRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"sortCode\": \"070116\",",
											"    \"accountNumber\": \"00003536\",",
											"    \"accountOpenedMonth\": 1,",
											"    \"accountOpenedYear\": 2000",
											"})",
											"",
											"// create application request body",
											"const createApplicationRequestBody = JSON.stringify({",
											"    \"messageId\": env.get('messageId'),",
											"    \"termsAndConditions\": [",
											"        {",
											"            \"tsAndCsType\": \"CreditSubjectToStatus\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"HowWeWillUseYourData\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        },",
											"        {",
											"            \"tsAndCsType\": \"MarketingComms\",",
											"            \"agreed\": true,",
											"            \"agreedDateTime\": env.get(\"agreedDateTime\")",
											"        }",
											"    ],",
											"    \"customer\": {",
											"        \"additionalNeeds\":\"0\",",
											"        \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
											"        \"nationalityCode\": \"GB\",",
											"        \"numberOfDependents\": 1,",
											"        \"mobilePhoneNumber\": \"07558334222\",",
											"        \"monthlyMortgageRent\": 300,",
											"        \"dateOfBirth\": byPassStrategyDOB,",
											"        \"maritalStatusCode\": \"M\",",
											"        \"residentialStatusCode\": \"M\",",
											"        \"employment\": {",
											"            \"employerName\": \"n/a\",",
											"            \"employmentStatusCode\": \"EMP\",",
											"            \"occupationCode\": \"1\"",
											"        },",
											"        \"income\": {",
											"            \"yearlyIncomeBeforeTax\": 33000,",
											"            \"otherIncome\": 0",
											"        },",
											"        \"addresses\": [",
											"            {",
											"                \"addressType\": \"Current\",",
											"                \"startDate\": {",
											"                    \"month\": 2,",
											"                    \"year\": 2016",
											"                }",
											"            }",
											"        ]",
											"    },",
											"    \"creditPlan\": {",
											"        \"planNumber\": \"20010\",",
											"        \"periodDuration\": 12,",
											"        \"apr\": 1.0",
											"    }",
											"})",
											"",
											"// create quote request body",
											"const createQuoteRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"})",
											"",
											"// apply request body",
											"const applyRequestBody = JSON.stringify({",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox')",
											"})",
											"",
											"// Requests series (setup -> get application -> validate bank account -> create application -> create quote -> apply for loan -> (wait max 60secs) -> decison ready webhook -> get IDIQ -> post IDIQ -> accept offer -> Esig setup -> Esig status)",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId value: \", applicationId);",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set validateBankAccountConfig",
											"        validateBankAccountConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: validateBankAccountRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // validate bank account",
											"    (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
											"        if (err) throw new Error('/validate call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set createApplicationRequestConfig",
											"        createApplicationRequestConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: createApplicationRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create application",
											"    (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
											"        if (err) throw new Error('create /applications/applicationId call failed');",
											"",
											"        const { applicationId, loanApplicationReference } = res.json();",
											"        console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
											"",
											"        pm.environment.set(\"appRef\", loanApplicationReference);",
											"",
											"        // create quote request config",
											"        createQuoteConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // create quote",
											"    (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
											"        if (err) throw new Error('create /quote call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set `/apply` config ",
											"        applyConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: applyRequestBody",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // apply for loan",
											"    (cb) => pm.sendRequest(applyConfig, (err, res) => {",
											"        if (err) throw new Error('/apply call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set decisionReadyConfig ",
											"        decisionReadyConfig = {",
											"            url: websocketHost + decisionReadyPath,",
											"            method: 'POST',",
											"            header: {",
											"                'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
											"                'Content-Type': 'application/json',",
											"                'connection': 'keep-alive',",
											"                'HMACSecret': env.get('HMACSecret'),",
											"                'applicationId': env.get(\"applicationId\")",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    'appRef': env.get(\"appRef\"),",
											"                    'channel': \"Web\",",
											"                    'decision': \"Approved\",",
											"                    'status': \"PIDIQ\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // make decision-ready request & wait here for Origins to do its thing",
											"    (cb) => setTimeout(function () {",
											"        pm.sendRequest(decisionReadyConfig, (err, res) => {",
											"            if (err) throw new Error('decision ready call failed');",
											"",
											"            // set 'IDIQ questions' config",
											"            IDIQQuestionsConfig = {",
											"                url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQQuestionsPath,",
											"                method: 'POST',",
											"                header: {",
											"                    'Content-Type': 'application/json',",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                    })",
											"                }",
											"            }",
											"",
											"            cb(err, res);",
											"        })",
											"    }, timeout),",
											"",
											"    // IDID Questions request",
											"    (cb) => pm.sendRequest(IDIQQuestionsConfig, (err, res) => {",
											"        if (err) throw new Error('create /identity/questions call failed');",
											"        const { applicationId, identityQuestions } = res.json();",
											"",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        pm.environment.set(\"question1\", identityQuestions[0].questionId);",
											"        pm.environment.set(\"question2\", identityQuestions[1].questionId);",
											"",
											"        // set 'IDIQ answers' config",
											"        IDIQAnswersConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQAnswersPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"                        \"identityAnswers\": [",
											"                            {",
											"                                \"questionId\": env.get('question1'),",
											"                                \"value\": 'NONE OF THE ABOVE / DOES NOT APPLY'",
											"                            },",
											"                            {",
											"                                \"questionId\": env.get('question2'),",
											"                                \"value\": 'NONE OF THE ABOVE / DOES NOT APPLY'",
											"                            }",
											"                        ]",
											"                    })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // IDID Answers request",
											"    (cb) => pm.sendRequest(IDIQAnswersConfig, (err, res) => {",
											"        if (err) throw new Error('create /identity/answers call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set 'accept offer' config",
											"        acceptOfferConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + acceptOfferPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // accept offer request",
											"    (cb) => pm.sendRequest(acceptOfferConfig, (err, res) => {",
											"        if (err) throw new Error('create /offer/accept call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set 'Esig setup' config",
											"        EsigSetupConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + esigSetupPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // EsigSetup request",
											"    (cb) => pm.sendRequest(EsigSetupConfig, (err, res) => {",
											"        if (err) throw new Error('create /esig/setup call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        // set 'Esig status' config",
											"        EsigStatusConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + esigStatusPath,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
											"                })",
											"            }",
											"        }",
											"",
											"        cb(err, res);",
											"    }),",
											"",
											"    // EsigStatus request",
											"    (cb) => pm.sendRequest(EsigStatusConfig, (err, res) => {",
											"        if (err) throw new Error('create /esig/status call failed');",
											"        const { applicationId } = res.json();",
											"        console.info(\"applicationId = \" + applicationId);",
											"",
											"        cb(err, res);",
											"    })",
											"], (err, res) => console.info('All pre-requests completed', err, res));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Unhappypath - Verify error code 403 from create 'esig/status' when application state is invalid",
											"pm.test(\"Accept offer status code is 403\", ()=> {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Unhappypath - Verify error if application state is invalid",
											"pm.test(\"Validate 'invalid Application State' error in response body'\", function () {",
											"    const { code, message } = pm.response.json().errors[0];",
											"    pm.expect(code).to.eql(\"APPLICATION_STATE_INVALID\");",
											"    pm.expect(message).to.eql(\"Invalid Application State\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{esig_status}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{esig_status}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-2613-esig-status-validation-data-driven [MOCKS][ORIGINS]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"/* BEGIN UTILITY FUNCTIONS */",
											"",
											"function _series (tasks, cb, currOperation = 0, results = []) {",
											"    if (currOperation === tasks.length) {",
											"        return cb(null, results);",
											"    }",
											"    if (typeof tasks[currOperation] !== 'function') {",
											"        return cb(new Error('asyncSeries: Please provide a function'));",
											"    }",
											"    tasks[currOperation]((err, res) => {",
											"        if (err) {",
											"            return cb(err);",
											"        }",
											"        results.push(res);",
											"        return _series(tasks, cb, currOperation + 1, results);",
											"    });",
											"}",
											"",
											"function asyncSeries (tasks, cb = () => {}) {",
											"    return _series(tasks, cb);",
											"}",
											"",
											"/* END UTILITY FUNITONS */",
											"",
											"",
											"",
											"/* PRE-REQUEST SETUP */",
											"",
											"// We need to get a session cookie from the getApplicaiton endpoint to run our tests",
											"// so before we do anything else, we Setup a dummy application and get it",
											"// PostMan automatically save the response cookie for us so we don't need to do any post processing",
											"",
											"// Get URL components",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const b2cPath = pm.environment.get(\"b2c\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"",
											"// Generate expiry time",
											"const expiryTime = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString();",
											"",
											"// Setup dummy application",
											"const setupRequestBody = {",
											"    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
											"    \"customer\": {",
											"        \"customerId\": pm.environment.get('customerId'),",
											"        \"title\": \"Mr\",",
											"        \"firstName\": pm.environment.get('firstName'),",
											"        \"lastName\": pm.environment.get('lastName'),",
											"        \"emailAddress\":  `${this.firstName}.${this.lastName}@gmail.com`,",
											"        \"billingAddress\": {",
											"            \"houseNumber\": pm.environment.get(\"houseNumber1\"),",
											"            \"line1\": pm.environment.get(\"street1\"),",
											"            \"postCode\": pm.environment.get(\"postCode1\"),",
											"            \"town\": pm.environment.get(\"town1\"),",
											"            \"county\": pm.environment.get(\"county1\"),",
											"        }",
											"    },",
											"    \"basket\": {",
											"        \"financeAmount\": 320,",
											"        \"grossAmount\": 320,",
											"        \"discounts\": 0,",
											"        \"giftVouchers\": 0,",
											"        \"nectarPointsCurrencyValue\": 0",
											"    },",
											"    \"others\": {",
											"        \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"        \"origin\": \"argos\",",
											"        \"ipAddress\": \"99.99.99.99\",",
											"        \"collectionStoreId\": \"12345\",",
											"        \"userAgent\": \"FrontendTesting/1.00\",",
											"        \"collectionStorePostCode\": \"BT14 6NE\",",
											"        \"fulfilmentChannel\": \"Collection\",",
											"        \"creditPlanId\": \"20010\",",
											"        \"checkoutSessionExpiryTime\": expiryTime,",
											"        \"stockHoldExpiryTime\": expiryTime,",
											"        \"purchaseChannel\": \"Web\"",
											"    },",
											"    \"products\": [",
											"        {",
											"            \"quantity\": 1,",
											"            \"sku\": 1000,",
											"            \"unitPrice\": 300,",
											"            \"description\": \"Samsung TV\"",
											"        },",
											"        {",
											"            \"quantity\": 2,",
											"            \"sku\": 2313131323,",
											"            \"unitPrice\": 10,",
											"            \"description\": \"AA Batteries\"",
											"        }",
											"    ]",
											"};",
											"",
											"// Setup request config",
											"const setupConfig = {",
											"    url: baseURL + b2bPath + sessionPath + setupPath, //building the url path",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(setupRequestBody)",
											"    }",
											"};",
											"",
											"// Get dummy application and auth cookie",
											"asyncSeries([",
											"    // application setup",
											"    (cb) => pm.sendRequest(setupConfig, (err, res) => {",
											"        if (err) throw new Error(`/setup call failed`);",
											"",
											"        const { applicationId } = res.json();",
											"        pm.environment.set(\"applicationId\", applicationId);",
											"        ",
											"        //Now that we have the application ID, set up the config for the next request",
											"        getApplicationConfig = {",
											"            url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json'",
											"            }",
											"        };",
											"        ",
											"        //Always call the callback to progess to the next request.",
											"        cb(err, res);",
											"    }),",
											"    ",
											"    // get application",
											"    (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
											"        if (err) throw new Error('get application call failed');",
											"    }),",
											"    ",
											"], (err, res) => console.info('All pre-requests completed', err, res));",
											"",
											"",
											"/* END PRE-REQUEST SETUP */",
											"",
											"",
											"",
											"// Now we can build the request body for our tests using the test iteration data file",
											"",
											"// Array of request keys",
											"const requestKeys = [",
											"    'messageId',",
											"];",
											"",
											"const body = {};",
											"",
											"// Assign values to request body",
											"for( let i in requestKeys){",
											"    const key = requestKeys[i];",
											"    const value = pm.iterationData.get(key);",
											"    if (value !== undefined) {",
											"        body[key] = value;",
											"    }",
											"}",
											"",
											"// Set in request",
											"pm.environment.set('req_body', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(pm.iterationData.get(\"testName\"), ()=> {",
											"    console.info(pm.response.json());",
											"",
											"    const expectedErrorMessage = pm.iterationData.get(\"expectedErrorMessage\");",
											"    const { message: actualErrorMessage } = pm.response.json().errors[0];",
											"    pm.expect(actualErrorMessage).to.eq(expectedErrorMessage);",
											"",
											"    const expectedErrorName = pm.iterationData.get(\"expectedErrorName\");",
											"    const actualErrorName = pm.response.json().name;",
											"    pm.expect(actualErrorName).to.eq(expectedErrorName);",
											"    ",
											"    const expectedResponseCode = pm.iterationData.get(\"expectedResponseCode\");",
											"    const actualResponseCode = pm.response.code;",
											"    pm.expect(actualResponseCode).to.eq(expectedResponseCode);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{req_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{esig_status}}",
									"host": [
										"{{dev3}}{{b2c}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{esig_status}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ACTIVATE",
					"item": [
						{
							"name": "FPP-2600-activate-validation-data-driven",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(pm.iterationData.get(\"testName\"), ()=> {",
											"    const expectedErrorMessage = pm.iterationData.get(\"expectedErrorMessage\");",
											"    const { message: actualErrorMessage } = pm.response.json().errors[0];",
											"    pm.expect(actualErrorMessage).to.eq(expectedErrorMessage);",
											"",
											"    const expectedErrorName = pm.iterationData.get(\"expectedErrorName\");",
											"    const actualErrorName = pm.response.json().name;",
											"    pm.expect(actualErrorName).to.eq(expectedErrorName);",
											"    ",
											"    const expectedResponseCode = pm.iterationData.get(\"expectedResponseCode\");",
											"    const actualResponseCode = pm.response.code;",
											"    pm.expect(actualResponseCode).to.eq(expectedResponseCode);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Array of request keys",
											"const requestKeys = [",
											"    'messageId',",
											"    'loanApplicationReference',",
											"    'fppSettlementAmount',",
											"];",
											"",
											"const body = {};",
											"",
											"// Assign values to request body",
											"for( let i in requestKeys){",
											"    const key = requestKeys[i];",
											"    const value = pm.iterationData.get(key);",
											"    if (value !== undefined) {",
											"        body[key] = value;",
											"    }",
											"}",
											"",
											"// Set in request",
											"pm.environment.set('req_body', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{req_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2b}}/v1/loans/activate",
									"host": [
										"{{dev3}}{{b2b}}"
									],
									"path": [
										"v1",
										"loans",
										"activate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AUTH",
					"item": [
						{
							"name": "FPP-2599-auth-validation-data-driven",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Array of request keys",
											"const requestKeys = [",
											"    'messageId',",
											"    'verificationToken',",
											"    'customer',",
											"    'authAmount'",
											"];",
											"",
											"const body = {};",
											"",
											"// Assign values to request body",
											"for( let i in requestKeys){",
											"    const key = requestKeys[i];",
											"    const value = pm.iterationData.get(key);",
											"    if (value !== undefined) {",
											"        body[key] = value;",
											"    }",
											"}",
											"",
											"// Set in request",
											"pm.environment.set('req_body', JSON.stringify(body));",
											"",
											"// set uuid",
											"const uuid = require('uuid');",
											"pm.environment.set('messageId', uuid.v4())",
											"",
											"// function to get env variables",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// get environment variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": env.get('firstName') + \".\" + env.get('lastName') + \"@gmail.com\",",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\")",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// unset applicationId if already set",
											"if (env.get('applicationId')) pm.environment.unset('applicationId');",
											"",
											"// call /setup & set verificationToken",
											"pm.sendRequest(setupConfig, (err, res) => {",
											"    if (err) throw new Error(`/setup call failed`);",
											"",
											"    const { applicationId } = res.json();",
											"    console.info(\"applicationId = \" + applicationId);",
											"    pm.environment.set('applicationId', applicationId);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const { code, message: errors } = pm.response.json().errors[0];",
											"const actualErrorsArray = errors.split(\". \").map(error => error.replace(/\\\"/g, ''));",
											"",
											"// Unhappypath - Verify /auth required fields status code 400",
											"pm.test(\"Create application status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Unhappypath - Verify /auth request parameters required error object",
											"pm.test(`Verify '${pm.iterationData.get(\"scenario\")}' error object`, ()=> {",
											"    console.info('actual error message is: ' + actualErrorsArray + '\\n\\n' + 'expected error message is: ' + pm.iterationData.get(\"errorDescription\"));",
											"",
											"    pm.expect(code).to.eq('AUTH_PAYMENT_REQUEST_INVALID');",
											"    pm.expect(pm.iterationData.get(\"errorDescription\")).to.have.members(actualErrorsArray);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{req_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2b}}{{getsession}}/{{applicationId}}{{auth}}",
									"host": [
										"{{dev3}}{{b2b}}{{getsession}}"
									],
									"path": [
										"{{applicationId}}{{auth}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FPP-2599-auth-400-invalid-application-Id-UnHappyPath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var response_schema_auth = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"code\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"message\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"code\",",
											"                        \"message\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"name\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"path\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"status\": {",
											"            \"type\": \"integer\"",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"errors\",",
											"        \"name\",",
											"        \"path\",",
											"        \"status\"",
											"    ]",
											"}",
											"",
											"pm.collectionVariables.set(\"schema_post_auth\", response_schema_auth);",
											"",
											"// set uuid",
											"const uuid = require('uuid');",
											"pm.environment.set('messageId', uuid.v4())",
											"",
											"// function to get env variables",
											"const env = { get: variable => pm.environment.get(variable) }",
											"",
											"// get environment variables",
											"const baseURL = pm.environment.get(\"dev3\");",
											"const b2bPath = pm.environment.get(\"b2b\");",
											"const sessionPath = pm.environment.get(\"getsession\");",
											"const setupPath = pm.environment.get(\"setup\");",
											"",
											"// setup request body",
											"const setupRequestBody = JSON.stringify({",
											"  \"messageId\": \"OTHER_REQUEST\",",
											"  \"customer\": {",
											"    \"customerId\": env.get('customerId'),",
											"    \"title\": \"Mr\",",
											"    \"firstName\": env.get('firstName'),",
											"    \"lastName\": env.get('lastName'),",
											"    \"emailAddress\": env.get('firstName') + \".\" + env.get('lastName') + \"@gmail.com\",",
											"    \"billingAddress\": {",
											"      \"houseNumber\": env.get(\"houseNumber1\"),",
											"      \"line1\": env.get(\"street1\"),",
											"      \"postCode\": env.get(\"postCode1\"),",
											"      \"town\": env.get(\"town1\"),",
											"      \"county\": env.get(\"county1\")",
											"    }",
											"  },",
											"  \"basket\": {",
											"    \"financeAmount\": 310.00, ",
											"    \"grossAmount\": 310.00, ",
											"    \"discounts\": 0.00, ",
											"    \"giftVouchers\": 0.00, ",
											"    \"nectarPointsCurrencyValue\": 0.00 ",
											"  },",
											"  \"others\": {",
											"    \"checkoutCallbackUrl\": \"https://www.argos.co.uk\",",
											"    \"origin\": \"argos\", ",
											"    \"ipAddress\": \"99.99.99.99\",",
											"    \"collectionStoreId\": \"12345\", ",
											"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\", ",
											"    \"collectionStorePostCode\": \"BT14 6NE\", ",
											"    \"fulfilmentChannel\": \"Collection\", ",
											"    \"creditPlanId\": \"20010\", ",
											"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
											"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
											"    \"purchaseChannel\": \"Web\" ",
											"  },",
											"  \"products\": [",
											"    {",
											"      \"quantity\": 1,",
											"      \"sku\": 1000,",
											"      \"unitPrice\": 300.00,",
											"      \"description\": \"Samsung TV\"",
											"    },",
											"    {",
											"      \"quantity\": 2,",
											"      \"sku\": 2313131323,",
											"      \"unitPrice\": 10.00,",
											"      \"description\": \"AA Batteries\"",
											"    }",
											"  ]",
											"});",
											"",
											"// setup request config",
											"const setupConfig = {",
											"  url: baseURL + b2bPath + sessionPath + setupPath,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: setupRequestBody",
											"  }",
											"};",
											"",
											"// call /setup & set verificationToken",
											"pm.sendRequest(setupConfig, (err, res) => {",
											"    if (err) throw new Error(`/setup call failed`);",
											"    pm.environment.set('verificationToken', res.json().verificationToken);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Unhappypath - Verify '/auth' response code is 400",
											"pm.test(\"Verify /auth endpoint status code is 400\", ()=> {",
											"    pm.expect(pm.response.code).to.eq(400);",
											"});",
											"",
											"// Unhappypath - Verify '/auth' response error'",
											"pm.test(\"Verify '/auth' endpoint error message\", ()=> {",
											"    const { code, message: errorMessage } = pm.response.json().errors[0];",
											"",
											"    pm.expect(code).to.eq('APPLICATION_ID_INVALID');",
											"    pm.expect(errorMessage).to.eq(\"Invalid Application Id\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageId\": \"{{messageId}}\",\n    \"verificationToken\": \"{{verificationToken}}\",\n    \"customer\": {\n        \"title\": \"Mr\",\n        \"firstName\": \"Kevin\",\n        \"lastName\": \"McCaffrey\",\n        \"middleName\": \"\",\n        \"billingAddress\": {\n            \"houseNumber\": \"22\",\n            \"line1\": \"Ashgrove Park\",\n            \"line2\": \"null road\",\n            \"postCode\": \"BT14 6NE\",\n            \"town\": \"Belfast\",\n            \"county\": \"Antrim\"\n        }\n    },\n    \"authAmount\": 299.99\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev3}}{{b2b}}{{getsession}}{{error400}}{{auth}}",
									"host": [
										"{{dev3}}{{b2b}}{{getsession}}{{error400}}{{auth}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "BLOCKED_TESTS",
					"item": [
						{
							"name": "IDIQ (BLOCKED TESTS)",
							"item": []
						},
						{
							"name": "POST_IDENTITY_ANSWERS (BLOCKED TESTS)",
							"item": []
						},
						{
							"name": "ACCEPT_OFFER (BLOCKED TESTS)",
							"item": [
								{
									"name": "BLOCKED-FPP-246-invalid-app-state-403-UnHappyPath",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var response_schema_accept_offer = {",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"applicationId\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"messageId\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"nextStage\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"applicationId\",",
													"    \"messageId\",",
													"    \"nextStage\"",
													"  ]",
													"}",
													"",
													"pm.collectionVariables.set(\"schema_accept_offer\", response_schema_accept_offer);",
													"",
													"// BEGIN UTIL FUNCTIONS",
													"function _series(tasks, cb, currOperation = 0, results = []) {",
													"  if (currOperation === tasks.length) {",
													"    return cb(null, results);",
													"  }",
													"",
													"  if (typeof tasks[currOperation] !== 'function') {",
													"    return cb(new Error('asyncSeries: Please provide a function'));",
													"  }",
													"",
													"  tasks[currOperation]((err, res) => {",
													"    if (err) {",
													"      return cb(err);",
													"    }",
													"",
													"    results.push(res);",
													"    return _series(tasks, cb, currOperation + 1, results);",
													"  });",
													"}",
													"",
													"function asyncSeries(tasks, cb = () => { }) {",
													"  return _series(tasks, cb);",
													"}",
													"// END UTIL FUNCTIONS",
													"",
													"const env = { get: variable => pm.environment.get(variable) }",
													"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
													"",
													"// getting values from env variables",
													"const baseURL = pm.environment.get(\"dev3\");",
													"const b2bPath = pm.environment.get(\"b2b\");",
													"const b2cPath = pm.environment.get(\"b2c\");",
													"const sessionPath = pm.environment.get(\"getsession\");",
													"const setupPath = pm.environment.get(\"setup\");",
													"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
													"const quotePath = pm.environment.get(\"quote\");",
													"const applyPath = pm.environment.get(\"apply\");",
													"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
													"const messagesPath = pm.environment.get(\"messages_path\");",
													"const IDIQQuestionsPath = pm.environment.get(\"IDIQ_questions\");",
													"const IDIQAnswersPath = pm.environment.get(\"IDIQ_answers\");",
													"const acceptOfferPath = pm.environment.get(\"acceptOffer\");",
													"const websocketHost = pm.environment.get(\"websocket_host\");",
													"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
													"const dobConstants = {",
													"    \"Date of Entry on CTDB\": 42818,",
													"    \"DOB\": 26907,",
													"}",
													"",
													"let getApplicationConfig;",
													"let validateBankAccountConfig;",
													"let createApplicationRequestConfig;",
													"let createQuoteConfig;",
													"let openWebsocketConnectionConfig;",
													"let applyConfig;",
													"let getAppRefConfig;",
													"let decisionReadyConfig;",
													"let IDIQQuestionsConfig;",
													"let IDIQAnswersConfig;",
													"let acceptOfferConfig;",
													"",
													"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
													"const dateOfBirth = new Date(new Date() - (dobConstants[\"Date of Entry on CTDB\"] - dobConstants[\"DOB\"]) * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0];",
													"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
													"console.info(\"dateOfBirth = \" + dateOfBirth);",
													"",
													"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
													"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
													"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
													"",
													"// set agreedDateTime",
													"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
													"",
													"// setup request body",
													"const setupRequestBody = JSON.stringify({",
													"  \"messageId\": \"OTHER_REQUEST\",",
													"  \"customer\": {",
													"    \"customerId\": env.get('customerId'),",
													"    \"title\": \"Mr\",",
													"    \"firstName\": env.get('firstName'),",
													"    \"lastName\": env.get('lastName'),",
													"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
													"    \"billingAddress\": {",
													"      \"houseNumber\": env.get(\"houseNumber1\"),",
													"      \"line1\": env.get(\"street1\"),",
													"      \"postCode\": env.get(\"postCode1\"),",
													"      \"town\": env.get(\"town1\"),",
													"      \"county\": env.get(\"county1\"),",
													"    }",
													"  },",
													"  \"basket\": {",
													"    \"financeAmount\": 310.00,",
													"    \"grossAmount\": 310.00,",
													"    \"discounts\": 0.00,",
													"    \"giftVouchers\": 0.00,",
													"    \"nectarPointsCurrencyValue\": 0.00",
													"  },",
													"  \"others\": {",
													"    \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
													"    \"origin\": \"argos\",",
													"    \"ipAddress\": \"99.99.99.99\",",
													"    \"collectionStoreId\": \"12345\",",
													"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
													"    \"collectionStorePostCode\": \"BT14 6NE\",",
													"    \"fulfilmentChannel\": \"Collection\",",
													"    \"creditPlanId\": \"20010\",",
													"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
													"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
													"    \"purchaseChannel\": \"Web\"",
													"  },",
													"  \"products\": [",
													"    {",
													"      \"quantity\": 1,",
													"      \"sku\": 1000,",
													"      \"unitPrice\": 300.00,",
													"      \"description\": \"Samsung TV\"",
													"    },",
													"    {",
													"      \"quantity\": 2,",
													"      \"sku\": 2313131323,",
													"      \"unitPrice\": 10.00,",
													"      \"description\": \"AA Batteries\"",
													"    }",
													"  ]",
													"});",
													"",
													"// setup request config",
													"const setupConfig = {",
													"  url: baseURL + b2bPath + sessionPath + setupPath,",
													"  method: 'POST',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"  },",
													"  body: {",
													"    mode: 'raw',",
													"    raw: setupRequestBody",
													"  }",
													"};",
													"",
													"// validate bank account request body",
													"const validateBankAccountRequestBody = JSON.stringify({",
													"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
													"  \"sortCode\": \"070116\",",
													"  \"accountNumber\": \"00003536\",",
													"  \"accountOpenedMonth\": 1,",
													"  \"accountOpenedYear\": 2000",
													"})",
													"",
													"// create application request body",
													"const createApplicationRequestBody = JSON.stringify({",
													"  \"messageId\": env.get('messageId'),",
													"  \"termsAndConditions\": [",
													"    {",
													"      \"tsAndCsType\": \"CreditSubjectToStatus\",",
													"      \"agreed\": true,",
													"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
													"    },",
													"    {",
													"      \"tsAndCsType\": \"HowWeWillUseYourData\",",
													"      \"agreed\": true,",
													"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
													"    },",
													"    {",
													"      \"tsAndCsType\": \"MarketingComms\",",
													"      \"agreed\": true,",
													"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
													"    }",
													"  ],",
													"  \"customer\": {",
													"    \"additionalNeeds\":\"0\",",
													"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
													"    \"nationalityCode\": \"GB\",",
													"    \"numberOfDependents\": 1,",
													"    \"mobilePhoneNumber\": \"07558334222\",",
													"    \"monthlyMortgageRent\": 300,",
													"    \"dateOfBirth\": dateOfBirth,",
													"    \"maritalStatusCode\": \"M\",",
													"    \"residentialStatusCode\": \"M\",",
													"    \"employment\": {",
													"      \"employerName\": \"n/a\",",
													"      \"employmentStatusCode\": \"EMP\",",
													"      \"occupationCode\": \"1\"",
													"    },",
													"    \"income\": {",
													"      \"yearlyIncomeBeforeTax\": 33000,",
													"      \"otherIncome\": 0",
													"    },",
													"    \"addresses\": [",
													"      {",
													"        \"addressType\": \"Current\",",
													"        \"startDate\": {",
													"          \"month\": 2,",
													"          \"year\": 2016",
													"        }",
													"      }",
													"    ]",
													"  },",
													"  \"creditPlan\": {",
													"    \"planNumber\": \"20010\",",
													"    \"periodDuration\": 12,",
													"    \"apr\": 1.0",
													"  }",
													"})",
													"",
													"// create quote request body",
													"const createQuoteRequestBody = JSON.stringify({",
													"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
													"})",
													"",
													"// apply request body",
													"const applyRequestBody = JSON.stringify({",
													"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
													"  \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox'),",
													"  \"ipAddress\": \"99.99.99.99\"",
													"})",
													"",
													"// Requests series (application setup -> get application -> validate bank account -> create application -> create quote -> apply for loan -> (wait max 60secs) -> decison ready webhook -> get IDIQ -> post IDIQ)",
													"// asyncSeries([",
													"//     // application setup",
													"//     (cb) => pm.sendRequest(setupConfig, (err, res) => {",
													"//         if (err) throw new Error(`/setup call failed`);",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId value: \", applicationId);",
													"//         pm.environment.set(\"applicationId\", applicationId);",
													"",
													"//         //Now that we have the application ID, set up the config for the next request",
													"//         getApplicationConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
													"//             method: 'GET',",
													"//             header: {",
													"//                 'Content-Type': 'application/json'",
													"//             }",
													"//         };",
													"",
													"//         //Always call the callback to progess to the next request.",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // get application",
													"//     (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
													"//         if (err) throw new Error('get application call failed');",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         // set validateBankAccountConfig",
													"//         validateBankAccountConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'Content-Type': 'application/json',",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: validateBankAccountRequestBody",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // validate bank account",
													"//     (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
													"//         if (err) throw new Error('/validate call failed');",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         // set createApplicationRequestConfig",
													"//         createApplicationRequestConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'Content-Type': 'application/json',",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: createApplicationRequestBody",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // create application",
													"//     (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
													"//         if (err) throw new Error('create /applications/applicationId call failed');",
													"",
													"//         const { applicationId, loanApplicationReference } = res.json();",
													"//         console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
													"",
													"//         pm.environment.set(\"appRef\", loanApplicationReference);",
													"",
													"//         // create quote request config",
													"//         createQuoteConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'Content-Type': 'application/json',",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: JSON.stringify({",
													"//                     \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
													"//                 })",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // create quote",
													"//     (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
													"//         if (err) throw new Error('create /quote call failed');",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         // set `/apply` config ",
													"//         applyConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'Content-Type': 'application/json',",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: applyRequestBody",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // apply for loan",
													"//     (cb) => pm.sendRequest(applyConfig, (err, res) => {",
													"//         if (err) throw new Error('/apply call failed');",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         // set decisionReadyConfig ",
													"//         decisionReadyConfig = {",
													"//             url: websocketHost + decisionReadyPath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
													"//                 'Content-Type': 'application/json',",
													"//                 'connection': 'keep-alive',",
													"//                 'HMACSecret': env.get('HMACSecret'),",
													"//                 'applicationId': env.get(\"applicationId\")",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: JSON.stringify({",
													"//                     'appRef': env.get(\"appRef\"),",
													"//                     'channel': \"Web\",",
													"//                     'decision': \"Approved\",",
													"//                     'status': \"PIDIQ\"",
													"//                 })",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // wait here for origins to do its thing",
													"//     (cb) => setTimeout(function () {",
													"//         pm.sendRequest(decisionReadyConfig, (err, res) => {",
													"//             if (err) throw new Error('decision ready call failed');",
													"",
													"//             // set 'IDIQ questions' config",
													"//             IDIQQuestionsConfig = {",
													"//                 url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQQuestionsPath,",
													"//                 method: 'POST',",
													"//                 header: {",
													"//                     'Content-Type': 'application/json',",
													"//                 },",
													"//                 body: {",
													"//                     mode: 'raw',",
													"//                     raw: JSON.stringify({",
													"//                         \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
													"//                     })",
													"//                 }",
													"//             }",
													"",
													"//             cb(err, res);",
													"//         })",
													"//     }, 60000),",
													"",
													"//     // IDID Questions request",
													"//     (cb) => pm.sendRequest(IDIQQuestionsConfig, (err, res) => {",
													"//         if (err) throw new Error('create /identity/questions call failed');",
													"//         const { applicationId, identityQuestions } = res.json();",
													"",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         pm.environment.set(\"question1\", identityQuestions[0].questionId);",
													"//         pm.environment.set(\"question2\", identityQuestions[1].questionId);",
													"",
													"//         // set 'IDIQ answers' config",
													"//         IDIQAnswersConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQAnswersPath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'Content-Type': 'application/json',",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: JSON.stringify({",
													"//                         \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
													"//                         \"identityAnswers\": [",
													"//                             {",
													"//                                 \"questionId\": env.get('question1'),",
													"//                                 \"value\": 'NONE OF THE ABOVE / DOES NOT APPLY'",
													"//                             },",
													"//                             {",
													"//                                 \"questionId\": env.get('question2'),",
													"//                                 \"value\": 'NONE OF THE ABOVE / DOES NOT APPLY'",
													"//                             }",
													"//                         ]",
													"//                     })",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // IDID Answers request",
													"//     (cb) => pm.sendRequest(IDIQAnswersConfig, (err, res) => {",
													"//         if (err) throw new Error('create /identity/answers call failed');",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         // set 'accept offer' config",
													"//         acceptOfferConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + acceptOfferPath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'Content-Type': 'application/json',",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: JSON.stringify({",
													"//                     \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
													"//                 })",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // accept offer request",
													"//     (cb) => pm.sendRequest(acceptOfferConfig, (err, res) => {",
													"//         if (err) throw new Error('create /offer/accept call failed');",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"// ], (err, res) => console.info('All pre-requests completed', err, res));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"/**",
													" * WARNING!!!",
													" * ========================================================================",
													" * To run these tests you require a user who passes 'decision ready'.",
													" * There is ongoing work to mock Origins. Until that's ready, these tests are commented out",
													" */",
													"",
													" throw new Error(\"Wait for ongoing work to mock Origins to be completed\");",
													"",
													"// // Unhappypath - Verify error code 403 from create 'accept offer' when application state is invalid",
													"// pm.test(\"Accept offer status code is 403\", ()=> {",
													"//     pm.response.to.have.status(403);",
													"// });",
													"",
													"// // Unhappypath - Verify error description if application does not exist",
													"// pm.test(\"Validate 'invalid Application State' error description in response body'\", function () {",
													"//     const { message } = pm.response.json().errors[0];",
													"//     pm.expect(message).to.eql(\"Invalid Application State\");",
													"// });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followOriginalHttpMethod": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{acceptOffer}}",
											"host": [
												"{{dev3}}{{b2c}}{{getsession}}"
											],
											"path": [
												"{{applicationId}}{{acceptOffer}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ESIG_SETUP (BLOCKED TESTS)",
							"item": [
								{
									"name": "BLOCKED-FPP-1243-invalid-app-state-403-UnHappyPath",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var response_schema_esig_setup = {",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"applicationId\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"messageId\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"redirectUrl\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"applicationId\",",
													"    \"messageId\",",
													"    \"redirectUrl\"",
													"  ]",
													"}",
													"",
													"pm.collectionVariables.set(\"schema_esig_setup\", response_schema_esig_setup);",
													"",
													"// BEGIN UTIL FUNCTIONS",
													"function _series(tasks, cb, currOperation = 0, results = []) {",
													"  if (currOperation === tasks.length) {",
													"    return cb(null, results);",
													"  }",
													"",
													"  if (typeof tasks[currOperation] !== 'function') {",
													"    return cb(new Error('asyncSeries: Please provide a function'));",
													"  }",
													"",
													"  tasks[currOperation]((err, res) => {",
													"    if (err) {",
													"      return cb(err);",
													"    }",
													"",
													"    results.push(res);",
													"    return _series(tasks, cb, currOperation + 1, results);",
													"  });",
													"}",
													"",
													"function asyncSeries(tasks, cb = () => { }) {",
													"  return _series(tasks, cb);",
													"}",
													"// END UTIL FUNCTIONS",
													"",
													"const env = { get: variable => pm.environment.get(variable) }",
													"const getISODateTime = interval => new Date(Date.now() + interval).toISOString();",
													"",
													"// getting values from env variables",
													"const baseURL = pm.environment.get(\"dev3\");",
													"const b2bPath = pm.environment.get(\"b2b\");",
													"const b2cPath = pm.environment.get(\"b2c\");",
													"const sessionPath = pm.environment.get(\"getsession\");",
													"const setupPath = pm.environment.get(\"setup\");",
													"const bankAccountValidatePath = pm.environment.get(\"bankaccount_validate\");",
													"const quotePath = pm.environment.get(\"quote\");",
													"const applyPath = pm.environment.get(\"apply\");",
													"const decisionReadyPath = pm.environment.get(\"decison_ready\");",
													"const messagesPath = pm.environment.get(\"messages_path\");",
													"const IDIQQuestionsPath = pm.environment.get(\"IDIQ_questions\");",
													"const IDIQAnswersPath = pm.environment.get(\"IDIQ_answers\");",
													"const acceptOfferPath = pm.environment.get(\"acceptOffer\");",
													"const websocketHost = pm.environment.get(\"websocket_host\");",
													"const decisonReadyApiLambda = pm.environment.get(\"decison_ready_api_lambda\");",
													"const dobConstants = {",
													"    \"Date of Entry on CTDB\": 42818,",
													"    \"DOB\": 26907,",
													"}",
													"",
													"",
													"let getApplicationConfig;",
													"let validateBankAccountConfig;",
													"let createApplicationRequestConfig;",
													"let createQuoteConfig;",
													"let openWebsocketConnectionConfig;",
													"let applyConfig;",
													"let getAppRefConfig;",
													"let decisionReadyConfig;",
													"let IDIQQuestionsConfig;",
													"let IDIQAnswersConfig;",
													"let acceptOfferConfig;",
													"",
													"// Create Date of Birth (Customer is over 18 years old at the point of loan application)",
													"const dateOfBirth = new Date(new Date() - (dobConstants[\"Date of Entry on CTDB\"] - dobConstants[\"DOB\"]) * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0];",
													"pm.environment.set(\"dateOfBirth\", dateOfBirth);",
													"console.info(\"dateOfBirth = \" + dateOfBirth);",
													"",
													"// set checkoutSessionExpiryTime & stockHoldExpiryTime",
													"pm.environment.set(\"checkoutSessionExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
													"pm.environment.set(\"stockHoldExpiryTime\", getISODateTime(7 * 24 * 60 * 60 * 1000));",
													"",
													"// set agreedDateTime",
													"pm.environment.set(\"agreedDateTime\", getISODateTime(24 * 60 * 60 * 1000));",
													"",
													"// setup request body",
													"const setupRequestBody = JSON.stringify({",
													"  \"messageId\": \"OTHER_REQUEST\",",
													"  \"customer\": {",
													"    \"customerId\": env.get('customerId'),",
													"    \"title\": \"Mr\",",
													"    \"firstName\": env.get('firstName'),",
													"    \"lastName\": env.get('lastName'),",
													"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
													"    \"billingAddress\": {",
													"      \"houseNumber\": env.get(\"houseNumber1\"),",
													"      \"line1\": env.get(\"street1\"),",
													"      \"postCode\": env.get(\"postCode1\"),",
													"      \"town\": env.get(\"town1\"),",
													"      \"county\": env.get(\"county1\"),",
													"    }",
													"  },",
													"  \"basket\": {",
													"    \"financeAmount\": 310.00,",
													"    \"grossAmount\": 310.00,",
													"    \"discounts\": 0.00,",
													"    \"giftVouchers\": 0.00,",
													"    \"nectarPointsCurrencyValue\": 0.00",
													"  },",
													"  \"others\": {",
													"    \"checkoutCallbackUrl\": \"https://argos.co.uk\",",
													"    \"origin\": \"argos\",",
													"    \"ipAddress\": \"99.99.99.99\",",
													"    \"collectionStoreId\": \"12345\",",
													"    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",",
													"    \"collectionStorePostCode\": \"BT14 6NE\",",
													"    \"fulfilmentChannel\": \"Collection\",",
													"    \"creditPlanId\": \"20010\",",
													"    \"checkoutSessionExpiryTime\": env.get('checkoutSessionExpiryTime'),",
													"    \"stockHoldExpiryTime\": env.get('stockHoldExpiryTime'),",
													"    \"purchaseChannel\": \"Web\"",
													"  },",
													"  \"products\": [",
													"    {",
													"      \"quantity\": 1,",
													"      \"sku\": 1000,",
													"      \"unitPrice\": 300.00,",
													"      \"description\": \"Samsung TV\"",
													"    },",
													"    {",
													"      \"quantity\": 2,",
													"      \"sku\": 2313131323,",
													"      \"unitPrice\": 10.00,",
													"      \"description\": \"AA Batteries\"",
													"    }",
													"  ]",
													"});",
													"",
													"// setup request config",
													"const setupConfig = {",
													"  url: baseURL + b2bPath + sessionPath + setupPath,",
													"  method: 'POST',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"  },",
													"  body: {",
													"    mode: 'raw',",
													"    raw: setupRequestBody",
													"  }",
													"};",
													"",
													"// validate bank account request body",
													"const validateBankAccountRequestBody = JSON.stringify({",
													"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
													"  \"sortCode\": \"070116\",",
													"  \"accountNumber\": \"00003536\",",
													"  \"accountOpenedMonth\": 1,",
													"  \"accountOpenedYear\": 2000",
													"})",
													"",
													"// create application request body",
													"const createApplicationRequestBody = JSON.stringify({",
													"  \"messageId\": env.get('messageId'),",
													"  \"termsAndConditions\": [",
													"    {",
													"      \"tsAndCsType\": \"CreditSubjectToStatus\",",
													"      \"agreed\": true,",
													"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
													"    },",
													"    {",
													"      \"tsAndCsType\": \"HowWeWillUseYourData\",",
													"      \"agreed\": true,",
													"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
													"    },",
													"    {",
													"      \"tsAndCsType\": \"MarketingComms\",",
													"      \"agreed\": true,",
													"      \"agreedDateTime\": env.get(\"agreedDateTime\")",
													"    }",
													"  ],",
													"  \"customer\": {",
													"    \"additionalNeeds\":\"0\",",
													"    \"emailAddress\": `${env.get('firstName')}.${env.get('lastName')}@gmail.com`,",
													"    \"nationalityCode\": \"GB\",",
													"    \"numberOfDependents\": 1,",
													"    \"mobilePhoneNumber\": \"07558334222\",",
													"    \"monthlyMortgageRent\": 300,",
													"    \"dateOfBirth\": dateOfBirth,",
													"    \"maritalStatusCode\": \"M\",",
													"    \"residentialStatusCode\": \"M\",",
													"    \"employment\": {",
													"      \"employerName\": \"n/a\",",
													"      \"employmentStatusCode\": \"EMP\",",
													"      \"occupationCode\": \"1\"",
													"    },",
													"    \"income\": {",
													"      \"yearlyIncomeBeforeTax\": 33000,",
													"      \"otherIncome\": 0",
													"    },",
													"    \"addresses\": [",
													"      {",
													"        \"addressType\": \"Current\",",
													"        \"startDate\": {",
													"          \"month\": 2,",
													"          \"year\": 2016",
													"        }",
													"      }",
													"    ]",
													"  },",
													"  \"creditPlan\": {",
													"    \"planNumber\": \"20010\",",
													"    \"periodDuration\": 12,",
													"    \"apr\": 1.0",
													"  }",
													"})",
													"",
													"// create quote request body",
													"const createQuoteRequestBody = JSON.stringify({",
													"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
													"})",
													"",
													"// apply request body",
													"const applyRequestBody = JSON.stringify({",
													"  \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
													"  \"deviceRiskBlackBox\": env.get('deviceRiskBlackBox'),",
													"  \"ipAddress\": \"99.99.99.99\"",
													"})",
													"",
													"// Requests series (application setup -> get application -> validate bank account -> create application -> create quote -> apply for loan -> (wait max 60secs) -> decison ready webhook -> get IDIQ -> post IDIQ)",
													"// asyncSeries([",
													"//     // application setup",
													"//     (cb) => pm.sendRequest(setupConfig, (err, res) => {",
													"//         if (err) throw new Error(`/setup call failed`);",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId value: \", applicationId);",
													"//         pm.environment.set(\"applicationId\", applicationId);",
													"",
													"//         //Now that we have the application ID, set up the config for the next request",
													"//         getApplicationConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
													"//             method: 'GET',",
													"//             header: {",
													"//                 'Content-Type': 'application/json'",
													"//             }",
													"//         };",
													"",
													"//         //Always call the callback to progess to the next request.",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // get application",
													"//     (cb) => pm.sendRequest(getApplicationConfig, (err, res) => {",
													"//         if (err) throw new Error('get application call failed');",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         // set validateBankAccountConfig",
													"//         validateBankAccountConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + bankAccountValidatePath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'Content-Type': 'application/json',",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: validateBankAccountRequestBody",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // validate bank account",
													"//     (cb) => pm.sendRequest(validateBankAccountConfig, (err, res) => {",
													"//         if (err) throw new Error('/validate call failed');",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         // set createApplicationRequestConfig",
													"//         createApplicationRequestConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\"),",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'Content-Type': 'application/json',",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: createApplicationRequestBody",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // create application",
													"//     (cb) => pm.sendRequest(createApplicationRequestConfig, (err, res) => {",
													"//         if (err) throw new Error('create /applications/applicationId call failed');",
													"",
													"//         const { applicationId, loanApplicationReference } = res.json();",
													"//         console.info(`applicationId: ${applicationId}, appRef: ${loanApplicationReference}`);",
													"",
													"//         pm.environment.set(\"appRef\", loanApplicationReference);",
													"",
													"//         // create quote request config",
													"//         createQuoteConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + quotePath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'Content-Type': 'application/json',",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: JSON.stringify({",
													"//                     \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
													"//                 })",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // create quote",
													"//     (cb) => pm.sendRequest(createQuoteConfig, (err, res) => {",
													"//         if (err) throw new Error('create /quote call failed');",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         // set websocket connection config",
													"//         openWebsocketConnectionConfig = {",
													"//             url: websocketHost + websocketConnectPath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'websocketURL': websocketBaseUrl + '/apply?appid=' + pm.environment.get(\"applicationId\"),",
													"//                 'applicationId': pm.environment.get(\"applicationId\"),",
													"//                 'connection': 'keep-alive',",
													"//                 'Content-Type': 'application/json',",
													"//                 'Accept-Encoding': 'gzip, deflate, br'",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     //  websocket connection",
													"//     (cb) => pm.sendRequest(openWebsocketConnectionConfig, (err, res) => {",
													"//         if (err) throw new Error('websocket connection failed');",
													"",
													"//         // set `/apply` config ",
													"//         applyConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + applyPath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'Content-Type': 'application/json',",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: applyRequestBody",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // apply for loan",
													"//     (cb) => pm.sendRequest(applyConfig, (err, res) => {",
													"//         if (err) throw new Error('/apply call failed');",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         // set decisionReadyConfig ",
													"//         decisionReadyConfig = {",
													"//             url: websocketHost + decisionReadyPath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'url': decisonReadyApiLambda + '/event/v1/fis' + decisionReadyPath,",
													"//                 'Content-Type': 'application/json',",
													"//                 'connection': 'keep-alive',",
													"//                 'HMACSecret': env.get('HMACSecret'),",
													"//                 'applicationId': env.get(\"applicationId\")",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: JSON.stringify({",
													"//                     'appRef': env.get(\"appRef\"),",
													"//                     'channel': \"Web\",",
													"//                     'decision': \"Approved\",",
													"//                     'status': \"PIDIQ\"",
													"//                 })",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // wait here for origins to do its thing",
													"//     (cb) => setTimeout(function () {",
													"//         pm.sendRequest(decisionReadyConfig, (err, res) => {",
													"//             if (err) throw new Error('decision ready call failed');",
													"",
													"//             // set 'IDIQ questions' config",
													"//             IDIQQuestionsConfig = {",
													"//                 url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQQuestionsPath,",
													"//                 method: 'POST',",
													"//                 header: {",
													"//                     'Content-Type': 'application/json',",
													"//                 },",
													"//                 body: {",
													"//                     mode: 'raw',",
													"//                     raw: JSON.stringify({",
													"//                         \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
													"//                     })",
													"//                 }",
													"//             }",
													"",
													"//             cb(err, res);",
													"//         })",
													"//     }, 60000),",
													"",
													"//     // IDID Questions request",
													"//     (cb) => pm.sendRequest(IDIQQuestionsConfig, (err, res) => {",
													"//         if (err) throw new Error('create /identity/questions call failed');",
													"//         const { applicationId, identityQuestions } = res.json();",
													"",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         pm.environment.set(\"question1\", identityQuestions[0].questionId);",
													"//         pm.environment.set(\"question2\", identityQuestions[1].questionId);",
													"",
													"//         // set 'IDIQ answers' config",
													"//         IDIQAnswersConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + IDIQAnswersPath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'Content-Type': 'application/json',",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: JSON.stringify({",
													"//                         \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
													"//                         \"identityAnswers\": [",
													"//                             {",
													"//                                 \"questionId\": env.get('question1'),",
													"//                                 \"value\": 'NONE OF THE ABOVE / DOES NOT APPLY'",
													"//                             },",
													"//                             {",
													"//                                 \"questionId\": env.get('question2'),",
													"//                                 \"value\": 'NONE OF THE ABOVE / DOES NOT APPLY'",
													"//                             }",
													"//                         ]",
													"//                     })",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // IDID Answers request",
													"//     (cb) => pm.sendRequest(IDIQAnswersConfig, (err, res) => {",
													"//         if (err) throw new Error('create /identity/answers call failed');",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         // set 'accept offer' config",
													"//         acceptOfferConfig = {",
													"//             url: baseURL + b2cPath + sessionPath + \"/\" + pm.environment.get(\"applicationId\") + acceptOfferPath,",
													"//             method: 'POST',",
													"//             header: {",
													"//                 'Content-Type': 'application/json',",
													"//             },",
													"//             body: {",
													"//                 mode: 'raw',",
													"//                 raw: JSON.stringify({",
													"//                     \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"",
													"//                 })",
													"//             }",
													"//         }",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"//     // accept offer request",
													"//     (cb) => pm.sendRequest(acceptOfferConfig, (err, res) => {",
													"//         if (err) throw new Error('create /offer/accept call failed');",
													"//         const { applicationId } = res.json();",
													"//         console.info(\"applicationId = \" + applicationId);",
													"",
													"//         cb(err, res);",
													"//     }),",
													"",
													"// ], (err, res) => console.info('All pre-requests completed', err, res));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/**",
													" * WARNING!!!",
													" * ========================================================================",
													" * In between Esig setup & Esig status, an applicant has to docusign.",
													" * There are future plans to create a mock that takes away this manual intervention.",
													" * Until that's ready, these tests are commented out.",
													" */",
													"",
													" throw new Error(\"Wait for mocks\");",
													"",
													"// // Unhappypath - Verify error code 403 from create 'esig/setup' when application state is invalid",
													"// pm.test(\"Esig setup' status code is 403\", ()=> {",
													"//     pm.response.to.have.status(403);",
													"// });",
													"",
													"// // Unhappypath - Verify error if application state is invalid",
													"// pm.test(\"Validate 'invalid Application State' error in response body'\", function () {",
													"//     const { code, message } = pm.response.json().errors[0];",
													"//     pm.expect(code).to.eql(\"APPLICATION_STATE_INVALID\");",
													"//     pm.expect(message).to.eql(\"Invalid Application State\");",
													"// });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followOriginalHttpMethod": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}{{esig_setup}}",
											"host": [
												"{{dev3}}{{b2c}}{{getsession}}"
											],
											"path": [
												"{{applicationId}}{{esig_setup}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "REFUND (BLOCKED TESTS)",
							"item": [
								{
									"name": "Validation_Tests",
									"item": [
										{
											"name": "MessageID",
											"item": [
												{
													"name": "invalid_50_chars+",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Valid 50+ char messageId error\", function () {",
																	"//     const { message } = res.errors[0]",
																	"",
																	"//     pm.expect(message).to.eq(\"\\\"messageId\\\" length must be less than or equal to 50 characters long\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"\",\n    \"loanApplicationReference\": \"PL/0020080111\",\n    \"refundAmount\": 299.99\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid_space",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Valid space not allowed messageId error\", function () {",
																	"//     const { message } = res.errors[0]",
																	"",
																	"//     pm.expect(message).to.eq(\"\\\"messageId\\\" with value \\\"abc 123\\\" fails to match the required pattern: /^[^~`§±!@€£#$%^&(){}|:;\\\"'<>,.?¡¢¶•ªº«\\\\s]*$/\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"abc 123\",\n    \"loanApplicationReference\": \"PL/0020080111\",\n    \"refundAmount\": 299.99\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid_less_than_1_char",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Valid < 1 char messageId error\", function () {",
																	"//     const { message } = res.errors[0]",
																	"",
																	"//     pm.expect(message).to.eq(\"\\\"messageId\\\" contains an invalid value. \\\"messageId\\\" is not allowed to be empty\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"\",\n    \"loanApplicationReference\": \"PL/0020080111\",\n    \"refundAmount\": 299.99\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid_disallowed_chars",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Valid disallowed chars messageId error\", function () {",
																	"//     const { message } = res.errors[0]",
																	"",
																	"//     pm.expect(message).to.eq(\"\\\"messageId\\\" with value \\\"~`§±!@€£#$%^&*(){}|:;”’<>,.?¡¢¶•ªº«\\\" fails to match the required pattern: /^[^~`§±!@€£#$%^&(){}|:;\\\"'<>,.?¡¢¶•ªº«\\\\s]*$/\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"~`§±!@€£#$%^&*(){}|:;”’<>,.?¡¢¶•ªº«\",\n    \"loanApplicationReference\": \"PL/0020080111\",\n    \"refundAmount\": 299.99\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "valid_allowed_special_chars",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 200\", function () {",
																	"//     pm.response.to.have.status(200);",
																	"// });",
																	"",
																	"// pm.test(\"Success response\", function () {",
																	"//     const { refundResponse } = res",
																	"",
																	"//     pm.expect(refundResponse).to.eq(\"success\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"-_+=[]\\/\",\n    \"loanApplicationReference\": \"PL/0020080111\",\n    \"refundAmount\": 299.99\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "valid_leading_0",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 200\", function () {",
																	"//     pm.response.to.have.status(200);",
																	"// });",
																	"",
																	"// pm.test(\"Success response\", function () {",
																	"//     const { refundResponse } = res",
																	"",
																	"//     pm.expect(refundResponse).to.eq(\"success\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"0-_+=[]\\/\",\n    \"loanApplicationReference\": \"PL/0020080111\",\n    \"refundAmount\": 299.99\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "LoanApplicationReference",
											"item": [
												{
													"name": "invalid_50+_chars",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Valid < 1 char error\", function () {",
																	"//     const { message } = res.errors[0]",
																	"",
																	"//     pm.expect(message).to.eq(\"\\\"loanApplicationReference\\\" length must be less than or equal to 50 characters long\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"123987e-387hdbsh-dk3jsnhh3-e228dsj\",\n    \"loanApplicationReference\": \"\",\n    \"refundAmount\": 299.99\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid_space",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Valid space not allowed error\", function () {",
																	"//     const { message } = res.errors[0]",
																	"",
																	"//     pm.expect(message).to.eq(\"\\\"loanApplicationReference\\\" with value \\\"abc 123\\\" fails to match the required pattern: /^[^~`§±!@€£#$%^&(){}|:;\\\"'<>,.?¡¢¶•ªº«\\\\s]*$/\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"123987e-387hdbsh-dk3jsnhh3-e228dsj\",\n    \"loanApplicationReference\": \"abc 123\",\n    \"refundAmount\": 299.99\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid_less_than_1_char",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Valid < 1 char messageId error\", function () {",
																	"//     const { message } = res.errors[0]",
																	"",
																	"//     pm.expect(message).to.eq(\"\\\"loanApplicationReference\\\" is not allowed to be empty\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"123987e-387hdbsh-dk3jsnhh3-e228dsj\",\n    \"loanApplicationReference\": \"\",\n    \"refundAmount\": 299.99\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid_disallowed_chars",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Valid disallowed chars messageId error\", function () {",
																	"//     const { message } = res.errors[0]",
																	"",
																	"//     pm.expect(message).to.eq(\"\\\"loanApplicationReference\\\" with value \\\"~`§±!@€£#$%^&*(){}|:;”’<>,.?¡¢¶•ªº«\\\" fails to match the required pattern: /^[^~`§±!@€£#$%^&(){}|:;\\\"'<>,.?¡¢¶•ªº«\\\\s]*$/\");",
																	"",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"123987e-387hdbsh-dk3jsnhh3-e228dsj\",\n    \"loanApplicationReference\": \"~`§±!@€£#$%^&*(){}|:;”’<>,.?¡¢¶•ªº«\",\n    \"refundAmount\": 299.99\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "valid_allowed_special_chars",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 200\", function () {",
																	"//     pm.response.to.have.status(200);",
																	"// });",
																	"",
																	"// pm.test(\"Success message in response\", function () {",
																	"//     const { refundResponse } = res",
																	"",
																	"//     pm.expect(refundResponse).to.eq(\"success\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"testMessageId\",\n    \"loanApplicationReference\": \"-_+=[]\\/\",\n    \"refundAmount\": 299.99\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "valid_leading_0",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 200\", function () {",
																	"//     pm.response.to.have.status(200);",
																	"// });",
																	"",
																	"// pm.test(\"Success message in response\", function () {",
																	"//     const { refundResponse } = res",
																	"",
																	"//     pm.expect(refundResponse).to.eq(\"success\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"1238798-2319287-3123987\",\n    \"loanApplicationReference\": \"0-_+=[]\\/\",\n    \"refundAmount\": 299.99\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "RefundAmount",
											"item": [
												{
													"name": "invalid_string",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Valid refundAmount not number error\", function () {",
																	"//     const { message } = res.errors[0]",
																	"",
																	"//     pm.expect(message).to.eq(\"\\\"refundAmount\\\" must be a number\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"-_+=[]\\/\",\n    \"loanApplicationReference\": \"PL/0020080111\",\n    \"refundAmount\": \"299.99\"\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid_minus_number",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Valid refundAmount less than 0 error\", function () {",
																	"//     const { message } = res.errors[0]",
																	"",
																	"//     pm.expect(message).to.eq(\"\\\"refundAmount\\\" must be larger than or equal to 0\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"-_+=[]\\/\",\n    \"loanApplicationReference\": \"PL/0020080111\",\n    \"refundAmount\": -299.99\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid_number_too_large",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Valid refundAmount more than 1000000 error\", function () {",
																	"//     const { message } = res.errors[0]",
																	"",
																	"//     pm.expect(message).to.eq(\"\\\"refundAmount\\\" must be less than or equal to 1000000\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"-_+=[]\\/\",\n    \"loanApplicationReference\": \"PL/0020080111\",\n    \"refundAmount\": 1000000.01\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "invalid_blank_object",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Valid refundAmount not a number error\", function () {",
																	"//     const { message } = res.errors[0]",
																	"",
																	"//     pm.expect(message).to.eq(\"\\\"refundAmount\\\" must be a number\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"-_+=[]\\/\",\n    \"loanApplicationReference\": \"PL/0020080111\",\n    \"refundAmount\": {}\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												},
												{
													"name": "valid_leading_0",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/**",
																	" * WARNING!!!",
																	" * ========================================================================",
																	" * There is a requirement to report /refund requests (successful or not)",
																	" * Do NOT run these tests until we have the /refund mocks!!!",
																	" */",
																	"",
																	"throw new Error('Do NOT run these tests until we have /refund mocks');",
																	"",
																	"",
																	"// var res = pm.response.json();",
																	"",
																	"// pm.test(\"Status code is 400\", function () {",
																	"//     pm.response.to.have.status(400);",
																	"// });",
																	"",
																	"// pm.test(\"Success message in response\", function () {",
																	"//     const { refundResponse } = res",
																	"",
																	"//     pm.expect(refundResponse).to.eq(\"success\");",
																	"// })"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"messageId\": \"-_+=[]\\/\",\n    \"loanApplicationReference\": \"PL/0020080111\",\n    \"refundAmount\": 0.99\n}\n\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dev3}}{{b2b}}/v1/loans/WAITING_FOR_REFUND_MOCKS",
															"host": [
																"{{dev3}}{{b2b}}"
															],
															"path": [
																"v1",
																"loans",
																"WAITING_FOR_REFUND_MOCKS"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "APPLY (BLOCKED SCENARIOS)",
							"item": [
								{
									"name": "FPP-2608-apply-validation-400-error-UnHappyPath (BLOCKED)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"/**",
													" * WARNING!!!",
													" * ========================================================================",
													" * We have /apply endpoint validation scenarios called:",
													" * \"scenario\":\"deviceRiskBlackBox is required\"",
													" * \"scenario\":\"deviceRiskBlackBox is empty\"",
													" * These scenarios has had to be removed (temporarily) from the external data file because SB has a reporting",
													" * requirement for /apply requests made without the 'deviceRiskBlackBox' field.",
													" * ",
													" * When we have the /apply mocks, ALL that is required will be to re-add the JSON object below back into the file \"FPP-2608-apply-validation-data.json\" AND delete this file (FPP-2608-apply-validation-400-error-UnHappyPath (BLOCKED)) as it's only a placeholder",
													"",
													"    {",
													"        \"scenario\":\"deviceRiskBlackBox is required\",",
													"        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
													"        \"ipAddress\": \"99.99.99.99\",",
													"        \"statusCode\": 400,",
													"        \"code\": \"APPLY_REQUEST_INVALID\",",
													"        \"errorDescription\": \"\\\"deviceRiskBlackBox\\\" is required\"",
													"    },",
													"    {",
													"        \"scenario\":\"deviceRiskBlackBox is empty\",",
													"        \"messageId\": \"5ec8af2d-5c05-4903-8d56-ba5f9765d1ee\",",
													"        \"deviceRiskBlackBox\": \"\",",
													"        \"ipAddress\": \"99.99.99.99\",",
													"        \"statusCode\": 400,",
													"        \"code\": \"APPLY_REQUEST_INVALID\",",
													"        \"errorDescription\": \"\\\"deviceRiskBlackBox\\\" contains an invalid value. \\\"deviceRiskBlackBox\\\" is not allowed to be empty\"",
													"    },",
													" */",
													"",
													"throw new Error('Do NOT run these tests until we have /apply mocks');",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{req_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dev3}}{{b2c}}{{getsession}}/{{applicationId}}WAITING_FOR_APPLY_MOCKS",
											"host": [
												"{{dev3}}{{b2c}}{{getsession}}"
											],
											"path": [
												"{{applicationId}}WAITING_FOR_APPLY_MOCKS"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "schema_createuser_response",
			"value": ""
		},
		{
			"key": "schema_create_user_response",
			"value": ""
		},
		{
			"key": "schema_validate_getsession_response",
			"value": ""
		},
		{
			"key": "schema_get_challenge_idiq_questions_response",
			"value": ""
		},
		{
			"key": "schema_post_identity",
			"value": ""
		},
		{
			"key": "schema_post_identity_answers",
			"value": ""
		},
		{
			"key": "schema_get_quote",
			"value": ""
		},
		{
			"key": "schema_setup_response",
			"value": ""
		},
		{
			"key": "schema_validate_bank_account_response",
			"value": ""
		},
		{
			"key": "schema_post_setup_argos_checkout",
			"value": ""
		},
		{
			"key": "schema_setup_request_invalid",
			"value": ""
		},
		{
			"key": "schema_validate_CPMS_400_NO_CREDIT_PLANS",
			"value": ""
		},
		{
			"key": "schema_validate_500_exception",
			"value": ""
		},
		{
			"key": "schema_get_get_application",
			"value": ""
		},
		{
			"key": "response_schema_post_bankaccount_validate",
			"value": ""
		},
		{
			"key": "schema_post_create_application",
			"value": ""
		},
		{
			"key": "response_schema_get_ping_api_validate",
			"value": ""
		},
		{
			"key": "schema_post_create_rejected_application",
			"value": ""
		},
		{
			"key": "schema_post_create_quote",
			"value": ""
		},
		{
			"key": "schema_get_create_application",
			"value": ""
		},
		{
			"key": "response_schema_exit",
			"value": ""
		},
		{
			"key": "schema_post_apply",
			"value": ""
		},
		{
			"key": "schema_post_decison_ready",
			"value": ""
		},
		{
			"key": "schema_post_ID_answers",
			"value": ""
		},
		{
			"key": "schema_post_IDquestions",
			"value": ""
		},
		{
			"key": "schema_accept_offer",
			"value": ""
		},
		{
			"key": "schema_esig_status",
			"value": ""
		},
		{
			"key": "schema_esig_setup",
			"value": ""
		},
		{
			"key": "schema_post_exit",
			"value": ""
		},
		{
			"key": "schema_post_auth",
			"value": ""
		}
	]
}